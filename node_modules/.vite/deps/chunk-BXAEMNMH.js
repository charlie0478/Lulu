import {
  __commonJS
} from "./chunk-TCQZMY3T.js";

// node_modules/style-object-to-css-string/dist/createParser.js
var require_createParser = __commonJS({
  "node_modules/style-object-to-css-string/dist/createParser.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    function createParser(matcher, replacer) {
      const regex = RegExp(matcher, "g");
      return (string) => {
        if (typeof string !== "string") {
          throw new TypeError("expected an argument of type string, but got ".concat(typeof styleObj));
        }
        if (!string.match(regex)) {
          return string;
        }
        return string.replace(regex, replacer);
      };
    }
    var _default = createParser;
    exports["default"] = _default;
  }
});

// node_modules/style-object-to-css-string/dist/parsers.js
var require_parsers = __commonJS({
  "node_modules/style-object-to-css-string/dist/parsers.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.snakeToKebab = exports.camelToKebab = void 0;
    var _createParser = _interopRequireDefault(require_createParser());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    var camelToKebab = (0, _createParser["default"])(/[A-Z]/, (match) => "-".concat(match.toLowerCase()));
    exports.camelToKebab = camelToKebab;
    var snakeToKebab = (0, _createParser["default"])(/_/, () => "-");
    exports.snakeToKebab = snakeToKebab;
  }
});

// node_modules/style-object-to-css-string/dist/objToString.js
var require_objToString = __commonJS({
  "node_modules/style-object-to-css-string/dist/objToString.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _parsers = require_parsers();
    function objToString(styleObj2, parser = _parsers.camelToKebab) {
      if (!styleObj2 || typeof styleObj2 !== "object" || Array.isArray(styleObj2)) {
        throw new TypeError("expected an argument of type object, but got ".concat(typeof styleObj2));
      }
      const lines = Object.keys(styleObj2).map((property) => "".concat(parser(property), ": ").concat(styleObj2[property], ";"));
      return lines.join("\n");
    }
    var _default = objToString;
    exports["default"] = _default;
  }
});

// node_modules/style-object-to-css-string/dist/index.js
var require_dist = __commonJS({
  "node_modules/style-object-to-css-string/dist/index.js"(exports, module) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "createParser", {
      enumerable: true,
      get: function get() {
        return _createParser["default"];
      }
    });
    exports.parsers = exports["default"] = void 0;
    var _objToString = _interopRequireDefault(require_objToString());
    var _createParser = _interopRequireDefault(require_createParser());
    var parsers = _interopRequireWildcard(require_parsers());
    exports.parsers = parsers;
    function _interopRequireWildcard(obj) {
      if (obj && obj.__esModule) {
        return obj;
      } else {
        var newObj = {};
        if (obj != null) {
          for (var key in obj) {
            if (Object.prototype.hasOwnProperty.call(obj, key)) {
              var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};
              if (desc.get || desc.set) {
                Object.defineProperty(newObj, key, desc);
              } else {
                newObj[key] = obj[key];
              }
            }
          }
        }
        newObj["default"] = obj;
        return newObj;
      }
    }
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
          ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
            return Object.getOwnPropertyDescriptor(source, sym).enumerable;
          }));
        }
        ownKeys.forEach(function(key) {
          _defineProperty(target, key, source[key]);
        });
      }
      return target;
    }
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    var _default = _objToString["default"];
    exports["default"] = _default;
    module.exports = _objToString["default"];
    module.exports.createParser = _createParser["default"];
    module.exports.parsers = _objectSpread({}, parsers);
  }
});

export {
  require_dist
};
//# sourceMappingURL=chunk-BXAEMNMH.js.map
