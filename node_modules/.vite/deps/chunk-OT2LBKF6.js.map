{
  "version": 3,
  "sources": ["../../@cloudinary/url-gen/config/BaseConfig.js", "../../@cloudinary/url-gen/internal/internalConstants.js", "../../@cloudinary/url-gen/config/URLConfig.js", "../../@cloudinary/transformation-builder-sdk/internal/qualifier/QualifierValue.js", "../../@cloudinary/transformation-builder-sdk/internal/utils/unsupportedError.js", "../../@cloudinary/transformation-builder-sdk/internal/models/qualifierToJson.js", "../../@cloudinary/transformation-builder-sdk/internal/models/QualifierModel.js", "../../@cloudinary/transformation-builder-sdk/internal/qualifier/Qualifier.js", "../../@cloudinary/transformation-builder-sdk/qualifiers/flag/FlagQualifier.js", "../../@cloudinary/transformation-builder-sdk/internal/utils/dataStructureUtils.js", "../../@cloudinary/transformation-builder-sdk/internal/models/actionToJson.js", "../../@cloudinary/transformation-builder-sdk/internal/models/ActionModel.js", "../../@cloudinary/transformation-builder-sdk/internal/Action.js", "../../@cloudinary/transformation-builder-sdk/actions/background/actions/BackgroundColor.js", "../../@cloudinary/transformation-builder-sdk/internal/utils/prepareColor.js", "../../@cloudinary/transformation-builder-sdk/internal/RawAction.js", "../../@cloudinary/transformation-builder-sdk/internal/models/IErrorObject.js", "../../@cloudinary/transformation-builder-sdk/qualifiers/flag.js", "../../@cloudinary/transformation-builder-sdk/qualifiers/format/FormatQualifier.js", "../../@cloudinary/transformation-builder-sdk/internal/utils/objectFlip.js", "../../@cloudinary/transformation-builder-sdk/internal/internalConstants.js", "../../@cloudinary/transformation-builder-sdk/actions/delivery/DeliveryAction.js", "../../@cloudinary/transformation-builder-sdk/qualifiers/progressive.js", "../../@cloudinary/transformation-builder-sdk/actions/delivery/DeliveryFormatAction.js", "../../@cloudinary/transformation-builder-sdk/transformation/Transformation.js", "../../@cloudinary/transformation-builder-sdk/transformation/ImageTransformation.js", "../../@cloudinary/transformation-builder-sdk/transformation/VideoTransformation.js", "../../@cloudinary/transformation-builder-sdk/backwards/consts.js", "../../@cloudinary/transformation-builder-sdk/backwards/utils/snakeCase.js", "../../@cloudinary/transformation-builder-sdk/internal/utils/cloneDeep.js", "../../@cloudinary/transformation-builder-sdk/backwards/configuration.js", "../../@cloudinary/transformation-builder-sdk/backwards/utils/legacyBaseUtil.js", "../../@cloudinary/transformation-builder-sdk/backwards/transformation.js", "../../@cloudinary/transformation-builder-sdk/qualifiers/autoFocus.js", "../../@cloudinary/transformation-builder-sdk/qualifiers/videoCodecType/VideoCodecType.js", "../../@cloudinary/transformation-builder-sdk/qualifiers/videoCodec.js", "../../@cloudinary/url-gen/internal/url/urlUtils/isUrl.js", "../../@cloudinary/url-gen/internal/url/urlUtils/isFileName.js", "../../@cloudinary/url-gen/internal/url/urlUtils/publicIDContainsVersion.js", "../../@cloudinary/url-gen/internal/url/cloudinaryURL.js", "../../@cloudinary/url-gen/sdkAnalytics/stringPad.js", "../../@cloudinary/url-gen/sdkAnalytics/base64Map.js", "../../@cloudinary/url-gen/sdkAnalytics/reverseVersion.js", "../../@cloudinary/url-gen/sdkAnalytics/encodeVersion.js", "../../@cloudinary/url-gen/sdkAnalytics/getAnalyticsOptions.js", "../../@cloudinary/url-gen/internal/utils/packageVersion.js", "../../@cloudinary/url-gen/sdkAnalytics/getSDKAnalyticsSignature.js", "../../@cloudinary/url-gen/assets/CloudinaryFile.js", "../../@cloudinary/url-gen/assets/CloudinaryTransformable.js", "../../@cloudinary/url-gen/assets/CloudinaryImage.js", "../../@cloudinary/url-gen/assets/CloudinaryVideo.js", "../../@cloudinary/url-gen/internal/utils/cloneDeep.js", "../../@cloudinary/url-gen/instance/Cloudinary.js", "../../@cloudinary/url-gen/backwards/consts.js", "../../@cloudinary/url-gen/backwards/utils/snakeCase.js", "../../@cloudinary/url-gen/backwards/configuration.js", "../../@cloudinary/url-gen/backwards/utils/legacyBaseUtil.js", "../../@cloudinary/url-gen/backwards/transformation.js", "../../@cloudinary-util/url-loader/dist/index.mjs"],
  "sourcesContent": ["/**\n *\n * @private\n * @param {any} a\n */\nfunction isObject(a) {\n    if (typeof a !== 'object' || a instanceof Array) {\n        return false;\n    }\n    else {\n        return true;\n    }\n}\nclass Config {\n    filterOutNonSupportedKeys(userProvidedConfig, validKeys) {\n        const obj = Object.create({});\n        if (isObject(userProvidedConfig)) {\n            Object.keys(userProvidedConfig).forEach((key) => {\n                if (validKeys.indexOf(key) >= 0) {\n                    obj[key] = userProvidedConfig[key];\n                }\n                else {\n                    console.warn('Warning - unsupported key provided to configuration: ', key);\n                }\n            });\n            return obj;\n        }\n        else {\n            return Object.create({});\n        }\n    }\n}\nexport default Config;\n", "/**\n * This file is for internal constants only.\n * It is not intended for public use and is not part of the public API\n */\n/**\n * @private\n */\nexport const ALLOWED_URL_CONFIG = [\n    'cname',\n    'secureDistribution',\n    'privateCdn',\n    'signUrl',\n    'longUrlSignature',\n    'shorten',\n    'useRootPath',\n    'secure',\n    'forceVersion',\n    'analytics',\n    'queryParams'\n];\n/**\n * @private\n */\nexport const ALLOWED_CLOUD_CONFIG = [\n    'cloudName',\n    'apiKey',\n    'apiSecret',\n    'authToken'\n];\n", "import Config from \"./BaseConfig.js\";\nimport { ALLOWED_URL_CONFIG } from \"../internal/internalConstants.js\";\nclass URLConfig extends Config {\n    /**\n     * @param {IURLConfig} userURLConfig\n     */\n    constructor(userURLConfig) {\n        super();\n        const urlConfig = this.filterOutNonSupportedKeys(userURLConfig, ALLOWED_URL_CONFIG);\n        Object.assign(this, {\n            secure: true\n        }, urlConfig);\n    }\n    extend(userURLConfig) {\n        const urlConfig = this.filterOutNonSupportedKeys(userURLConfig, ALLOWED_URL_CONFIG);\n        return new URLConfig(Object.assign({}, this, urlConfig));\n    }\n    /**\n     * @param {string} value Sets the cname\n     */\n    setCname(value) {\n        this.cname = value;\n        return this;\n    }\n    /**\n     * @param {string} value Sets the secureDistribution\n     */\n    setSecureDistribution(value) {\n        this.secureDistribution = value;\n        return this;\n    }\n    /**\n     * @param {boolean} value Sets whether to use a private CDN (Removes cloudName from URL)\n     */\n    setPrivateCdn(value) {\n        this.privateCdn = value;\n        return this;\n    }\n    /**\n     * @param value Sets whether or not to sign the URL\n     */\n    setSignUrl(value) {\n        this.signUrl = value;\n        return this;\n    }\n    /**\n     * @param value Sets whether or not to use a long signature\n     */\n    setLongUrlSignature(value) {\n        this.longUrlSignature = value;\n        return this;\n    }\n    /**\n     * @param value Sets whether or not to shorten the URL\n     */\n    setShorten(value) {\n        this.shorten = value;\n        return this;\n    }\n    /**\n     * @param value Sets whether or not to use a root path\n     */\n    setUseRootPath(value) {\n        this.useRootPath = value;\n        return this;\n    }\n    /**\n     * @param value Sets whether or not to deliver the asset through https\n     */\n    setSecure(value) {\n        this.secure = value;\n        return this;\n    }\n    /**\n     * @param value Sets whether to force a version in the URL\n     */\n    setForceVersion(value) {\n        this.forceVersion = value;\n        return this;\n    }\n    /**\n     * @param params Sets additional params\n     */\n    setQueryParams(params) {\n        this.queryParams = params;\n        return this;\n    }\n}\nexport default URLConfig;\n", "/**\n * @summary SDK\n * @memberOf SDK\n */\nclass QualifierValue {\n    /**\n     *\n     * @param {QualifierValue | QualifierValue[] | any[] | string | number}qualifierValue\n     */\n    constructor(qualifierValue) {\n        this.values = [];\n        this.delimiter = ':'; // {value}{delimiter}{value}...\n        if (this.hasValue(qualifierValue)) {\n            this.addValue(qualifierValue);\n        }\n    }\n    /**\n     * @description Joins the provided values with the provided delimiter\n     */\n    toString() {\n        return this.values.join(this.delimiter);\n    }\n    /**\n     * @description Checks if the provided argument has a value\n     * @param {any} v\n     * @private\n     * @return {boolean}\n     */\n    hasValue(v) {\n        return typeof v !== 'undefined' && v !== null && v !== '';\n    }\n    /**\n     * @desc Adds a value for the this qualifier instance\n     * @param {any} value\n     * @return {this}\n     */\n    addValue(value) {\n        // Append value or array of values\n        if (Array.isArray(value)) {\n            this.values = this.values.concat(value);\n        }\n        else {\n            this.values.push(value);\n        }\n        // Remove falsy values\n        this.values = this.values.filter((v) => this.hasValue(v));\n        return this;\n    }\n    /**\n     * @description Sets the delimiter for this instance\n     * @param delimiter\n     */\n    setDelimiter(delimiter) {\n        this.delimiter = delimiter;\n        return this;\n    }\n}\nexport { QualifierValue };\n", "class UnsupportedError extends Error {\n    constructor(message = 'Unsupported') {\n        super(message);\n    }\n}\n/**\n * Creates a new UnsupportedError\n * @param message\n */\nfunction createUnsupportedError(message) {\n    return new UnsupportedError(message);\n}\nexport { UnsupportedError, createUnsupportedError };\n", "import { createUnsupportedError } from \"../utils/unsupportedError.js\";\n/**\n * Returns the action's model\n */\nexport function qualifierToJson() {\n    return this._qualifierModel || { error: createUnsupportedError(`unsupported qualifier ${this.constructor.name}`) };\n}\n", "import { qualifierToJson } from \"./qualifierToJson.js\";\nexport class QualifierModel {\n    constructor() {\n        this._qualifierModel = {};\n    }\n    toJson() {\n        return qualifierToJson.apply(this);\n    }\n}\n", "import { QualifierValue } from './QualifierValue.js';\nimport { QualifierModel } from '../models/QualifierModel.js';\n/**\n * @summary SDK\n * @memberOf SDK\n */\nclass Qualifier extends QualifierModel {\n    constructor(key, qualifierValue) {\n        super();\n        this.delimiter = '_'; // {key}{delimiter}{qualifierValue}\n        this.key = key;\n        if (qualifierValue instanceof QualifierValue) {\n            this.qualifierValue = qualifierValue;\n        }\n        else {\n            this.qualifierValue = new QualifierValue();\n            this.qualifierValue.addValue(qualifierValue);\n        }\n    }\n    toString() {\n        const { key, delimiter, qualifierValue } = this;\n        return `${key}${delimiter}${qualifierValue.toString()}`;\n    }\n    addValue(value) {\n        this.qualifierValue.addValue(value);\n        return this;\n    }\n}\nexport { Qualifier };\n", "import { QualifierValue } from \"../../internal/qualifier/QualifierValue.js\";\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\n/**\n * @memberOf Qualifiers.Flag\n * @extends {SDK.Qualifier}\n * @description the FlagQualifier class\n */\nclass FlagQualifier extends Qualifier {\n    constructor(flagType, flagValue) {\n        let qualifierValue;\n        if (flagValue) {\n            qualifierValue = new QualifierValue([flagType, `${flagValue}`]).setDelimiter(':');\n        }\n        else {\n            qualifierValue = flagType;\n        }\n        super('fl', qualifierValue);\n        this.flagValue = flagValue;\n    }\n    toString() {\n        return super.toString().replace(/\\./, '%2E');\n    }\n    getFlagValue() {\n        return this.flagValue;\n    }\n}\nexport { FlagQualifier };\n", "/**\n * Sort a map by key\n * @private\n * @param map <string, any>\n * @Return array of map's values sorted by key\n */\nfunction mapToSortedArray(map, flags) {\n    const array = Array.from(map.entries());\n    // objects from the Array.from() method above are stored in array of arrays:\n    // [[qualifierKey, QualifierObj], [qualifierKey, QualifierObj]]\n    // Flags is an array of FlagQualifierObj\n    // We need to convert it to the same form: [flagQualifier] =>  ['fl', flagQualifier]\n    flags.forEach((flag) => {\n        array.push(['fl', flag]); // push ['fl', flagQualifier]\n    });\n    return array.sort().map((v) => v[1]);\n}\n/**\n * Checks if `value` is a string.\n * @private\n * @param {*} value The value to check.\n * @return {boolean} `true` if `value` is a string, else `false`.\n */\nfunction isString(value) {\n    return (typeof value === 'string' || value instanceof String);\n}\nexport { isString, mapToSortedArray };\n", "import { createUnsupportedError } from \"../utils/unsupportedError.js\";\n/**\n * Returns the action's model\n */\nexport function actionToJson() {\n    var _a, _b, _c;\n    const actionModelIsNotEmpty = this._actionModel && Object.keys(this._actionModel).length;\n    const sourceTransformationError = (_c = (_b = (_a = this._actionModel) === null || _a === void 0 ? void 0 : _a.source) === null || _b === void 0 ? void 0 : _b.transformation) === null || _c === void 0 ? void 0 : _c.error;\n    // Should return error when there is unsupported transformation inside\n    if (sourceTransformationError && sourceTransformationError instanceof Error) {\n        return { error: sourceTransformationError };\n    }\n    if (actionModelIsNotEmpty) {\n        return this._actionModel;\n    }\n    return { error: createUnsupportedError(`unsupported action ${this.constructor.name}`) };\n}\n", "import { actionToJson } from \"./actionToJson.js\";\nexport class ActionModel {\n    constructor() {\n        this._actionModel = {};\n    }\n    toJson() {\n        return actionToJson.apply(this);\n    }\n}\n", "import { FlagQualifier } from \"../qualifiers/flag/FlagQualifier.js\";\nimport { Qualifier } from \"./qualifier/Qualifier.js\";\nimport { mapToSortedArray } from \"./utils/dataStructureUtils.js\";\nimport { ActionModel } from \"./models/ActionModel.js\";\n/**\n * @summary SDK\n * @memberOf SDK\n * @description Defines the category of transformation to perform.\n */\nclass Action extends ActionModel {\n    constructor() {\n        super(...arguments);\n        // We're using map, to overwrite existing keys. for example:\n        // addParam(w_100).addQualifier(w_200) should result in w_200. and not w_100,w_200\n        this.qualifiers = new Map();\n        // Unlike regular qualifiers, there can be multiple flags in each url component /fl_1,fl_2/\n        // If the falgs are added to the qualifiers map, only a single flag could exist in a component (it's a map)\n        // So flags are stored separately until the very end because of that reason\n        this.flags = [];\n        this.delimiter = ','; // {qualifier}{delimiter}{qualifier} for example: `${'w_100'}${','}${'c_fill'}`\n        this.actionTag = ''; // A custom name tag to identify this action in the future\n    }\n    prepareQualifiers() { }\n    /**\n     * @description Returns the custom name tag that was given to this action\n     * @return {string}\n     */\n    getActionTag() {\n        return this.actionTag;\n    }\n    /**\n     * @description Sets the custom name tag for this action\n     * @return {this}\n     */\n    setActionTag(tag) {\n        this.actionTag = tag;\n        return this;\n    }\n    /**\n     * @description Calls toString() on all child qualifiers (implicitly by using .join()).\n     * @return {string}\n     */\n    toString() {\n        this.prepareQualifiers();\n        return mapToSortedArray(this.qualifiers, this.flags).join(this.delimiter);\n    }\n    /**\n     * @description Adds the parameter to the action.\n     * @param {SDK.Qualifier} qualifier\n     * @return {this}\n     */\n    addQualifier(qualifier) {\n        // if string, find the key and value\n        if (typeof qualifier === 'string') {\n            const [key, value] = qualifier.toLowerCase().split('_');\n            if (key === 'fl') {\n                // if string qualifier is a flag, store it in the flags arrays\n                this.flags.push(new FlagQualifier(value));\n            }\n            else {\n                // if the string qualifier is not a flag, create a new qualifier from it\n                this.qualifiers.set(key, new Qualifier(key, value));\n            }\n        }\n        else {\n            // if a qualifier object, insert to the qualifiers map\n            this.qualifiers.set(qualifier.key, qualifier);\n        }\n        return this;\n    }\n    /**\n     * @description Adds a flag to the current action.\n     * @param {Qualifiers.Flag} flag\n     * @return {this}\n     */\n    addFlag(flag) {\n        if (typeof flag === 'string') {\n            this.flags.push(new FlagQualifier(flag));\n        }\n        else {\n            if (flag instanceof FlagQualifier) {\n                this.flags.push(flag);\n            }\n        }\n        return this;\n    }\n    addValueToQualifier(qualifierKey, qualifierValue) {\n        this.qualifiers.get(qualifierKey).addValue(qualifierValue);\n        return this;\n    }\n}\nexport { Action };\n", "import { Action } from \"../../../internal/Action.js\";\nimport { QualifierValue } from \"../../../internal/qualifier/QualifierValue.js\";\nimport { Qualifier } from \"../../../internal/qualifier/Qualifier.js\";\n/**\n * @extends SDK.Action\n * @description A class for background transformations.\n */\nclass BackgroundColor extends Action {\n    constructor(color) {\n        super();\n        this.addQualifier(new Qualifier('b', new QualifierValue(color).setDelimiter('_')));\n    }\n}\nexport { BackgroundColor };\n", "/**\n * Returns RGB or Color\n * @private\n * @param color\n */\nexport function prepareColor(color) {\n    if (color) {\n        return color.match(/^#/) ? `rgb:${color.substr(1)}` : color;\n    }\n    else {\n        return color;\n    }\n}\n", "import { createUnsupportedError } from \"./utils/unsupportedError.js\";\n/**\n * @summary SDK\n * @memberOf SDK\n * @description Defines an action that's a string literal, no validations or manipulations are performed\n */\nclass RawAction {\n    constructor(raw) {\n        this.raw = raw;\n    }\n    toString() {\n        return this.raw;\n    }\n    toJson() {\n        return { error: createUnsupportedError(`unsupported action ${this.constructor.name}`) };\n    }\n}\nexport { RawAction };\n", "/**\n * Validates obj is an instance of IErrorObject\n * @param obj\n */\nfunction isErrorObject(obj) {\n    const errorObj = obj;\n    return ('error' in errorObj) && !!errorObj.error;\n}\nexport { isErrorObject };\n", "/**\n * @description Defines flags that you can use to alter the default transformation behavior.\n * @namespace Flag\n * @memberOf Qualifiers\n */\nimport { FlagQualifier } from \"./flag/FlagQualifier.js\";\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * @description Used when delivering a video file as an image format that supports animation, such as animated WebP.\n * Plays all frames rather than just delivering the first one as a static image.\n * Use this flag in addition to the flag or parameter controlling the delivery format,\n * for example f_auto or fl_awebp.\n\n * Note: When delivering a video in GIF format, it is delivered as an animated GIF by default and this flag is not\n * necessary. To deliver a single frame of a video in GIF format, use the page parameter.\n * @return {Qualifiers.Flag.FlagQualifier}\n */\nfunction animated() {\n    return new FlagQualifier('animated');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * @description When converting animated images to WebP format, generate an animated WebP from all the frames in the\n * original\n * animated file instead of only from the first still frame.\n *\n * Note that animated WebPs are not supported in all browsers and versions.\n * @return {Qualifiers.Flag.FlagQualifier}\n */\nfunction animatedWebP() {\n    return new FlagQualifier('awebp');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * @description When used together with automatic quality (q_auto):\n * allow switching to PNG8 encoding if the quality algorithm decides that it's more efficient.\n * @return {Qualifiers.Flag.FlagQualifier}\n */\nfunction anyFormat() {\n    return new FlagQualifier('any_format');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * @description When converting animated images to PNG format, generates an animated PNG from all the frames in the\n * original\n * animated file instead of only from the first still frame.\n *\n * Note that animated PNGs are not supported in all browsers and versions.\n * @return {Qualifiers.Flag.FlagQualifier}\n */\nfunction animatedPng() {\n    return new FlagQualifier('apng');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * @description Trims pixels according to a clipping path included in the original image\n * (e.g., manually created using PhotoShop).\n * @return {Qualifiers.Flag.FlagQualifier}\n */\nfunction clip() {\n    return new FlagQualifier('clip');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * @description Trims pixels according to a clipping path included in the original image (e.g., manually created\n * using PhotoShop)\n * using an evenodd clipping rule.\n * @return {Qualifiers.Flag.FlagQualifier}\n */\nfunction clipEvenOdd() {\n    return new FlagQualifier('clip_evenodd');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * @description Instructs Cloudinary to clear all image meta-data (IPTC, Exif and XMP) while applying an incoming\n * transformation.\n * @return {Qualifiers.Flag.FlagQualifier}\n */\nfunction forceStrip() {\n    return new FlagQualifier('force_strip');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * @description Allows custom flag\n * @return {Qualifiers.Flag.FlagQualifier}\n */\nfunction custom(value) {\n    return new FlagQualifier(value);\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * @description Adds ICC color space metadata to the image, even when the original image doesn't contain any ICC data.\n * @return {Qualifiers.Flag.FlagQualifier}\n */\nfunction forceIcc() {\n    return new FlagQualifier('force_icc');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * @description Delivers the image as an attachment.\n * @param {string} filename The attachment's filename\n * @return {Qualifiers.Flag.FlagQualifier}\n */\nfunction attachment(filename) {\n    return new FlagQualifier('attachment', filename);\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * @description Returns metadata of the input asset and of the transformed output asset in JSON instead of the\n * transformed image.\n * @return {Qualifiers.Flag.FlagQualifier}\n */\nfunction getInfo() {\n    return new FlagQualifier('getinfo');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * @description Deliver an HLS adaptive bitrate streaming file as HLS v3 instead of the default version (HLS v4).\n * Delivering in this format requires a private CDN configuration.\n * @return {Qualifiers.Flag.FlagQualifier}\n */\nfunction hlsv3() {\n    return new FlagQualifier('hlsv3');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * @description Sets the cache-control to immutable for the asset.\n * @return {Qualifiers.Flag.FlagQualifier}\n */\nfunction immutableCache() {\n    return new FlagQualifier('immutable_cache');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * @description * Allows specifying only either width or height so the value of the second axis remains as is, and is not\n * recalculated to maintain the aspect ratio of the original image.\n * @return {Qualifiers.Flag.FlagQualifier}\n */\nfunction ignoreInitialAspectRatio() {\n    return new FlagQualifier('ignore_aspect_ratio');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * @description Keeps the copyright related fields when stripping meta-data.\n * @return {Qualifiers.Flag.FlagQualifier}\n */\nfunction keepAttribution() {\n    return new FlagQualifier('keep_attribution');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * Keep the Display Aspect Ratio metadata of the uploaded video (if it’s different from the current video\n * dimensions).\n * @return {Qualifiers.Flag.FlagQualifier}\n */\nfunction keepDar() {\n    return new FlagQualifier('keep_dar');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * @description Keeps all meta-data.\n * @return {Qualifiers.Flag.FlagQualifier}\n */\nfunction keepIptc() {\n    return new FlagQualifier('keep_iptc');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * @description Applies all chained transformations, until a transformation component that includes this flag, on the last added\n * overlay or underlay instead of applying on the containing image.\n * @return {Qualifiers.Flag.FlagQualifier}\n */\nfunction layerApply() {\n    return new FlagQualifier('layer_apply');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * @description Automatically use lossy compression when delivering animated GIF files.\n *\n * This flag can also be used as a conditional flag for delivering PNG files: it tells Cloudinary to deliver the\n * image in PNG format (as requested) unless there is no transparency channel - in which case deliver in JPEG\n * format.\n * @return {Qualifiers.Flag.FlagQualifier}\n */\nfunction lossy() {\n    return new FlagQualifier('lossy');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * @description Convert the audio channel to mono\n * @return {Qualifiers.Flag.FlagQualifier}\n */\nfunction mono() {\n    return new FlagQualifier('mono');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * @description Used internally by Position within an Overlay, this flag will tile the overlay across your image.\n *\n * <b>Learn more:</b> {@link https://cloudinary.com/documentation/transformation_reference#fl_no_overflow|Overflow in overlays}\n * @return {Qualifiers.Flag.FlagQualifier}\n */\nfunction noOverflow() {\n    return new FlagQualifier('no_overflow');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * @description Don't stream a video that is currently being generated on the fly. Wait until the video is fully generated.\n * @return {Qualifiers.Flag.FlagQualifier}\n */\nfunction noStream() {\n    return new FlagQualifier('no_stream');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * @description Generate PNG images in the png24 format.\n * @return {Qualifiers.Flag.FlagQualifier}\n */\nfunction png24() {\n    return new FlagQualifier('png24');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * @description Generate PNG images in the png32 format.\n * @return {Qualifiers.Flag.FlagQualifier}\n */\nfunction png32() {\n    return new FlagQualifier('png32');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * @description Generate PNG images in the PNG8 format.\n * @return {Qualifiers.Flag.FlagQualifier}\n */\nfunction png8() {\n    return new FlagQualifier('png8');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * @description When used with automatic fetch_format (f_auto): ensures that images with a transparency channel will be\n * delivered in PNG format.\n * @return {Qualifiers.Flag.FlagQualifier}\n */\nfunction preserveTransparency() {\n    return new FlagQualifier('preserve_transparency');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * @description Generates a JPG image using the progressive (interlaced) JPG format.\n *\n * This format allows the browser to quickly show a low-quality rendering of the image until the full-quality\n * image is loaded.\n *\n * @param {string} mode? The mode to determine a specific progressive outcome as follows:\n * * semi - A smart optimization of the decoding time, compression level and progressive rendering\n *          (less iterations). This is the default mode when using q_auto.\n * * steep - Delivers a preview very quickly, and in a single later phase improves the image to\n *           the required resolution.\n * * none  - Use this to deliver a non-progressive image. This is the default mode when setting\n *           a specific value for quality.\n * @return {Qualifiers.Flag.FlagQualifier}\n */\nfunction progressive(mode) {\n    return new FlagQualifier('progressive', mode);\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * @description Modifies percentage-based width & height parameters of overlays and underlays (e.g., 1.0) to be relative to the overlaid region\n * @return {Qualifiers.Flag.FlagQualifier}\n */\nfunction regionRelative() {\n    return new FlagQualifier('region_relative');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * @description Reduces the image to one flat pixelated layer (as opposed to the default vector based graphic) in\n * order to enable\n * PDF resizing and overlay manipulations.\n * @return {Qualifiers.Flag.FlagQualifier}\n */\nfunction rasterize() {\n    return new FlagQualifier('rasterize');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * @description Modifies percentage-based width & height parameters of overlays and underlays (e.g., 1.0) to be relative to the containing image instead of the added layer.\n * @return {Qualifiers.Flag.FlagQualifier}\n */\nfunction relative() {\n    return new FlagQualifier('relative');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * @description Instructs Cloudinary to run a sanitizer on the image (relevant only for the SVG format).\n * @return {Qualifiers.Flag.FlagQualifier}\n */\nfunction sanitize() {\n    return new FlagQualifier('sanitize');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * @description Splices the video stipulated as an overlay on to the end of the container video instead of adding it as an\n * overlay.\n * @return {Qualifiers.Flag.FlagQualifier}\n */\nfunction splice() {\n    return new FlagQualifier('splice');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * @description Instructs Cloudinary to clear all ICC color profile data included with the image.\n * @return {Qualifiers.Flag.FlagQualifier}\n */\nfunction stripProfile() {\n    return new FlagQualifier('strip_profile');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * @description If the requested video transformation has already been generated, this flag works identically to\n * Flag::attachment.\n *\n *  However, if the video transformation is being requested for the first time, this flag causes the video download\n * to begin immediately, streaming it as a fragmented video file.\n *\n * In contrast, if the regular fl_attachment flag is used when a user requests a new video transformation,\n * the download will begin only after the complete transformed video has been generated.\n *\n * Most standard video players successfully play fragmented video files without issue.\n *\n * @param {string} filename The attachment's filename\n * @return {Qualifiers.Flag.FlagQualifier}\n */\nfunction streamingAttachment(filename) {\n    return new FlagQualifier('streaming_attachment', filename);\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * @description Generates TIFF images using LZW compression and in the TIFF8 format.\n * @return {Qualifiers.Flag.FlagQualifier}\n */\nfunction tiff8Lzw() {\n    return new FlagQualifier('tiff8_lzw');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * @description Used internally by Position within an Overlay, this flag will tile the overlay across your image.\n *\n * <b>Learn more:</b> {@link https://cloudinary.com/documentation/layers#automatic_tiling|Tiling overlay}\n * @return {Qualifiers.Flag.FlagQualifier}\n */\nfunction tiled() {\n    return new FlagQualifier('tiled');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * @description Truncate (trim) a video file based on the start time defined in the metadata (relevant only where the metadata\n * includes a directive to play only a section of the video).\n * @return {Qualifiers.Flag.FlagQualifier}\n */\nfunction truncateTS() {\n    return new FlagQualifier('truncate_ts');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * @description Create a waveform image (in the format specified by the file extension) from the audio or video file.\n * @return {Qualifiers.Flag.FlagQualifier}\n */\nfunction waveform() {\n    return new FlagQualifier('waveform');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * @description A qualifier that ensures that an alpha channel is not applied to a TIFF image if it is a mask channel.\n * @return {Qualifiers.Flag.FlagQualifier}\n */\nfunction ignoreMaskChannels() {\n    return new FlagQualifier('ignore_mask_channels');\n}\nconst Flag = {\n    animated, anyFormat, animatedPng, animatedWebP,\n    clipEvenOdd, lossy, preserveTransparency, png8, png24, png32, progressive, rasterize,\n    sanitize, stripProfile, tiff8Lzw, attachment, forceIcc, forceStrip, getInfo, immutableCache,\n    keepAttribution, keepIptc, custom, streamingAttachment, hlsv3, keepDar, noStream, mono,\n    layerApply, relative, regionRelative, splice, truncateTS, waveform, ignoreInitialAspectRatio, clip,\n    tiled, noOverflow, ignoreMaskChannels\n};\nexport { Flag, animated, anyFormat, animatedPng, animatedWebP, clipEvenOdd, lossy, preserveTransparency, png8, png24, png32, progressive, rasterize, sanitize, stripProfile, tiff8Lzw, attachment, forceIcc, forceStrip, getInfo, immutableCache, keepAttribution, keepIptc, custom, streamingAttachment, hlsv3, keepDar, noStream, mono, layerApply, relative, regionRelative, splice, truncateTS, waveform, ignoreInitialAspectRatio, clip, tiled, noOverflow, ignoreMaskChannels };\n", "import { QualifierValue } from \"../../internal/qualifier/QualifierValue.js\";\n/**\n * @memberOf Qualifiers.Format\n * @extends {SDK.QualifierValue}\n */\nclass FormatQualifier extends QualifierValue {\n    constructor(val) {\n        super(val);\n        this.val = val;\n    }\n    getValue() {\n        return this.val;\n    }\n}\nexport { FormatQualifier };\n", "/**\n * Flip keys and values for given object\n * @param obj\n */\nfunction objectFlip(obj) {\n    const result = {};\n    Object.keys(obj).forEach((key) => {\n        result[obj[key]] = key;\n    });\n    return result;\n}\nexport { objectFlip };\n", "/**\n * This file is for internal constants only.\n * It is not intended for public use and is not part of the public API\n */\nimport { objectFlip } from \"./utils/objectFlip.js\";\nexport const CONDITIONAL_OPERATORS = {\n    \"=\": \"eq\",\n    \"!=\": \"ne\",\n    \"<\": \"lt\",\n    \">\": \"gt\",\n    \"<=\": \"lte\",\n    \">=\": \"gte\",\n    \"&&\": \"and\",\n    \"||\": \"or\",\n    \"*\": \"mul\",\n    \"/\": \"div\",\n    \"+\": \"add\",\n    \"-\": \"sub\",\n    \"^\": \"pow\"\n};\nexport const RESERVED_NAMES = {\n    \"aspect_ratio\": \"ar\",\n    \"aspectRatio\": \"ar\",\n    \"current_page\": \"cp\",\n    \"currentPage\": \"cp\",\n    \"duration\": \"du\",\n    \"face_count\": \"fc\",\n    \"faceCount\": \"fc\",\n    \"height\": \"h\",\n    \"initial_aspect_ratio\": \"iar\",\n    \"initial_height\": \"ih\",\n    \"initial_width\": \"iw\",\n    \"initialAspectRatio\": \"iar\",\n    \"initialHeight\": \"ih\",\n    \"initialWidth\": \"iw\",\n    \"initial_duration\": \"idu\",\n    \"initialDuration\": \"idu\",\n    \"page_count\": \"pc\",\n    \"page_x\": \"px\",\n    \"page_y\": \"py\",\n    \"pageCount\": \"pc\",\n    \"pageX\": \"px\",\n    \"pageY\": \"py\",\n    \"tags\": \"tags\",\n    \"width\": \"w\",\n    \"trimmed_aspect_ratio\": \"tar\",\n    \"current_public_id\": \"cpi\",\n    \"initial_density\": \"idn\",\n    \"page_names\": \"pgnames\"\n};\nexport const ACTION_TYPE_TO_CROP_MODE_MAP = {\n    limitFit: 'limit',\n    limitFill: 'lfill',\n    minimumFit: 'mfit',\n    thumbnail: 'thumb',\n    limitPad: 'lpad',\n    minimumPad: 'mpad'\n};\nexport const ACTION_TYPE_TO_DELIVERY_MODE_MAP = {\n    colorSpace: 'cs',\n    dpr: 'dpr',\n    density: 'dn',\n    defaultImage: 'd',\n    format: 'f',\n    quality: 'q'\n};\nexport const ACTION_TYPE_TO_EFFECT_MODE_MAP = {\n    redEye: 'redeye',\n    advancedRedEye: 'adv_redeye',\n    oilPaint: 'oil_paint',\n    unsharpMask: 'unsharp_mask',\n    makeTransparent: 'make_transparent'\n};\nexport const ACTION_TYPE_TO_QUALITY_MODE_MAP = {\n    autoBest: 'auto:best',\n    autoEco: 'auto:eco',\n    autoGood: 'auto:good',\n    autoLow: 'auto:low',\n    jpegminiHigh: 'jpegmini:1',\n    jpegminiMedium: 'jpegmini:2',\n    jpegminiBest: 'jpegmini:0'\n};\nexport const ACTION_TYPE_TO_STREAMING_PROFILE_MODE_MAP = {\n    fullHd: 'full_hd',\n    fullHdWifi: 'full_hd_wifi',\n    fullHdLean: 'full_hd_lean',\n    hdLean: 'hd_lean'\n};\nexport const CHROMA_VALUE_TO_CHROMA_MODEL_ENUM = {\n    444: \"CHROMA_444\",\n    420: \"CHROMA_420\"\n};\nexport const COLOR_SPACE_MODEL_MODE_TO_COLOR_SPACE_MODE_MAP = {\n    'noCmyk': 'no_cmyk',\n    'keepCmyk': 'keep_cmyk',\n    'tinySrgb': 'tinysrgb',\n    'srgbTrueColor': 'srgb:truecolor'\n};\nexport const ACTION_TYPE_TO_BLEND_MODE_MAP = {\n    'antiRemoval': 'anti_removal'\n};\nexport const CHROMA_MODEL_ENUM_TO_CHROMA_VALUE = objectFlip(CHROMA_VALUE_TO_CHROMA_MODEL_ENUM);\nexport const COLOR_SPACE_MODE_TO_COLOR_SPACE_MODEL_MODE_MAP = objectFlip(COLOR_SPACE_MODEL_MODE_TO_COLOR_SPACE_MODE_MAP);\nexport const CROP_MODE_TO_ACTION_TYPE_MAP = objectFlip(ACTION_TYPE_TO_CROP_MODE_MAP);\nexport const DELIVERY_MODE_TO_ACTION_TYPE_MAP = objectFlip(ACTION_TYPE_TO_DELIVERY_MODE_MAP);\nexport const EFFECT_MODE_TO_ACTION_TYPE_MAP = objectFlip(ACTION_TYPE_TO_EFFECT_MODE_MAP);\nexport const QUALITY_MODE_TO_ACTION_TYPE_MAP = objectFlip(ACTION_TYPE_TO_QUALITY_MODE_MAP);\nexport const STREAMING_PROFILE_TO_ACTION_TYPE_MAP = objectFlip(ACTION_TYPE_TO_STREAMING_PROFILE_MODE_MAP);\n", "import { Action } from \"../../internal/Action.js\";\nimport { FormatQualifier } from \"../../qualifiers/format/FormatQualifier.js\";\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\nimport { DELIVERY_MODE_TO_ACTION_TYPE_MAP } from \"../../internal/internalConstants.js\";\n/**\n * @description Qualifies the delivery of an asset.\n * @memberOf Actions.Delivery\n * @extends SDK.Action\n */\nclass DeliveryAction extends Action {\n    /**\n     * @param {string} deliveryKey A generic Delivery Action Key (such as q, f, dn, etc.)\n     * @param {string} deliveryType A Format Qualifiers for the action, such as Quality.auto()\n     * @param {string} modelProperty internal model property of the action, for example quality uses `level` while dpr uses `density`\n     * @see Visit {@link Actions.Delivery|Delivery} for an example\n     */\n    constructor(deliveryKey, deliveryType, modelProperty) {\n        super();\n        this._actionModel = {};\n        let deliveryTypeValue;\n        if (deliveryType instanceof FormatQualifier) {\n            deliveryTypeValue = deliveryType.getValue();\n        }\n        else {\n            deliveryTypeValue = deliveryType;\n        }\n        this._actionModel.actionType = DELIVERY_MODE_TO_ACTION_TYPE_MAP[deliveryKey];\n        this._actionModel[modelProperty] = deliveryTypeValue;\n        this.addQualifier(new Qualifier(deliveryKey, deliveryType));\n    }\n}\nexport { DeliveryAction };\n", "/**\n * @description Contains functions to select the mode when using a progressive format.\n * <b>Learn more</b>: {@link https://cloudinary.com/documentation/transformation_reference#fl_progressive|Progressive modes}\n * @memberOf Qualifiers\n * @namespace Progressive\n * @example\n * import {Cloudinary} from \"@cloudinary/url-gen\";\n * import {format} from \"@cloudinary/url-gen/actions/delivery\";\n * import {jpg} from \"@cloudinary/url-gen/qualifiers/format\";\n * import {steep} from \"@cloudinary/url-gen/qualifiers/progressive\";\n *\n * const yourCldInstance = new Cloudinary({cloud: {cloudName: 'demo'}});\n * const image = yourCldInstance.image('woman');\n * image.delivery(format(jpg()).progressive(steep()))\n */\nimport { FlagQualifier } from \"./flag/FlagQualifier.js\";\nclass ProgressiveQualifier extends FlagQualifier {\n    constructor(mode) {\n        super('progressive', mode);\n    }\n}\n/**\n * @memberOf Qualifiers.Progressive\n */\nfunction none() {\n    return new ProgressiveQualifier('none');\n}\n/**\n * @memberOf Qualifiers.Progressive\n */\nfunction semi() {\n    return new ProgressiveQualifier('semi');\n}\n/**\n * @memberOf Qualifiers.Progressive\n */\nfunction steep() {\n    return new ProgressiveQualifier('steep');\n}\n/**\n * @memberOf Qualifiers.Progressive\n */\nfunction progressive() {\n    return new ProgressiveQualifier();\n}\nconst Progressive = {\n    semi,\n    none,\n    steep,\n    progressive,\n    ProgressiveQualifier\n};\nexport { Progressive, semi, none, steep, progressive, ProgressiveQualifier };\n", "import { lossy, preserveTransparency, progressive } from \"../../qualifiers/flag.js\";\nimport { DeliveryAction } from \"./DeliveryAction.js\";\nimport { ProgressiveQualifier } from \"../../qualifiers/progressive.js\";\n/**\n * @memberOf Actions.Delivery\n * @extends {Actions.Delivery.DeliveryAction}\n * @see Visit {@link Actions.Delivery|Delivery} for an example\n */\nclass DeliveryFormatAction extends DeliveryAction {\n    constructor(deliveryKey, deliveryType) {\n        super(deliveryKey, deliveryType, 'formatType');\n    }\n    /**\n     * @description Uses lossy compression when delivering animated GIF files.\n     * @return {this}\n     */\n    lossy() {\n        this._actionModel.lossy = true;\n        this.addFlag(lossy());\n        return this;\n    }\n    /**\n     * @description Uses progressive compression when delivering JPG file format.\n     * @return {this}\n     */\n    progressive(mode) {\n        if (mode instanceof ProgressiveQualifier) {\n            this._actionModel.progressive = { mode: mode.getFlagValue() };\n            this.addFlag(mode);\n        }\n        else {\n            this._actionModel.progressive = { mode: mode };\n            this.addFlag(progressive(mode));\n        }\n        return this;\n    }\n    /**\n     * @description Ensures that images with a transparency channel are delivered in PNG format.\n     */\n    preserveTransparency() {\n        this._actionModel.preserveTransparency = true;\n        this.addFlag(preserveTransparency());\n        return this;\n    }\n    static fromJson(actionModel) {\n        const { formatType, lossy, progressive, preserveTransparency } = actionModel;\n        let result;\n        if (formatType) {\n            result = new this('f', formatType);\n        }\n        else {\n            result = new this('f');\n        }\n        if (progressive) {\n            if (progressive.mode) {\n                result.progressive(progressive.mode);\n            }\n            else {\n                result.progressive();\n            }\n        }\n        lossy && result.lossy();\n        preserveTransparency && result.preserveTransparency();\n        return result;\n    }\n}\nexport { DeliveryFormatAction };\n", "import { Action } from \"../internal/Action.js\";\nimport { BackgroundColor } from \"../actions/background/actions/BackgroundColor.js\";\nimport { prepareColor } from \"../internal/utils/prepareColor.js\";\nimport { FlagQualifier } from \"../qualifiers/flag/FlagQualifier.js\";\nimport { RawAction } from \"../internal/RawAction.js\";\nimport { isErrorObject } from \"../internal/models/IErrorObject.js\";\nimport { DeliveryFormatAction } from \"../actions/delivery/DeliveryFormatAction.js\";\n/**\n * @summary SDK\n * @description - Defines how to transform an asset\n * @memberOf SDK\n */\nclass Transformation {\n    constructor() {\n        this.actions = [];\n    }\n    /**\n     * @param {SDK.Action | string} action\n     * @return {this}\n     */\n    addAction(action) {\n        let actionToAdd;\n        if (typeof action === 'string') {\n            if (action.indexOf('/') >= 0) {\n                throw 'addAction cannot accept a string with a forward slash in it - /, use .addTransformation() instead';\n            }\n            else {\n                actionToAdd = new RawAction(action);\n            }\n        }\n        else {\n            actionToAdd = action;\n        }\n        this.actions.push(actionToAdd);\n        return this;\n    }\n    /**\n     * @description Allows the injection of a raw transformation as a string into the transformation, or a Transformation instance that was previously created\n     * @param {string | SDK.Transformation} tx\n     * @example\n     * import {Transformation} from \"@cloudinary/url-gen\";\n     *\n     * const transformation = new Transformation();\n     * transformation.addTransformation('w_100/w_200/w_300');\n     * @return {this}\n     */\n    addTransformation(tx) {\n        if (tx instanceof Transformation) {\n            // Concat the new actions into the existing actions\n            this.actions = this.actions.concat(tx.actions);\n        }\n        else {\n            this.actions.push(new RawAction(tx));\n        }\n        return this;\n    }\n    /**\n     * @return {string}\n     */\n    toString() {\n        return this.actions\n            .map((action) => {\n            return action.toString();\n        })\n            .filter((a) => a)\n            .join('/');\n    }\n    /**\n     * @description Delivers an animated GIF.\n     * @param {AnimatedAction} animatedAction\n     * @return {this}\n     */\n    animated(animatedAction) {\n        return this.addAction(animatedAction);\n    }\n    /**\n     * @description Adds a border around the image.\n     * @param {Border} borderAction\n     * @return {this}\n     */\n    border(borderAction) {\n        return this.addAction(borderAction);\n    }\n    /**\n     * @description Adjusts the shape of the delivered image. </br>\n     * <b>Learn more:</b> {@link https://cloudinary.com/documentation/effects_and_artistic_enhancements#distort|Shape changes and distortion effects}\n     * @param {IReshape} reshapeAction\n     * @return {this}\n     */\n    reshape(reshapeAction) {\n        return this.addAction(reshapeAction);\n    }\n    /**\n     * @description Resize the asset using provided resize action\n     * @param {ResizeSimpleAction} resizeAction\n     * @return {this}\n     */\n    resize(resizeAction) {\n        return this.addAction(resizeAction);\n    }\n    /**\n     * @desc An alias to Action Delivery.quality\n     * @param {string|number} quality\n     * @return {this}\n     */\n    quality(quality) {\n        this.addAction(new DeliveryFormatAction('q', quality));\n        return this;\n    }\n    /**\n     * @desc An alias to Action Delivery.format\n     * @param {string} format\n     * @return {this}\n     */\n    format(format) {\n        this.addAction(new DeliveryFormatAction('f', format));\n        return this;\n    }\n    /**\n     * @description Rounds the specified corners of an image.\n     * @param roundCornersAction\n     * @return {this}\n     */\n    roundCorners(roundCornersAction) {\n        return this.addAction(roundCornersAction);\n    }\n    /**\n     * @description Adds an overlay over the base image.\n     * @param {LayerAction} overlayAction\n     * @return {this}\n     */\n    overlay(overlayAction) {\n        return this.addAction(overlayAction);\n    }\n    /**\n     * @description Adds an underlay under the base image.\n     * @param {LayerAction} underlayAction\n     * @return {this}\n     */\n    underlay(underlayAction) {\n        underlayAction.setLayerType('u');\n        return this.addAction(underlayAction);\n    }\n    /**\n     * @description Defines an new user variable.\n     * @param {VariableAction} variableAction\n     * @return {this}\n     */\n    addVariable(variableAction) {\n        return this.addAction(variableAction);\n    }\n    /**\n     * @description Specifies a condition to be met before applying a transformation.\n     * @param {ConditionalAction} conditionAction\n     * @return {this}\n     */\n    conditional(conditionAction) {\n        return this.addAction(conditionAction);\n    }\n    /**\n     * @description Applies a filter or an effect on an asset.\n     * @param {SimpleEffectAction} effectAction\n     * @return {this}\n     */\n    effect(effectAction) {\n        return this.addAction(effectAction);\n    }\n    /**\n     * @description Applies adjustment effect on an asset.\n     * @param action\n     * @return {this}\n     */\n    adjust(action) {\n        return this.addAction(action);\n    }\n    /**\n     * @description Rotates the asset by the given angle.\n     * @param {RotateAction} rotateAction\n     * @return {this}\n     */\n    rotate(rotateAction) {\n        return this.addAction(rotateAction);\n    }\n    /**\n     * @description Applies a pre-defined named transformation of the given name.\n     * @param {NamedTransformation} namedTransformation\n     * @return {this}\n     */\n    namedTransformation(namedTransformation) {\n        return this.addAction(namedTransformation);\n    }\n    /**\n     * @description Applies delivery action.\n     * @param deliveryAction\n     * @return {this}\n     */\n    delivery(deliveryAction) {\n        return this.addAction(deliveryAction);\n    }\n    /**\n     * @description Sets the color of the background.\n     * @param {Qualifiers.Color} color\n     * @return {this}\n     */\n    backgroundColor(color) {\n        return this.addAction(new BackgroundColor(prepareColor(color)));\n    }\n    /**\n     * @description Adds a layer in a Photoshop document.\n     * @param action\n     * @return {this}\n     */\n    psdTools(action) {\n        return this.addAction(action);\n    }\n    /**\n     * @description Extracts an image or a page using an index, a range, or a name from a layered media asset.\n     * @param action\n     * @return {this}\n     */\n    extract(action) {\n        return this.addAction(action);\n    }\n    /**\n     * @description Adds a flag as a separate action.\n     * @param {Qualifiers.Flag | string} flagQualifier\n     * @return {this}\n     */\n    addFlag(flagQualifier) {\n        const action = new Action();\n        let flagToAdd = flagQualifier;\n        if (typeof flagQualifier === 'string') {\n            flagToAdd = new FlagQualifier(flagQualifier);\n        }\n        action.addQualifier(flagToAdd);\n        return this.addAction(action);\n    }\n    /**\n     * @description Inject a custom function into the image transformation pipeline.\n     * @return {this}\n     */\n    customFunction(customFunction) {\n        return this.addAction(customFunction);\n    }\n    /**\n     * Transcodes the video (or audio) to another format.\n     * @param {Action} action\n     * @return {this}\n     */\n    transcode(action) {\n        return this.addAction(action);\n    }\n    /**\n     * Applies the specified video edit action.\n     *\n     * @param {videoEditType} action\n     * @return {this}\n     */\n    videoEdit(action) {\n        return this.addAction(action);\n    }\n    toJson() {\n        const actions = [];\n        for (const action of this.actions) {\n            const json = action.toJson();\n            if (isErrorObject(json)) {\n                // Fail early and return an IErrorObject\n                return json;\n            }\n            actions.push(json);\n        }\n        return { actions };\n    }\n}\nexport { Transformation };\n", "import { Transformation } from \"./Transformation.js\";\n/**\n * @summary SDK\n * @extends {SDK.Transformation}\n * @memberOf SDK\n */\nclass ImageTransformation extends Transformation {\n}\nexport { ImageTransformation };\n", "import { Transformation } from \"./Transformation.js\";\n/**\n * @summary SDK\n * @extends {SDK.Transformation}\n * @memberOf SDK\n */\nclass VideoTransformation extends Transformation {\n}\nexport { VideoTransformation };\n", "export const LEGACY_CONDITIONAL_OPERATORS = {\n    \"=\": 'eq',\n    \"!=\": 'ne',\n    \"<\": 'lt',\n    \">\": 'gt',\n    \"<=\": 'lte',\n    \">=\": 'gte',\n    \"&&\": 'and',\n    \"||\": 'or',\n    \"*\": \"mul\",\n    \"/\": \"div\",\n    \"+\": \"add\",\n    \"-\": \"sub\",\n    \"^\": \"pow\"\n};\nexport const CF_SHARED_CDN = \"d3jpl91pxevbkh.cloudfront.net\";\nexport const OLD_AKAMAI_SHARED_CDN = \"cloudinary-a.akamaihd.net\";\nexport const AKAMAI_SHARED_CDN = \"res.cloudinary.com\";\nexport const SHARED_CDN = AKAMAI_SHARED_CDN;\nexport const LEGACY_PREDEFINED_VARS = {\n    \"aspect_ratio\": \"ar\",\n    \"aspectRatio\": \"ar\",\n    \"current_page\": \"cp\",\n    \"currentPage\": \"cp\",\n    \"duration\": \"du\",\n    \"face_count\": \"fc\",\n    \"faceCount\": \"fc\",\n    \"height\": \"h\",\n    \"initial_aspect_ratio\": \"iar\",\n    \"initial_height\": \"ih\",\n    \"initial_width\": \"iw\",\n    \"initialAspectRatio\": \"iar\",\n    \"initialHeight\": \"ih\",\n    \"initialWidth\": \"iw\",\n    \"initial_duration\": \"idu\",\n    \"initialDuration\": \"idu\",\n    \"page_count\": \"pc\",\n    \"page_x\": \"px\",\n    \"page_y\": \"py\",\n    \"pageCount\": \"pc\",\n    \"pageX\": \"px\",\n    \"pageY\": \"py\",\n    \"tags\": \"tags\",\n    \"width\": \"w\"\n};\nexport const NUMBER_PATTERN = \"([0-9]*)\\\\.([0-9]+)|([0-9]+)\";\nexport const OFFSET_ANY_PATTERN = `(${NUMBER_PATTERN})([%pP])?`;\nexport const RANGE_VALUE_RE = RegExp(`^${OFFSET_ANY_PATTERN}$`);\nexport const OFFSET_ANY_PATTERN_RE = RegExp(`(${OFFSET_ANY_PATTERN})\\\\.\\\\.(${OFFSET_ANY_PATTERN})`);\nexport const LAYER_KEYWORD_PARAMS = {\n    font_weight: \"normal\",\n    font_style: \"normal\",\n    text_decoration: \"none\",\n    text_align: '',\n    stroke: \"none\"\n};\n", "/**\n * Converts string to snake case\n * @param {string} str\n */\nexport const snakeCase = (str) => str.replace(/[A-Z]/g, letter => `_${letter.toLowerCase()}`);\n", "/* eslint-disable */\n// @ts-nocheck\n// This file is a direct copy from lodash.clonedeep\n// Lodash.clonedeep has problems with the module exports, thus a copy was the shortest and cleanest solution\n/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n/** Used as references for constious `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]', arrayTag = '[object Array]', boolTag = '[object Boolean]', dateTag = '[object Date]', errorTag = '[object Error]', funcTag = '[object Function]', genTag = '[object GeneratorFunction]', mapTag = '[object Map]', numberTag = '[object Number]', objectTag = '[object Object]', promiseTag = '[object Promise]', regexpTag = '[object RegExp]', setTag = '[object Set]', stringTag = '[object String]', symbolTag = '[object Symbol]', weakMapTag = '[object WeakMap]';\nvar arrayBufferTag = '[object ArrayBuffer]', dataViewTag = '[object DataView]', float32Tag = '[object Float32Array]', float64Tag = '[object Float64Array]', int8Tag = '[object Int8Array]', int16Tag = '[object Int16Array]', int32Tag = '[object Int32Array]', uint8Tag = '[object Uint8Array]', uint8ClampedTag = '[object Uint8ClampedArray]', uint16Tag = '[object Uint16Array]', uint32Tag = '[object Uint32Array]';\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n/** Used to match `RegExp` flags from their coerced string values. */\nvar reFlags = /\\w*$/;\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n/** Used to identify `toStringTag` values supported by `_.clone`. */\nvar cloneableTags = {};\ncloneableTags[argsTag] = cloneableTags[arrayTag] =\n    cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =\n        cloneableTags[boolTag] = cloneableTags[dateTag] =\n            cloneableTags[float32Tag] = cloneableTags[float64Tag] =\n                cloneableTags[int8Tag] = cloneableTags[int16Tag] =\n                    cloneableTags[int32Tag] = cloneableTags[mapTag] =\n                        cloneableTags[numberTag] = cloneableTags[objectTag] =\n                            cloneableTags[regexpTag] = cloneableTags[setTag] =\n                                cloneableTags[stringTag] = cloneableTags[symbolTag] =\n                                    cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =\n                                        cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;\ncloneableTags[errorTag] = cloneableTags[funcTag] =\n    cloneableTags[weakMapTag] = false;\n/** Detect free constiable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n/** Detect free constiable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n/** Detect free constiable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n/** Detect free constiable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n/**\n * Adds the key-value `pair` to `map`.\n *\n * @private\n * @param {Object} map The map to modify.\n * @param {Array} pair The key-value pair to add.\n * @returns {Object} Returns `map`.\n */\nfunction addMapEntry(map, pair) {\n    // Don't return `map.set` because it's not chainable in IE 11.\n    map.set(pair[0], pair[1]);\n    return map;\n}\n/**\n * Adds `value` to `set`.\n *\n * @private\n * @param {Object} set The set to modify.\n * @param {*} value The value to add.\n * @returns {Object} Returns `set`.\n */\nfunction addSetEntry(set, value) {\n    // Don't return `set.add` because it's not chainable in IE 11.\n    set.add(value);\n    return set;\n}\n/**\n * A specialized version of `_.forEach` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns `array`.\n */\nfunction arrayEach(array, iteratee) {\n    var index = -1, length = array ? array.length : 0;\n    while (++index < length) {\n        if (iteratee(array[index], index, array) === false) {\n            break;\n        }\n    }\n    return array;\n}\n/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n    var index = -1, length = values.length, offset = array.length;\n    while (++index < length) {\n        array[offset + index] = values[index];\n    }\n    return array;\n}\n/**\n * A specialized version of `_.reduce` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {*} [accumulator] The initial value.\n * @param {boolean} [initAccum] Specify using the first element of `array` as\n *  the initial value.\n * @returns {*} Returns the accumulated value.\n */\nfunction arrayReduce(array, iteratee, accumulator, initAccum) {\n    var index = -1, length = array ? array.length : 0;\n    if (initAccum && length) {\n        accumulator = array[++index];\n    }\n    while (++index < length) {\n        accumulator = iteratee(accumulator, array[index], index, array);\n    }\n    return accumulator;\n}\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n    var index = -1, result = Array(n);\n    while (++index < n) {\n        result[index] = iteratee(index);\n    }\n    return result;\n}\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n    return object == null ? undefined : object[key];\n}\n/**\n * Checks if `value` is a host object in IE < 9.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a host object, else `false`.\n */\nfunction isHostObject(value) {\n    // Many host objects are `Object` objects that can coerce to strings\n    // despite having improperly defined `toString` methods.\n    var result = false;\n    if (value != null && typeof value.toString != 'function') {\n        try {\n            result = !!(`${value}`);\n        }\n        catch (e) {\n        }\n    }\n    return result;\n}\n/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n    var index = -1, result = Array(map.size);\n    map.forEach(function (value, key) {\n        result[++index] = [key, value];\n    });\n    return result;\n}\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n    return function (arg) {\n        return func(transform(arg));\n    };\n}\n/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n    var index = -1, result = Array(set.size);\n    set.forEach(function (value) {\n        result[++index] = value;\n    });\n    return result;\n}\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype, funcProto = Function.prototype, objectProto = Object.prototype;\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function () {\n    var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n    return uid ? (`Symbol(src)_1.${uid}`) : '';\n}());\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp(`^${funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n    .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?')}$`);\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined, Symbol = root.Symbol, Uint8Array = root.Uint8Array, getPrototype = overArg(Object.getPrototypeOf, Object), objectCreate = Object.create, propertyIsEnumerable = objectProto.propertyIsEnumerable, splice = arrayProto.splice;\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols, nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined, nativeKeys = overArg(Object.keys, Object);\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView'), Map = getNative(root, 'Map'), Promise = getNative(root, 'Promise'), Set = getNative(root, 'Set'), WeakMap = getNative(root, 'WeakMap'), nativeCreate = getNative(Object, 'create');\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView), mapCtorString = toSource(Map), promiseCtorString = toSource(Promise), setCtorString = toSource(Set), weakMapCtorString = toSource(WeakMap);\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined, symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n    var index = -1, length = entries ? entries.length : 0;\n    this.clear();\n    while (++index < length) {\n        var entry = entries[index];\n        this.set(entry[0], entry[1]);\n    }\n}\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n    this.__data__ = nativeCreate ? nativeCreate(null) : {};\n}\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n    return this.has(key) && delete this.__data__[key];\n}\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n    var data = this.__data__;\n    if (nativeCreate) {\n        var result = data[key];\n        return result === HASH_UNDEFINED ? undefined : result;\n    }\n    return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n    var data = this.__data__;\n    return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);\n}\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n    var data = this.__data__;\n    data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n    return this;\n}\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype.delete = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n    var index = -1, length = entries ? entries.length : 0;\n    this.clear();\n    while (++index < length) {\n        var entry = entries[index];\n        this.set(entry[0], entry[1]);\n    }\n}\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n    this.__data__ = [];\n}\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n    var data = this.__data__, index = assocIndexOf(data, key);\n    if (index < 0) {\n        return false;\n    }\n    var lastIndex = data.length - 1;\n    if (index == lastIndex) {\n        data.pop();\n    }\n    else {\n        splice.call(data, index, 1);\n    }\n    return true;\n}\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n    var data = this.__data__, index = assocIndexOf(data, key);\n    return index < 0 ? undefined : data[index][1];\n}\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n    return assocIndexOf(this.__data__, key) > -1;\n}\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n    var data = this.__data__, index = assocIndexOf(data, key);\n    if (index < 0) {\n        data.push([key, value]);\n    }\n    else {\n        data[index][1] = value;\n    }\n    return this;\n}\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype.delete = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n    var index = -1, length = entries ? entries.length : 0;\n    this.clear();\n    while (++index < length) {\n        var entry = entries[index];\n        this.set(entry[0], entry[1]);\n    }\n}\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n    this.__data__ = {\n        'hash': new Hash,\n        'map': new (Map || ListCache),\n        'string': new Hash\n    };\n}\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n    return getMapData(this, key).delete(key);\n}\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n    return getMapData(this, key).get(key);\n}\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n    return getMapData(this, key).has(key);\n}\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n    getMapData(this, key).set(key, value);\n    return this;\n}\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype.delete = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n    this.__data__ = new ListCache(entries);\n}\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n    this.__data__ = new ListCache;\n}\n/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n    return this.__data__.delete(key);\n}\n/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n    return this.__data__.get(key);\n}\n/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n    return this.__data__.has(key);\n}\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n    var cache = this.__data__;\n    if (cache instanceof ListCache) {\n        var pairs = cache.__data__;\n        if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n            pairs.push([key, value]);\n            return this;\n        }\n        cache = this.__data__ = new MapCache(pairs);\n    }\n    cache.set(key, value);\n    return this;\n}\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype.delete = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n    // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n    // Safari 9 makes `arguments.length` enumerable in strict mode.\n    var result = (isArray(value) || isArguments(value))\n        ? baseTimes(value.length, String)\n        : [];\n    var length = result.length, skipIndexes = !!length;\n    for (var key in value) {\n        if ((inherited || hasOwnProperty.call(value, key)) &&\n            !(skipIndexes && (key == 'length' || isIndex(key, length)))) {\n            result.push(key);\n        }\n    }\n    return result;\n}\n/**\n * Assigns `value` to `key` of `object` if the existing value is not equivalent\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction assignValue(object, key, value) {\n    var objValue = object[key];\n    if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||\n        (value === undefined && !(key in object))) {\n        object[key] = value;\n    }\n}\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n    var length = array.length;\n    while (length--) {\n        if (eq(array[length][0], key)) {\n            return length;\n        }\n    }\n    return -1;\n}\n/**\n * The base implementation of `_.assign` without support for multiple sources\n * or `customizer` functions.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @returns {Object} Returns `object`.\n */\nfunction baseAssign(object, source) {\n    return object && copyObject(source, keys(source), object);\n}\n/**\n * The base implementation of `_.clone` and `_.cloneDeep` which tracks\n * traversed objects.\n *\n * @private\n * @param {*} value The value to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @param {boolean} [isFull] Specify a clone including symbols.\n * @param {Function} [customizer] The function to customize cloning.\n * @param {string} [key] The key of `value`.\n * @param {Object} [object] The parent object of `value`.\n * @param {Object} [stack] Tracks traversed objects and their clone counterparts.\n * @returns {*} Returns the cloned value.\n */\nfunction baseClone(value, isDeep, isFull, customizer, key, object, stack) {\n    var result;\n    if (customizer) {\n        result = object ? customizer(value, key, object, stack) : customizer(value);\n    }\n    if (result !== undefined) {\n        return result;\n    }\n    if (!isObject(value)) {\n        return value;\n    }\n    var isArr = isArray(value);\n    if (isArr) {\n        result = initCloneArray(value);\n        if (!isDeep) {\n            return copyArray(value, result);\n        }\n    }\n    else {\n        var tag = getTag(value), isFunc = tag == funcTag || tag == genTag;\n        if (isBuffer(value)) {\n            return cloneBuffer(value, isDeep);\n        }\n        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {\n            if (isHostObject(value)) {\n                return object ? value : {};\n            }\n            result = initCloneObject(isFunc ? {} : value);\n            if (!isDeep) {\n                return copySymbols(value, baseAssign(result, value));\n            }\n        }\n        else {\n            if (!cloneableTags[tag]) {\n                return object ? value : {};\n            }\n            result = initCloneByTag(value, tag, baseClone, isDeep);\n        }\n    }\n    // Check for circular references and return its corresponding clone.\n    stack || (stack = new Stack);\n    var stacked = stack.get(value);\n    if (stacked) {\n        return stacked;\n    }\n    stack.set(value, result);\n    if (!isArr) {\n        var props = isFull ? getAllKeys(value) : keys(value);\n    }\n    arrayEach(props || value, function (subValue, key) {\n        if (props) {\n            key = subValue;\n            subValue = value[key];\n        }\n        // Recursively populate clone (susceptible to call stack limits).\n        assignValue(result, key, baseClone(subValue, isDeep, isFull, customizer, key, value, stack));\n    });\n    return result;\n}\n/**\n * The base implementation of `_.create` without support for assigning\n * properties to the created object.\n *\n * @private\n * @param {Object} prototype The object to inherit from.\n * @returns {Object} Returns the new object.\n */\nfunction baseCreate(proto) {\n    return isObject(proto) ? objectCreate(proto) : {};\n}\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\n    var result = keysFunc(object);\n    return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n}\n/**\n * The base implementation of `getTag`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n    return objectToString.call(value);\n}\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n    if (!isObject(value) || isMasked(value)) {\n        return false;\n    }\n    var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;\n    return pattern.test(toSource(value));\n}\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n    if (!isPrototype(object)) {\n        return nativeKeys(object);\n    }\n    var result = [];\n    for (var key in Object(object)) {\n        if (hasOwnProperty.call(object, key) && key != 'constructor') {\n            result.push(key);\n        }\n    }\n    return result;\n}\n/**\n * Creates a clone of  `buffer`.\n *\n * @private\n * @param {Buffer} buffer The buffer to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Buffer} Returns the cloned buffer.\n */\nfunction cloneBuffer(buffer, isDeep) {\n    if (isDeep) {\n        return buffer.slice();\n    }\n    var result = new buffer.constructor(buffer.length);\n    buffer.copy(result);\n    return result;\n}\n/**\n * Creates a clone of `arrayBuffer`.\n *\n * @private\n * @param {ArrayBuffer} arrayBuffer The array buffer to clone.\n * @returns {ArrayBuffer} Returns the cloned array buffer.\n */\nfunction cloneArrayBuffer(arrayBuffer) {\n    var result = new arrayBuffer.constructor(arrayBuffer.byteLength);\n    new Uint8Array(result).set(new Uint8Array(arrayBuffer));\n    return result;\n}\n/**\n * Creates a clone of `dataView`.\n *\n * @private\n * @param {Object} dataView The data view to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned data view.\n */\nfunction cloneDataView(dataView, isDeep) {\n    var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;\n    return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);\n}\n/**\n * Creates a clone of `map`.\n *\n * @private\n * @param {Object} map The map to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned map.\n */\nfunction cloneMap(map, isDeep, cloneFunc) {\n    var array = isDeep ? cloneFunc(mapToArray(map), true) : mapToArray(map);\n    return arrayReduce(array, addMapEntry, new map.constructor);\n}\n/**\n * Creates a clone of `regexp`.\n *\n * @private\n * @param {Object} regexp The regexp to clone.\n * @returns {Object} Returns the cloned regexp.\n */\nfunction cloneRegExp(regexp) {\n    var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));\n    result.lastIndex = regexp.lastIndex;\n    return result;\n}\n/**\n * Creates a clone of `set`.\n *\n * @private\n * @param {Object} set The set to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned set.\n */\nfunction cloneSet(set, isDeep, cloneFunc) {\n    var array = isDeep ? cloneFunc(setToArray(set), true) : setToArray(set);\n    return arrayReduce(array, addSetEntry, new set.constructor);\n}\n/**\n * Creates a clone of the `symbol` object.\n *\n * @private\n * @param {Object} symbol The symbol object to clone.\n * @returns {Object} Returns the cloned symbol object.\n */\nfunction cloneSymbol(symbol) {\n    return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};\n}\n/**\n * Creates a clone of `typedArray`.\n *\n * @private\n * @param {Object} typedArray The typed array to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned typed array.\n */\nfunction cloneTypedArray(typedArray, isDeep) {\n    var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;\n    return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);\n}\n/**\n * Copies the values of `source` to `array`.\n *\n * @private\n * @param {Array} source The array to copy values from.\n * @param {Array} [array=[]] The array to copy values to.\n * @returns {Array} Returns `array`.\n */\nfunction copyArray(source, array) {\n    var index = -1, length = source.length;\n    array || (array = Array(length));\n    while (++index < length) {\n        array[index] = source[index];\n    }\n    return array;\n}\n/**\n * Copies properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy properties from.\n * @param {Array} props The property identifiers to copy.\n * @param {Object} [object={}] The object to copy properties to.\n * @param {Function} [customizer] The function to customize copied values.\n * @returns {Object} Returns `object`.\n */\nfunction copyObject(source, props, object, customizer) {\n    object || (object = {});\n    var index = -1, length = props.length;\n    while (++index < length) {\n        var key = props[index];\n        var newValue = customizer\n            ? customizer(object[key], source[key], key, object, source)\n            : undefined;\n        assignValue(object, key, newValue === undefined ? source[key] : newValue);\n    }\n    return object;\n}\n/**\n * Copies own symbol properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy symbols from.\n * @param {Object} [object={}] The object to copy symbols to.\n * @returns {Object} Returns `object`.\n */\nfunction copySymbols(source, object) {\n    return copyObject(source, getSymbols(source), object);\n}\n/**\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeys(object) {\n    return baseGetAllKeys(object, keys, getSymbols);\n}\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n    var data = map.__data__;\n    return isKeyable(key)\n        ? data[typeof key == 'string' ? 'string' : 'hash']\n        : data.map;\n}\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n    var value = getValue(object, key);\n    return baseIsNative(value) ? value : undefined;\n}\n/**\n * Creates an array of the own enumerable symbol properties of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbols = nativeGetSymbols ? overArg(nativeGetSymbols, Object) : stubArray;\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n// Fallback for data views, maps, sets, and weak maps in IE 11,\n// for data views in Edge < 14, and promises in Node.js.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n    getTag = function (value) {\n        var result = objectToString.call(value), Ctor = result == objectTag ? value.constructor : undefined, ctorString = Ctor ? toSource(Ctor) : undefined;\n        if (ctorString) {\n            switch (ctorString) {\n                case dataViewCtorString:\n                    return dataViewTag;\n                case mapCtorString:\n                    return mapTag;\n                case promiseCtorString:\n                    return promiseTag;\n                case setCtorString:\n                    return setTag;\n                case weakMapCtorString:\n                    return weakMapTag;\n            }\n        }\n        return result;\n    };\n}\n/**\n * Initializes an array clone.\n *\n * @private\n * @param {Array} array The array to clone.\n * @returns {Array} Returns the initialized clone.\n */\nfunction initCloneArray(array) {\n    var length = array.length, result = array.constructor(length);\n    // Add properties assigned by `RegExp#exec`.\n    if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {\n        result.index = array.index;\n        result.input = array.input;\n    }\n    return result;\n}\n/**\n * Initializes an object clone.\n *\n * @private\n * @param {Object} object The object to clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneObject(object) {\n    return (typeof object.constructor == 'function' && !isPrototype(object))\n        ? baseCreate(getPrototype(object))\n        : {};\n}\n/**\n * Initializes an object clone based on its `toStringTag`.\n *\n * **Note:** This function only supports cloning values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to clone.\n * @param {string} tag The `toStringTag` of the object to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneByTag(object, tag, cloneFunc, isDeep) {\n    var Ctor = object.constructor;\n    switch (tag) {\n        case arrayBufferTag:\n            return cloneArrayBuffer(object);\n        case boolTag:\n        case dateTag:\n            return new Ctor(+object);\n        case dataViewTag:\n            return cloneDataView(object, isDeep);\n        case float32Tag:\n        case float64Tag:\n        case int8Tag:\n        case int16Tag:\n        case int32Tag:\n        case uint8Tag:\n        case uint8ClampedTag:\n        case uint16Tag:\n        case uint32Tag:\n            return cloneTypedArray(object, isDeep);\n        case mapTag:\n            return cloneMap(object, isDeep, cloneFunc);\n        case numberTag:\n        case stringTag:\n            return new Ctor(object);\n        case regexpTag:\n            return cloneRegExp(object);\n        case setTag:\n            return cloneSet(object, isDeep, cloneFunc);\n        case symbolTag:\n            return cloneSymbol(object);\n    }\n}\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n    length = length == null ? MAX_SAFE_INTEGER : length;\n    return !!length &&\n        (typeof value == 'number' || reIsUint.test(value)) &&\n        (value > -1 && value % 1 == 0 && value < length);\n}\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n    var type = typeof value;\n    return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n        ? (value !== '__proto__')\n        : (value === null);\n}\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n    return !!maskSrcKey && (maskSrcKey in func);\n}\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n    var Ctor = value && value.constructor, proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n    return value === proto;\n}\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to process.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n    if (func != null) {\n        try {\n            return funcToString.call(func);\n        }\n        catch (e) {\n        }\n        try {\n            return (`${func}`);\n        }\n        catch (e) {\n        }\n    }\n    return '';\n}\n/**\n * This method is like `_.clone` except that it recursively clones `value`.\n *\n * @static\n * @memberOf _\n * @since 1.0.0\n * @category Lang\n * @param {*} value The value to recursively clone.\n * @returns {*} Returns the deep cloned value.\n * @see _.clone\n * @example\n *\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\n *\n * var deep = _.cloneDeep(objects);\n * console.log(deep[0] === objects[0]);\n * // => false\n */\nfunction cloneDeep(value) {\n    return baseClone(value, true, true);\n}\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n    return value === other || (value !== value && other !== other);\n}\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nfunction isArguments(value) {\n    // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n    return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&\n        (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);\n}\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n    return value != null && isLength(value.length) && !isFunction(value);\n}\n/**\n * This method is like `_.isArrayLike` except that it also checks if `value`\n * is an object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array-like object,\n *  else `false`.\n * @example\n *\n * _.isArrayLikeObject([1, 2, 3]);\n * // => true\n *\n * _.isArrayLikeObject(document.body.children);\n * // => true\n *\n * _.isArrayLikeObject('abc');\n * // => false\n *\n * _.isArrayLikeObject(_.noop);\n * // => false\n */\nfunction isArrayLikeObject(value) {\n    return isObjectLike(value) && isArrayLike(value);\n}\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n    // The use of `Object#toString` avoids issues with the `typeof` operator\n    // in Safari 8-9 which returns 'object' for typed array and other constructors.\n    var tag = isObject(value) ? objectToString.call(value) : '';\n    return tag == funcTag || tag == genTag;\n}\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n    return typeof value == 'number' &&\n        value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n    var type = typeof value;\n    return !!value && (type == 'object' || type == 'function');\n}\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n    return !!value && typeof value == 'object';\n}\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n    return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */\nfunction stubArray() {\n    return [];\n}\n/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n    return false;\n}\nexport { cloneDeep };\n", "import { cloneDeep } from '../internal/utils/cloneDeep.js';\nimport { isObject } from \"./utils/isObject.js\";\n/**\n * Class for defining account configuration options.\n * Depends on 'utils'\n */\n/**\n * Assign values from sources if they are not defined in the destination.\n * Once a value is set it does not change\n * @function Util.defaults\n * @param {Object} destination - the object to assign defaults to\n * @param sources\n * @param {...Object} source - the source object(s) to assign defaults from\n * @return {Object} destination after it was modified\n */\nconst useDefaultValues = (destination, ...sources) => {\n    return sources.reduce(function (dest, source) {\n        let key, value;\n        for (key in source) {\n            // @ts-ignore\n            value = source[key];\n            // @ts-ignore\n            if (dest[key] === void 0) {\n                // @ts-ignore\n                dest[key] = value;\n            }\n        }\n        return dest;\n    }, destination);\n};\n/**\n * Class for defining account configuration options.\n * @constructor Configuration\n * @param {Object} options - The account configuration parameters to set.\n * @see <a href=\"https://cloudinary.com/documentation/solution_overview#configuration_parameters\"\n *  target=\"_new\">Available configuration options</a>\n */\nclass Configuration {\n    constructor(options) {\n        this.configuration = options == null ? {} : cloneDeep(options);\n        useDefaultValues(this.configuration, DEFAULT_CONFIGURATION_PARAMS);\n    }\n    /**\n     * Initializes the configuration. This method is a convenience method that invokes both\n     *  {@link Configuration#fromEnvironment|fromEnvironment()} (Node.js environment only)\n     *  and {@link Configuration#fromDocument|fromDocument()}.\n     *  It first tries to retrieve the configuration from the environment variable.\n     *  If not available, it tries from the document meta tags.\n     * @function Configuration#init\n     * @return {Configuration} returns `this` for chaining\n     * @see fromDocument\n     * @see fromEnvironment\n     */\n    init() {\n        this.fromEnvironment();\n        this.fromDocument();\n        return this;\n    }\n    /**\n     * Set a new configuration item\n     * @function Configuration#set\n     * @param {string} name - the name of the item to set\n     * @param {*} value - the value to be set\n     * @return {Configuration}\n     *\n     */\n    set(name, value) {\n        // @ts-ignore\n        this.configuration[name] = value;\n        return this;\n    }\n    /**\n     * Get the value of a configuration item\n     * @function Configuration#get\n     * @param {string} name - the name of the item to set\n     * @return {*} the configuration item\n     */\n    get(name) {\n        return this.configuration[name];\n    }\n    merge(config) {\n        Object.assign(this.configuration, cloneDeep(config));\n        return this;\n    }\n    /**\n     * Initialize Cloudinary from HTML meta tags.\n     * @function Configuration#fromDocument\n     * @return {Configuration}\n     * @example <meta name=\"cloudinary_cloud_name\" content=\"mycloud\">\n     *\n     */\n    fromDocument() {\n        var el, i, len, meta_elements;\n        meta_elements = typeof document !== \"undefined\" && document !== null ? document.querySelectorAll('meta[name^=\"cloudinary_\"]') : void 0;\n        if (meta_elements) {\n            for (i = 0, len = meta_elements.length; i < len; i++) {\n                el = meta_elements[i];\n                this.configuration[el.getAttribute('name').replace('cloudinary_', '')] = el.getAttribute('content');\n            }\n        }\n        return this;\n    }\n    /**\n     * Initialize Cloudinary from the `CLOUDINARY_URL` environment variable.\n     *\n     * This function will only run under Node.js environment.\n     * @function Configuration#fromEnvironment\n     * @requires Node.js\n     */\n    fromEnvironment() {\n        var cloudinary_url, query, uri, uriRegex;\n        if (typeof process !== \"undefined\" && process !== null && process.env && process.env.CLOUDINARY_URL) {\n            cloudinary_url = process.env.CLOUDINARY_URL;\n            uriRegex = /cloudinary:\\/\\/(?:(\\w+)(?:\\:([\\w-]+))?@)?([\\w\\.-]+)(?:\\/([^?]*))?(?:\\?(.+))?/;\n            uri = uriRegex.exec(cloudinary_url);\n            if (uri) {\n                if (uri[3] != null) {\n                    this.configuration['cloud_name'] = uri[3];\n                }\n                if (uri[1] != null) {\n                    this.configuration['api_key'] = uri[1];\n                }\n                if (uri[2] != null) {\n                    this.configuration['api_secret'] = uri[2];\n                }\n                if (uri[4] != null) {\n                    this.configuration['private_cdn'] = uri[4] != null;\n                }\n                if (uri[4] != null) {\n                    this.configuration['secure_distribution'] = uri[4];\n                }\n                query = uri[5];\n                if (query != null) {\n                    query.split('&').forEach(value => {\n                        let [k, v] = value.split('=');\n                        if (v == null) {\n                            // @ts-ignore\n                            v = true;\n                        }\n                        this.configuration[k] = v;\n                    });\n                }\n            }\n        }\n        return this;\n    }\n    /**\n     * Create or modify the Cloudinary client configuration\n     *\n     * Warning: `config()` returns the actual internal configuration object. modifying it will change the configuration.\n     *\n     * This is a backward compatibility method. For new code, use get(), merge() etc.\n     * @function Configuration#config\n     * @param {hash|string|boolean} new_config\n     * @param {string} new_value\n     * @returns {*} configuration, or value\n     *\n     * @see {@link fromEnvironment} for initialization using environment variables\n     * @see {@link fromDocument} for initialization using HTML meta tags\n     */\n    config(new_config, new_value) {\n        switch (false) {\n            case new_value === void 0:\n                this.set(new_config, new_value);\n                return this.configuration;\n            case typeof new_config != 'string':\n                return this.get(new_config);\n            case !isObject(new_config):\n                this.merge(new_config);\n                return this.configuration;\n            default:\n                // Backward compatibility - return the internal object\n                return this.configuration;\n        }\n    }\n    /**\n     * Returns a copy of the configuration parameters\n     * @function Configuration#toOptions\n     * @returns {Object} a key:value collection of the configuration parameters\n     */\n    toOptions() {\n        return cloneDeep(this.configuration);\n    }\n}\nconst DEFAULT_CONFIGURATION_PARAMS = {\n    responsive_class: 'cld-responsive',\n    responsive_use_breakpoints: true,\n    round_dpr: true,\n    secure: (typeof window !== \"undefined\" && window !== null ? window.location ? window.location.protocol : void 0 : void 0) === 'https:'\n};\nexport const CONFIG_PARAMS = [\n    \"api_key\",\n    \"api_secret\",\n    \"callback\",\n    \"cdn_subdomain\",\n    \"cloud_name\",\n    \"cname\",\n    \"private_cdn\",\n    \"protocol\",\n    \"resource_type\",\n    \"responsive\",\n    \"responsive_class\",\n    \"responsive_use_breakpoints\",\n    \"responsive_width\",\n    \"round_dpr\",\n    \"secure\",\n    \"secure_cdn_subdomain\",\n    \"secure_distribution\",\n    \"shorten\",\n    \"type\",\n    \"upload_preset\",\n    \"url_suffix\",\n    \"use_root_path\",\n    \"version\",\n    \"externalLibraries\",\n    \"max_timeout_ms\"\n];\nexport default Configuration;\n", "/**\n * Create a copy of the source object with all keys in camelCase\n * @function Util.withCamelCaseKeys\n * @return {Object} a new object\n * @param source\n */\nimport { isEmpty } from \"./isEmpty.js\";\nexport const withCamelCaseKeys = function (source) {\n    return convertKeys(source, camelCase);\n};\n/**\n * Convert string to camelCase\n * @function Util.camelCase\n * @param {string} source - the string to convert\n * @return {string} in camelCase format\n */\nexport const camelCase = function (source) {\n    var words = source.match(reWords);\n    words = words.map(word => word.charAt(0).toLocaleUpperCase() + word.slice(1).toLocaleLowerCase());\n    words[0] = words[0].toLocaleLowerCase();\n    return words.join('');\n};\n/**\n * Creates a new object from source, with the keys transformed using the converter.\n * @param {object} source\n * @param {function|null} converter\n * @returns {object}\n */\nexport var convertKeys = function (source, converter) {\n    var result, value;\n    result = {};\n    for (let key in source) {\n        value = source[key];\n        if (converter) {\n            key = converter(key);\n        }\n        if (!isEmpty(key)) {\n            // @ts-ignore\n            result[key] = value;\n        }\n    }\n    return result;\n};\nexport var reWords = (function () {\n    var lower, upper;\n    upper = '[A-Z]';\n    lower = '[a-z]+';\n    return RegExp(upper + '+(?=' + upper + lower + ')|' + upper + '?' + lower + '|' + upper + '+|[0-9]+', 'g');\n})();\nexport function identity(x) {\n    return x;\n}\nexport function contains(a, obj) {\n    for (let i = 0; i < a.length; i++) {\n        if (a[i] === obj) {\n            return true;\n        }\n    }\n    return false;\n}\nexport function difference(arr1, arr2) {\n    return arr1.filter(x => !arr2.includes(x));\n}\n", "import Condition from './condition.js';\nimport { CONFIG_PARAMS } from './configuration.js';\nimport { cloneDeep } from '../internal/utils/cloneDeep.js';\nimport { camelCase, contains, difference, } from \"./utils/legacyBaseUtil.js\";\nimport { snakeCase } from \"./utils/snakeCase.js\";\nimport Expression from './expression.js';\nimport Layer from './legacyLayer/layer.js';\nimport TextLayer from './legacyLayer/textlayer.js';\nimport SubtitlesLayer from './legacyLayer/subtitleslayer.js';\nimport FetchLayer from './legacyLayer/fetchlayer.js';\nimport { isObject } from \"./utils/isObject.js\";\nimport { isString } from \"../internal/utils/dataStructureUtils.js\";\nimport { isEmpty } from \"./utils/isEmpty.js\";\nimport { isFunction } from \"./utils/isFunction.js\";\nimport { identity, withCamelCaseKeys } from \"./utils/legacyBaseUtil.js\";\n/**\n * A list of keys used by the url() function.\n * @private\n */\nexport const URL_KEYS = [\n    'accessibility',\n    'api_secret',\n    'auth_token',\n    'cdn_subdomain',\n    'cloud_name',\n    'cname',\n    'format',\n    'placeholder',\n    'private_cdn',\n    'resource_type',\n    'secure',\n    'secure_cdn_subdomain',\n    'secure_distribution',\n    'shorten',\n    'sign_url',\n    'signature',\n    'ssl_detected',\n    'type',\n    'url_suffix',\n    'use_root_path',\n    'version'\n];\n/**\n * Assign key, value to target, when value is not null.<br>\n *   This function mutates the target!\n * @param {object} target the object to assign the values to\n * @param {object} sources one or more objects to get values from\n * @returns {object} the target after the assignment\n */\nfunction assignNotNull(target, ...sources) {\n    sources.forEach(source => {\n        Object.keys(source).forEach(key => {\n            // @ts-ignore\n            if (source[key] != null) {\n                // @ts-ignore\n                target[key] = source[key];\n            }\n        });\n    });\n    return target;\n}\n/**\n * Return true if all items in list are strings\n * @function Util.allString\n * @param {Array} list - an array of items\n */\nconst allStrings = function (list) {\n    return list.length && list.every(isString);\n};\n/**\n * Transformation parameters\n * Depends on 'util', 'transformation'\n */\nclass Param {\n    /**\n     * Represents a single parameter.\n     * @class Param\n     * @param {string} name - The name of the parameter in snake_case\n     * @param {string} shortName - The name of the serialized form of the parameter.\n     *                         If a value is not provided, the parameter will not be serialized.\n     * @param {function} [process=Util.identity ] - Manipulate origValue when value is called\n     * @ignore\n     */\n    constructor(name, shortName, process = identity) {\n        /**\n         * The name of the parameter in snake_case\n         * @member {string} Param#name\n         */\n        this.name = name;\n        /**\n         * The name of the serialized form of the parameter\n         * @member {string} Param#shortName\n         */\n        this.shortName = shortName;\n        /**\n         * Manipulate origValue when value is called\n         * @member {function} Param#process\n         */\n        this.process = process;\n    }\n    /**\n     * Set a (unprocessed) value for this parameter\n     * @function Param#set\n     * @param {*} origValue - the value of the parameter\n     * @return {Param} self for chaining\n     */\n    set(origValue) {\n        this.origValue = origValue;\n        return this;\n    }\n    /**\n     * Generate the serialized form of the parameter\n     * @function Param#serialize\n     * @return {string} the serialized form of the parameter\n     */\n    serialize() {\n        var val, valid;\n        val = this.value();\n        valid = Array.isArray(val) || isObject(val) || isString(val) ? !isEmpty(val) : val != null;\n        if ((this.shortName != null) && valid) {\n            return `${this.shortName}_${val}`;\n        }\n        else {\n            return '';\n        }\n    }\n    /**\n     * Return the processed value of the parameter\n     * @function Param#value\n     */\n    value() {\n        return this.process(this.origValue);\n    }\n    static norm_color(value) {\n        return value != null ? value.replace(/^#/, 'rgb:') : void 0;\n    }\n    static build_array(arg) {\n        if (arg == null) {\n            return [];\n        }\n        else if (Array.isArray(arg)) {\n            return arg;\n        }\n        else {\n            return [arg];\n        }\n    }\n    /**\n     * Covert value to video codec string.\n     *\n     * If the parameter is an object,\n     * @param {(string|Object)} param - the video codec as either a String or a Hash\n     * @return {string} the video codec string in the format codec:profile:level\n     * @example\n     * vc_[ :profile : [level]]\n     * or\n     { codec: 'h264', profile: 'basic', level: '3.1' }\n     * @ignore\n     */\n    static process_video_params(param) {\n        var video;\n        switch (param.constructor) {\n            case Object:\n                video = \"\";\n                if ('codec' in param) {\n                    video = param.codec;\n                    if ('profile' in param) {\n                        video += \":\" + param.profile;\n                        if ('level' in param) {\n                            video += \":\" + param.level;\n                        }\n                    }\n                }\n                return video;\n            case String:\n                return param;\n            default:\n                return null;\n        }\n    }\n}\nclass ArrayParam extends Param {\n    /**\n     * A parameter that represents an array.\n     * @param {string} name - The name of the parameter in snake_case.\n     * @param {string} shortName - The name of the serialized form of the parameter\n     *                         If a value is not provided, the parameter will not be serialized.\n     * @param {string} [sep='.'] - The separator to use when joining the array elements together\n     * @param {function} [process=Util.identity ] - Manipulate origValue when value is called\n     * @class ArrayParam\n     * @extends Param\n     * @ignore\n     */\n    constructor(name, shortName, sep = '.', process = undefined) {\n        super(name, shortName, process);\n        this.sep = sep;\n    }\n    serialize() {\n        if (this.shortName != null) {\n            let arrayValue = this.value();\n            if (isEmpty(arrayValue)) {\n                return '';\n            }\n            else if (isString(arrayValue)) {\n                return `${this.shortName}_${arrayValue}`;\n            }\n            else {\n                let flat = arrayValue.map((t) => isFunction(t.serialize) ? t.serialize() : t).join(this.sep);\n                return `${this.shortName}_${flat}`;\n            }\n        }\n        else {\n            return '';\n        }\n    }\n    value() {\n        if (Array.isArray(this.origValue)) {\n            return this.origValue.map(v => this.process(v));\n        }\n        else {\n            return this.process(this.origValue);\n        }\n    }\n    set(origValue) {\n        if ((origValue == null) || Array.isArray(origValue)) {\n            return super.set(origValue);\n        }\n        else {\n            return super.set([origValue]);\n        }\n    }\n}\nclass TransformationParam extends Param {\n    /**\n     * A parameter that represents a transformation\n     * @param {string} name - The name of the parameter in snake_case\n     * @param {string} [shortName='t'] - The name of the serialized form of the parameter\n     * @param {string} [sep='.'] - The separator to use when joining the array elements together\n     * @param {function} [process=Util.identity ] - Manipulate origValue when value is called\n     * @class TransformationParam\n     * @extends Param\n     * @ignore\n     */\n    constructor(name, shortName = \"t\", sep = '.', process = undefined) {\n        super(name, shortName, process);\n        this.sep = sep;\n    }\n    /**\n     * Generate string representations of the transformation.\n     * @returns {*} Returns either the transformation as a string, or an array of string representations.\n     */\n    serialize() {\n        let result = '';\n        const val = this.value();\n        if (isEmpty(val)) {\n            return result;\n        }\n        // val is an array of strings so join them\n        if (allStrings(val)) {\n            const joined = val.join(this.sep); // creates t1.t2.t3 in case multiple named transformations were configured\n            if (!isEmpty(joined)) {\n                // in case options.transformation was not set with an empty string (val != ['']);\n                result = `${this.shortName}_${joined}`;\n            }\n        }\n        else { // Convert val to an array of strings\n            result = val.map((t) => {\n                if (isString(t) && !isEmpty(t)) {\n                    return `${this.shortName}_${t}`;\n                }\n                if (isFunction(t.serialize)) {\n                    return t.serialize();\n                }\n                if (isObject(t) && !isEmpty(t)) {\n                    return new Transformation(t).serialize();\n                }\n                return undefined;\n            }).filter((t) => t);\n        }\n        return result;\n    }\n    set(origValue1) {\n        this.origValue = origValue1;\n        if (Array.isArray(this.origValue)) {\n            return super.set(this.origValue);\n        }\n        else {\n            return super.set([this.origValue]);\n        }\n    }\n}\nconst number_pattern = \"([0-9]*)\\\\.([0-9]+)|([0-9]+)\";\nconst offset_any_pattern = \"(\" + number_pattern + \")([%pP])?\";\nclass RangeParam extends Param {\n    /**\n     * A parameter that represents a range\n     * @param {string} name - The name of the parameter in snake_case\n     * @param {string} shortName - The name of the serialized form of the parameter\n     *                         If a value is not provided, the parameter will not be serialized.\n     * @param {function} [process=norm_range_value ] - Manipulate origValue when value is called\n     * @class RangeParam\n     * @extends Param\n     * @ignore\n     */\n    constructor(name, shortName, process = RangeParam.norm_range_value) {\n        super(name, shortName, process);\n    }\n    static norm_range_value(value) {\n        let offset = String(value).match(new RegExp('^' + offset_any_pattern + '$'));\n        if (offset) {\n            let modifier = offset[5] != null ? 'p' : '';\n            value = (offset[1] || offset[4]) + modifier;\n        }\n        return value;\n    }\n}\nclass RawParam extends Param {\n    constructor(name, shortName, process = identity) {\n        super(name, shortName, process);\n    }\n    serialize() {\n        return this.value();\n    }\n}\nclass LayerParam extends Param {\n    // Parse layer options\n    // @return [string] layer transformation string\n    // @private\n    value() {\n        if (this.origValue == null) {\n            return '';\n        }\n        let result;\n        if (this.origValue instanceof Layer) {\n            result = this.origValue;\n        }\n        else if (isObject(this.origValue)) {\n            let layerOptions = withCamelCaseKeys(this.origValue);\n            // @ts-ignore\n            if (layerOptions.resourceType === \"text\" || (layerOptions.text != null)) {\n                result = new TextLayer(layerOptions);\n            }\n            else { // @ts-ignore\n                if (layerOptions.resourceType === \"subtitles\") {\n                    result = new SubtitlesLayer(layerOptions);\n                }\n                else { // @ts-ignore\n                    if (layerOptions.resourceType === \"fetch\" || (layerOptions.url != null)) {\n                        result = new FetchLayer(layerOptions);\n                    }\n                    else {\n                        result = new Layer(layerOptions);\n                    }\n                }\n            }\n        }\n        else if (isString(this.origValue)) {\n            if (/^fetch:.+/.test(this.origValue)) {\n                result = new FetchLayer(this.origValue.substr(6));\n            }\n            else {\n                result = this.origValue;\n            }\n        }\n        else {\n            result = '';\n        }\n        return result.toString();\n    }\n    static textStyle(layer) {\n        return (new TextLayer(layer)).textStyleIdentifier();\n    }\n}\n/**\n * TransformationBase\n * Depends on 'configuration', 'parameters','util'\n * @internal\n */\nclass TransformationBase {\n    /**\n     * The base class for transformations.\n     * Members of this class are documented as belonging to the {@link Transformation} class for convenience.\n     * @class TransformationBase\n     */\n    constructor(options) {\n        /** @private */\n        /** @private */\n        let parent;\n        let trans;\n        parent = void 0;\n        trans = {};\n        /**\n         * Return an options object that can be used to create an identical Transformation\n         * @function Transformation#toOptions\n         * @return {Object} Returns a plain object representing this transformation\n         */\n        this.toOptions = (withChain) => {\n            let opt = {};\n            if (withChain == null) {\n                withChain = true;\n            }\n            // @ts-ignore\n            Object.keys(trans).forEach(key => opt[key] = trans[key].origValue);\n            assignNotNull(opt, this.otherOptions);\n            if (withChain && !isEmpty(this.chained)) {\n                let list = this.chained.map((tr) => tr.toOptions());\n                list.push(opt);\n                opt = {};\n                assignNotNull(opt, this.otherOptions);\n                // @ts-ignore\n                opt.transformation = list;\n            }\n            return opt;\n        };\n        /**\n         * Set a parent for this object for chaining purposes.\n         *\n         * @function Transformation#setParent\n         * @param {Object} object - the parent to be assigned to\n         * @returns {Transformation} Returns this instance for chaining purposes.\n         */\n        this.setParent = (object) => {\n            parent = object;\n            if (object != null) {\n                // @ts-ignore\n                this.fromOptions(typeof object.toOptions === \"function\" ? object.toOptions() : void 0);\n            }\n            return this;\n        };\n        /**\n         * Returns the parent of this object in the chain\n         * @function Transformation#getParent\n         * @protected\n         * @return {Object} Returns the parent of this object if there is any\n         */\n        this.getParent = () => {\n            return parent;\n        };\n        // Helper methods to create parameter methods\n        // These methods are defined here because they access `trans` which is\n        // a private member of `TransformationBase`\n        /** @protected */\n        this.param = (value, name, abbr, defaultValue, process) => {\n            if (process == null) {\n                if (isFunction(defaultValue)) {\n                    process = defaultValue;\n                }\n                else {\n                    process = identity;\n                }\n            }\n            // @ts-ignore\n            trans[name] = new Param(name, abbr, process).set(value);\n            return this;\n        };\n        /** @protected */\n        this.rawParam = function (value, name, abbr, defaultValue, process) {\n            process = lastArgCallback(arguments);\n            // @ts-ignore\n            trans[name] = new RawParam(name, abbr, process).set(value);\n            return this;\n        };\n        /** @protected */\n        this.rangeParam = function (value, name, abbr, defaultValue, process) {\n            process = lastArgCallback(arguments);\n            // @ts-ignore\n            trans[name] = new RangeParam(name, abbr, process).set(value);\n            return this;\n        };\n        /** @protected */\n        this.arrayParam = function (value, name, abbr, sep = \":\", defaultValue = [], process = undefined) {\n            process = lastArgCallback(arguments);\n            // @ts-ignore\n            trans[name] = new ArrayParam(name, abbr, sep, process).set(value);\n            return this;\n        };\n        /** @protected */\n        this.transformationParam = function (value, name, abbr, sep = \".\", defaultValue = undefined, process = undefined) {\n            process = lastArgCallback(arguments);\n            // @ts-ignore\n            trans[name] = new TransformationParam(name, abbr, sep, process).set(value);\n            return this;\n        };\n        this.layerParam = function (value, name, abbr) {\n            // @ts-ignore\n            trans[name] = new LayerParam(name, abbr).set(value);\n            return this;\n        };\n        // End Helper methods\n        /**\n         * Get the value associated with the given name.\n         * Get the value associated with the given name.\n         * @function Transformation#getValue\n         * @param {string} name - the name of the parameter\n         * @return {*} the processed value associated with the given name\n         * @description Use {@link get}.origValue for the value originally provided for the parameter\n         */\n        this.getValue = function (name) {\n            // @ts-ignore\n            let value = trans[name] && trans[name].value();\n            return value != null ? value : this.otherOptions[name];\n        };\n        /**\n         * Get the parameter object for the given parameter name\n         * @function Transformation#get\n         * @param {string} name the name of the transformation parameter\n         * @returns {Param} the param object for the given name, or undefined\n         */\n        this.get = function (name) {\n            // @ts-ignore\n            return trans[name];\n        };\n        /**\n         * Remove a transformation option from the transformation.\n         * @function Transformation#remove\n         * @param {string} name - the name of the option to remove\n         * @return {*} Returns the option that was removed or null if no option by that name was found. The type of the\n         *              returned value depends on the value.\n         */\n        this.remove = function (name) {\n            var temp;\n            switch (false) {\n                // @ts-ignore\n                case trans[name] == null:\n                    // @ts-ignore\n                    temp = trans[name];\n                    // @ts-ignore\n                    delete trans[name];\n                    return temp.origValue;\n                case this.otherOptions[name] == null:\n                    temp = this.otherOptions[name];\n                    delete this.otherOptions[name];\n                    return temp;\n                default:\n                    return null;\n            }\n        };\n        /**\n         * Return an array of all the keys (option names) in the transformation.\n         * @return {Array<string>} the keys in snakeCase format\n         */\n        this.keys = function () {\n            var key;\n            return ((function () {\n                var results;\n                results = [];\n                for (key in trans) {\n                    if (key != null) {\n                        results.push(key.match(VAR_NAME_RE) ? key : snakeCase(key));\n                    }\n                }\n                return results;\n            })()).sort();\n        };\n        /**\n         * Returns a plain object representation of the transformation. Values are processed.\n         * @function Transformation#toPlainObject\n         * @return {Object} the transformation options as plain object\n         */\n        this.toPlainObject = function () {\n            var hash, key, list;\n            hash = {};\n            for (key in trans) {\n                // @ts-ignore\n                hash[key] = trans[key].value();\n                // @ts-ignore\n                if (isObject(hash[key])) {\n                    // @ts-ignore\n                    hash[key] = cloneDeep(hash[key]);\n                }\n            }\n            if (!isEmpty(this.chained)) {\n                list = this.chained.map((tr) => tr.toPlainObject());\n                list.push(hash);\n                hash = {\n                    transformation: list\n                };\n            }\n            return hash;\n        };\n        /**\n         * Complete the current transformation and chain to a new one.\n         * In the URL, transformations are chained together by slashes.\n         * @function Transformation#chain\n         * @return {Transformation} Returns this transformation for chaining\n         * @example\n         * var tr = cloudinary.Transformation.new();\n         * tr.width(10).crop('fit').chain().angle(15).serialize()\n         * // produces \"c_fit,w_10/a_15\"\n         */\n        this.chain = function () {\n            var names, tr;\n            names = Object.getOwnPropertyNames(trans);\n            if (names.length !== 0) {\n                tr = new this.constructor(this.toOptions(false));\n                this.resetTransformations();\n                this.chained.push(tr);\n            }\n            return this;\n        };\n        this.resetTransformations = function () {\n            trans = {};\n            return this;\n        };\n        this.otherOptions = {};\n        this.chained = [];\n        this.fromOptions(options);\n    }\n    /**\n     * Merge the provided options with own's options\n     * @param {Object} [options={}] key-value list of options\n     * @returns {Transformation} Returns this instance for chaining\n     */\n    fromOptions(options = {}) {\n        if (options instanceof TransformationBase) {\n            this.fromTransformation(options);\n        }\n        else {\n            if (isString(options) || Array.isArray(options)) {\n                options = {\n                    transformation: options\n                };\n            }\n            options = cloneDeep(options);\n            // Handling of \"if\" statements precedes other options as it creates a chained transformation\n            // @ts-ignore\n            if (options[\"if\"]) {\n                // @ts-ignore\n                this.set(\"if\", options[\"if\"]);\n                // @ts-ignore\n                delete options[\"if\"];\n            }\n            for (let key in options) {\n                // @ts-ignore\n                let opt = options[key];\n                if (opt != null) {\n                    if (key.match(VAR_NAME_RE)) {\n                        if (key !== '$attr') {\n                            this.set('variable', key, opt);\n                        }\n                    }\n                    else {\n                        this.set(key, opt);\n                    }\n                }\n            }\n        }\n        return this;\n    }\n    fromTransformation(other) {\n        if (other instanceof TransformationBase) {\n            other.keys().forEach(key => this.set(key, other.get(key).origValue));\n        }\n        return this;\n    }\n    /**\n     * Set a parameter.\n     * The parameter name `key` is converted to\n     * @param {string} key - the name of the parameter\n     * @param {*} values - the value of the parameter\n     * @returns {Transformation} Returns this instance for chaining\n     */\n    set(key, ...values) {\n        let camelKey;\n        camelKey = camelCase(key);\n        if (contains(methods, camelKey)) {\n            // @ts-ignore\n            this[camelKey].apply(this, values);\n        }\n        else {\n            this.otherOptions[key] = values[0];\n        }\n        return this;\n    }\n    hasLayer() {\n        return this.getValue(\"overlay\") || this.getValue(\"underlay\");\n    }\n    /**\n     * Generate a string representation of the transformation.\n     * @function Transformation#serialize\n     * @return {string} Returns the transformation as a string\n     */\n    serialize() {\n        var ifParam, j, len, paramList, ref, ref1, ref2, ref3, ref4, resultArray, t, transformationList, transformationString, transformations, value, variables, vars;\n        resultArray = this.chained.map((tr) => tr.serialize());\n        paramList = this.keys();\n        transformations = (ref = this.get(\"transformation\")) != null ? ref.serialize() : void 0;\n        ifParam = (ref1 = this.get(\"if\")) != null ? ref1.serialize() : void 0;\n        variables = processVar((ref2 = this.get(\"variables\")) != null ? ref2.value() : void 0);\n        paramList = difference(paramList, [\"transformation\", \"if\", \"variables\"]);\n        vars = [];\n        transformationList = [];\n        for (j = 0, len = paramList.length; j < len; j++) {\n            t = paramList[j];\n            if (t.match(VAR_NAME_RE)) {\n                vars.push(t + \"_\" + Expression.normalize((ref3 = this.get(t)) != null ? ref3.value() : void 0));\n            }\n            else {\n                transformationList.push((ref4 = this.get(t)) != null ? ref4.serialize() : void 0);\n            }\n        }\n        switch (false) {\n            case !isString(transformations):\n                transformationList.push(transformations);\n                break;\n            case !Array.isArray(transformations):\n                resultArray = resultArray.concat(transformations);\n        }\n        transformationList = (function () {\n            var k, len1, results;\n            results = [];\n            for (k = 0, len1 = transformationList.length; k < len1; k++) {\n                value = transformationList[k];\n                if (Array.isArray(value) && !isEmpty(value) || !Array.isArray(value) && value) {\n                    results.push(value);\n                }\n            }\n            return results;\n        })();\n        transformationList = vars.sort().concat(variables).concat(transformationList.sort());\n        if (ifParam === \"if_end\") {\n            transformationList.push(ifParam);\n        }\n        else if (!isEmpty(ifParam)) {\n            transformationList.unshift(ifParam);\n        }\n        transformationString = (transformationList).filter(x => !!x).join(param_separator);\n        if (!isEmpty(transformationString)) {\n            resultArray.push(transformationString);\n        }\n        return (resultArray).filter((x) => !!x).join(trans_separator);\n    }\n    /**\n     * Provide a list of all the valid transformation option names\n     * @function Transformation#listNames\n     * @private\n     * @return {Array<string>} a array of all the valid option names\n     */\n    static listNames() {\n        return methods;\n    }\n    /**\n     * Returns the attributes for an HTML tag.\n     * @function Cloudinary.toHtmlAttributes\n     * @return PlainObject\n     */\n    toHtmlAttributes() {\n        let attrName, height, options, ref2, ref3, value, width;\n        options = {};\n        let snakeCaseKey;\n        Object.keys(this.otherOptions).forEach(key => {\n            value = this.otherOptions[key];\n            snakeCaseKey = snakeCase(key);\n            if (!contains(PARAM_NAMES, snakeCaseKey) && !contains(URL_KEYS, snakeCaseKey)) {\n                attrName = /^html_/.test(key) ? key.slice(5) : key;\n                options[attrName] = value;\n            }\n        });\n        // convert all \"html_key\" to \"key\" with the same value\n        this.keys().forEach(key => {\n            if (/^html_/.test(key)) {\n                options[camelCase(key.slice(5))] = this.getValue(key);\n            }\n        });\n        if (!(this.hasLayer() || this.getValue(\"angle\") || contains([\"fit\", \"limit\", \"lfill\"], this.getValue(\"crop\")))) {\n            width = (ref2 = this.get(\"width\")) != null ? ref2.origValue : void 0;\n            height = (ref3 = this.get(\"height\")) != null ? ref3.origValue : void 0;\n            if (parseFloat(width) >= 1.0) {\n                if (options.width == null) {\n                    options.width = width;\n                }\n            }\n            if (parseFloat(height) >= 1.0) {\n                if (options.height == null) {\n                    options.height = height;\n                }\n            }\n        }\n        return options;\n    }\n    static isValidParamName(name) {\n        return methods.indexOf(camelCase(name)) >= 0;\n    }\n    /**\n     * Delegate to the parent (up the call chain) to produce HTML\n     * @function Transformation#toHtml\n     * @return {string} HTML representation of the parent if possible.\n     * @example\n     * tag = cloudinary.ImageTag.new(\"sample\", {cloud_name: \"demo\"})\n     * // ImageTag {name: \"img\", publicId: \"sample\"}\n     * tag.toHtml()\n     * // <img src=\"sample\">\n     * tag.transformation().crop(\"fit\").width(300).toHtml()\n     * // <img src=\"c_fit,w_300\">\n     */\n    toHtml() {\n        var ref;\n        return (ref = this.getParent()) != null ? typeof ref.toHtml === \"function\" ? ref.toHtml() : void 0 : void 0;\n    }\n    toString() {\n        return this.serialize();\n    }\n    clone() {\n        return new TransformationBase(this.toOptions(true));\n    }\n}\nconst VAR_NAME_RE = /^\\$[a-zA-Z0-9]+$/;\nconst trans_separator = '/';\nconst param_separator = ',';\nfunction lastArgCallback(args) {\n    var callback;\n    callback = args != null ? args[args.length - 1] : void 0;\n    if (isFunction(callback)) {\n        return callback;\n    }\n    else {\n        return void 0;\n    }\n}\nfunction processVar(varArray) {\n    var j, len, name, results, v;\n    if (Array.isArray(varArray)) {\n        results = [];\n        for (j = 0, len = varArray.length; j < len; j++) {\n            [name, v] = varArray[j];\n            results.push(`${name}_${Expression.normalize(v)}`);\n        }\n        return results;\n    }\n    else {\n        return varArray;\n    }\n}\n// @ts-ignore\nfunction processCustomFunction({ function_type, source }) {\n    if (function_type === 'remote') {\n        return [function_type, btoa(source)].join(\":\");\n    }\n    else if (function_type === 'wasm') {\n        return [function_type, source].join(\":\");\n    }\n}\n/**\n * Transformation Class methods.\n * This is a list of the parameters defined in Transformation.\n * Values are camelCased.\n * @const Transformation.methods\n * @private\n * @ignore\n * @type {Array<string>}\n */\n/**\n * Parameters that are filtered out before passing the options to an HTML tag.\n *\n * The list of parameters is a combination of `Transformation::methods` and `Configuration::CONFIG_PARAMS`\n * @const {Array<string>} Transformation.PARAM_NAMES\n * @private\n * @ignore\n * @see toHtmlAttributes\n */\nclass Transformation extends TransformationBase {\n    /**\n     * Represents a single transformation.\n     * @class Transformation\n     * @example\n     * t = new cloudinary.Transformation();\n     * t.angle(20).crop(\"scale\").width(\"auto\");\n     *\n     * // or\n     *\n     * t = new cloudinary.Transformation( {angle: 20, crop: \"scale\", width: \"auto\"});\n     * @see <a href=\"https://cloudinary.com/documentation/image_transformation_reference\"\n     *  target=\"_blank\">Available image transformations</a>\n     * @see <a href=\"https://cloudinary.com/documentation/video_transformation_reference\"\n     *  target=\"_blank\">Available video transformations</a>\n     */\n    constructor(options) {\n        super(options);\n    }\n    /**\n     * Convenience constructor\n     * @param {Object} options\n     * @return {Transformation}\n     * @example cl = cloudinary.Transformation.new( {angle: 20, crop: \"scale\", width: \"auto\"})\n     */\n    static new(options) {\n        return new Transformation(options);\n    }\n    /*\n      Transformation Parameters\n    */\n    angle(value) {\n        this.arrayParam(value, \"angle\", \"a\", \".\", Expression.normalize);\n        return this;\n    }\n    audioCodec(value) {\n        this.param(value, \"audio_codec\", \"ac\");\n        return this;\n    }\n    audioFrequency(value) {\n        this.param(value, \"audio_frequency\", \"af\");\n        return this;\n    }\n    aspectRatio(value) {\n        this.param(value, \"aspect_ratio\", \"ar\", Expression.normalize);\n        return this;\n    }\n    background(value) {\n        this.param(value, \"background\", \"b\", Param.norm_color);\n        return this;\n    }\n    bitRate(value) {\n        this.param(value, \"bit_rate\", \"br\");\n        return this;\n    }\n    border(value) {\n        return this.param(value, \"border\", \"bo\", (border) => {\n            if (isObject(border)) {\n                border = Object.assign({}, {\n                    color: \"black\",\n                    width: 2\n                }, border);\n                return `${border.width}px_solid_${Param.norm_color(border.color)}`;\n            }\n            else {\n                return border;\n            }\n        });\n    }\n    color(value) {\n        this.param(value, \"color\", \"co\", Param.norm_color);\n        return this;\n    }\n    colorSpace(value) {\n        this.param(value, \"color_space\", \"cs\");\n        return this;\n    }\n    crop(value) {\n        this.param(value, \"crop\", \"c\");\n        return this;\n    }\n    customFunction(value) {\n        return this.param(value, \"custom_function\", \"fn\", () => {\n            return processCustomFunction(value);\n        });\n    }\n    customPreFunction(value) {\n        if (this.get('custom_function')) {\n            return;\n        }\n        return this.rawParam(value, \"custom_function\", \"\", () => {\n            value = processCustomFunction(value);\n            return value ? `fn_pre:${value}` : value;\n        });\n    }\n    defaultImage(value) {\n        this.param(value, \"default_image\", \"d\");\n        return this;\n    }\n    delay(value) {\n        this.param(value, \"delay\", \"dl\");\n        return this;\n    }\n    density(value) {\n        this.param(value, \"density\", \"dn\");\n        return this;\n    }\n    duration(value) {\n        this.rangeParam(value, \"duration\", \"du\");\n        return this;\n    }\n    dpr(value) {\n        return this.param(value, \"dpr\", \"dpr\", (dpr) => {\n            dpr = dpr.toString();\n            if (dpr != null ? dpr.match(/^\\d+$/) : void 0) {\n                return dpr + \".0\";\n            }\n            else {\n                return Expression.normalize(dpr);\n            }\n        });\n    }\n    effect(value) {\n        this.arrayParam(value, \"effect\", \"e\", \":\", Expression.normalize);\n        return this;\n    }\n    else() {\n        return this.if('else');\n    }\n    endIf() {\n        return this.if('end');\n    }\n    endOffset(value) {\n        this.rangeParam(value, \"end_offset\", \"eo\");\n        return this;\n    }\n    fallbackContent(value) {\n        this.param(value, \"fallback_content\");\n        return this;\n    }\n    fetchFormat(value) {\n        this.param(value, \"fetch_format\", \"f\");\n        return this;\n    }\n    format(value) {\n        this.param(value, \"format\");\n        return this;\n    }\n    flags(value) {\n        this.arrayParam(value, \"flags\", \"fl\", \".\");\n        return this;\n    }\n    gravity(value) {\n        this.param(value, \"gravity\", \"g\");\n        return this;\n    }\n    fps(value) {\n        return this.param(value, \"fps\", \"fps\", (fps) => {\n            if (isString(fps)) {\n                return fps;\n            }\n            else if (Array.isArray(fps)) {\n                return fps.join(\"-\");\n            }\n            else {\n                return fps;\n            }\n        });\n    }\n    height(value) {\n        return this.param(value, \"height\", \"h\", () => {\n            if (this.getValue(\"crop\") || this.getValue(\"overlay\") || this.getValue(\"underlay\")) {\n                return Expression.normalize(value);\n            }\n            else {\n                return null;\n            }\n        });\n    }\n    htmlHeight(value) {\n        this.param(value, \"html_height\");\n        return this;\n    }\n    htmlWidth(value) {\n        this.param(value, \"html_width\");\n        return this;\n    }\n    if(value = \"\") {\n        var i, ifVal, j, ref, trIf, trRest;\n        switch (value) {\n            case \"else\":\n                this.chain();\n                return this.param(value, \"if\", \"if\");\n            case \"end\":\n                this.chain();\n                for (i = j = ref = this.chained.length - 1; j >= 0; i = j += -1) {\n                    ifVal = this.chained[i].getValue(\"if\");\n                    if (ifVal === \"end\") {\n                        break;\n                    }\n                    else if (ifVal != null) {\n                        trIf = Transformation.new().if(ifVal);\n                        this.chained[i].remove(\"if\");\n                        trRest = this.chained[i];\n                        this.chained[i] = Transformation.new().transformation([trIf, trRest]);\n                        if (ifVal !== \"else\") {\n                            break;\n                        }\n                    }\n                }\n                return this.param(value, \"if\", \"if\");\n            case \"\":\n                return Condition.new().setParent(this);\n            default:\n                return this.param(value, \"if\", \"if\", (value) => {\n                    return Condition.new(value).toString();\n                });\n        }\n    }\n    keyframeInterval(value) {\n        this.param(value, \"keyframe_interval\", \"ki\");\n        return this;\n    }\n    ocr(value) {\n        this.param(value, \"ocr\", \"ocr\");\n        return this;\n    }\n    offset(value) {\n        var end_o, start_o;\n        [start_o, end_o] = (isFunction(value != null ? value.split : void 0)) ? value.split('..') : Array.isArray(value) ? value : [null, null];\n        if (start_o != null) {\n            this.startOffset(start_o);\n        }\n        if (end_o != null) {\n            return this.endOffset(end_o);\n        }\n    }\n    opacity(value) {\n        this.param(value, \"opacity\", \"o\", Expression.normalize);\n        return this;\n    }\n    overlay(value) {\n        this.layerParam(value, \"overlay\", \"l\");\n        return this;\n    }\n    page(value) {\n        this.param(value, \"page\", \"pg\");\n        return this;\n    }\n    poster(value) {\n        this.param(value, \"poster\");\n        return this;\n    }\n    prefix(value) {\n        this.param(value, \"prefix\", \"p\");\n        return this;\n    }\n    quality(value) {\n        this.param(value, \"quality\", \"q\", Expression.normalize);\n        return this;\n    }\n    radius(value) {\n        this.arrayParam(value, \"radius\", \"r\", \":\", Expression.normalize);\n        return this;\n    }\n    rawTransformation(value) {\n        this.rawParam(value, \"raw_transformation\");\n        return this;\n    }\n    size(value) {\n        let height, width;\n        if (isFunction(value != null ? value.split : void 0)) {\n            [width, height] = value.split('x');\n            this.width(width);\n            return this.height(height);\n        }\n    }\n    sourceTypes(value) {\n        this.param(value, \"source_types\");\n        return this;\n    }\n    sourceTransformation(value) {\n        return this.param(value, \"source_transformation\");\n    }\n    startOffset(value) {\n        this.rangeParam(value, \"start_offset\", \"so\");\n        return this;\n    }\n    streamingProfile(value) {\n        this.param(value, \"streaming_profile\", \"sp\");\n        return this;\n    }\n    transformation(value) {\n        this.transformationParam(value, \"transformation\", \"t\");\n        return this;\n    }\n    underlay(value) {\n        this.layerParam(value, \"underlay\", \"u\");\n        return this;\n    }\n    variable(name, value) {\n        this.param(value, name, name);\n        return this;\n    }\n    variables(values) {\n        this.arrayParam(values, \"variables\");\n        return this;\n    }\n    videoCodec(value) {\n        this.param(value, \"video_codec\", \"vc\", Param.process_video_params);\n        return this;\n    }\n    videoSampling(value) {\n        this.param(value, \"video_sampling\", \"vs\");\n        return this;\n    }\n    width(value) {\n        this.param(value, \"width\", \"w\", () => {\n            if (this.getValue(\"crop\") || this.getValue(\"overlay\") || this.getValue(\"underlay\")) {\n                return Expression.normalize(value);\n            }\n            else {\n                return null;\n            }\n        });\n        return this;\n    }\n    x(value) {\n        this.param(value, \"x\", \"x\", Expression.normalize);\n        return this;\n    }\n    y(value) {\n        this.param(value, \"y\", \"y\", Expression.normalize);\n        return this;\n    }\n    zoom(value) {\n        this.param(value, \"zoom\", \"z\", Expression.normalize);\n        return this;\n    }\n}\n/**\n * Transformation Class methods.\n * This is a list of the parameters defined in Transformation.\n * Values are camelCased.\n */\nconst methods = [\n    \"angle\",\n    \"audioCodec\",\n    \"audioFrequency\",\n    \"aspectRatio\",\n    \"background\",\n    \"bitRate\",\n    \"border\",\n    \"color\",\n    \"colorSpace\",\n    \"crop\",\n    \"customFunction\",\n    \"customPreFunction\",\n    \"defaultImage\",\n    \"delay\",\n    \"density\",\n    \"duration\",\n    \"dpr\",\n    \"effect\",\n    \"else\",\n    \"endIf\",\n    \"endOffset\",\n    \"fallbackContent\",\n    \"fetchFormat\",\n    \"format\",\n    \"flags\",\n    \"gravity\",\n    \"fps\",\n    \"height\",\n    \"htmlHeight\",\n    \"htmlWidth\",\n    \"if\",\n    \"keyframeInterval\",\n    \"ocr\",\n    \"offset\",\n    \"opacity\",\n    \"overlay\",\n    \"page\",\n    \"poster\",\n    \"prefix\",\n    \"quality\",\n    \"radius\",\n    \"rawTransformation\",\n    \"size\",\n    \"sourceTypes\",\n    \"sourceTransformation\",\n    \"startOffset\",\n    \"streamingProfile\",\n    \"transformation\",\n    \"underlay\",\n    \"variable\",\n    \"variables\",\n    \"videoCodec\",\n    \"videoSampling\",\n    \"width\",\n    \"x\",\n    \"y\",\n    \"zoom\"\n];\n/**\n * Parameters that are filtered out before passing the options to an HTML tag.\n *\n * The list of parameters is a combination of `Transformation::methods` and `Configuration::CONFIG_PARAMS`\n */\nconst PARAM_NAMES = methods.map(snakeCase).concat(CONFIG_PARAMS);\nexport default Transformation;\n", "import { QualifierValue } from \"../internal/qualifier/QualifierValue.js\";\n/**\n * @summary qualifier\n * @namespace AutoFocus\n * @memberOf Qualifiers\n * @see Visit {@link Qualifiers.Gravity|Gravity} for an example\n */\n/**\n * @memberOf Qualifiers.AutoFocus\n * @extends {SDK.QualifierValue}\n * @see Visit {@link Qualifiers.Gravity|Gravity} for an example\n */\nclass AutoFocus extends QualifierValue {\n    constructor(focusOn, weight) {\n        super();\n        this._weight = weight;\n        this.focusOn = focusOn;\n        this.shouldAvoid = false;\n    }\n    /**\n     * @summary qualifier\n     * @description Specifies the object to focus on automatically\n     * Accepts an AutoFocusObject (which is just a wrapper for a FocusOn object, but with extra method: avoid, weight)\n     * @param {Qualifiers.FocusOn} obj The object to focus on.\n     * @param {number} weight\n     */\n    static focusOn(obj, weight) {\n        return new AutoFocus(obj, weight);\n    }\n    shouldAddWeight() {\n        return typeof this._weight === 'number' || typeof this._weight === 'string' || this.shouldAvoid;\n    }\n    /**\n     * @summary qualifier\n     * @desc Get the name of the of the object\n     */\n    getName() {\n        return this.focusOn.name;\n    }\n    /**\n     * @summary qualifier\n     * @desc Get the weight for the object\n     */\n    getWeight() {\n        if (this.shouldAvoid) {\n            return 'avoid';\n        }\n        else {\n            return this._weight;\n        }\n    }\n    /**\n     * @summary qualifier\n     * @desc Return the string representation of this QualifierValue\n     */\n    toString() {\n        // Future proofing, in case we'd like to support some custom string in the future, or if data is coming from a DB\n        if (this.shouldAddWeight()) {\n            return `${this.getName()}_${this.getWeight()}`;\n        }\n        else {\n            return `${this.getName()}`;\n        }\n    }\n    /**\n     * @summary qualifier\n     * @description Sets the importance level of the object within the automatic gravity algorithm\n     * @param {numebr} w The focus weight for the object\n     * @return {this}\n     */\n    weight(w) {\n        this._weight = w;\n        return this;\n    }\n    /**\n     * @summary qualifier\n     * @description Attempts to avoid the detected object in the image\n     * @return {this}\n     */\n    avoid() {\n        this.shouldAvoid = true;\n        return this;\n    }\n}\nconst focusOn = AutoFocus.focusOn;\nexport { AutoFocus, focusOn };\n", "import { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\n/**\n * @description A VideoCodec class, this class has no methods, and just sets the codec type (vp9, vp8, etc.)\n * @memberOf Qualifiers.VideoCodec\n */\nclass VideoCodecType extends Qualifier {\n    constructor(type) {\n        super('vc');\n        this._type = type;\n        this.addValue(type);\n    }\n    getType() {\n        return this._type;\n    }\n}\n/**\n * @description An Advanced VideoCodec class with Profile and Level methods\n * @memberOf Qualifiers.VideoCodec\n */\nclass AdvVideoCodecType extends Qualifier {\n    constructor(type) {\n        super('vc');\n        this._type = type;\n    }\n    getType() {\n        return this._type;\n    }\n    /**\n     * @description Specifies the profile to use with the h264 codec.\n     * @param {Qualifiers.VideoCodecProfile | string} profile Sets the profile of the video codec\n     * @example new AdvVideoCodecType('h264').profile(VideoCodecProfile.baseline())\n     * @return this;\n     */\n    profile(profile) {\n        this._prof = profile;\n        return this;\n    }\n    getProfile() {\n        return this._prof;\n    }\n    /**\n     * @description Specifies the level to use with the h264 codec and specified profile.\n     * @param {Qualifiers.VideoCodecLevel | number | string} lvl\n     * @example new AdvVideoCodecType('h264').profile(VideoCodecLevel.baseline())\n     * @return this;\n     */\n    level(lvl) {\n        this._lvl = lvl;\n        return this;\n    }\n    getLevel() {\n        return this._lvl;\n    }\n    /**\n     * @description returns a toString representation of this qualifier\n     * @return string;\n     */\n    toString() {\n        return `vc_${this._type}:${this._prof}:${this._lvl}`;\n    }\n}\nexport { VideoCodecType, AdvVideoCodecType };\n", "import { AdvVideoCodecType, VideoCodecType } from \"./videoCodecType/VideoCodecType.js\";\n/**\n * @description Determines the video codec to use.\n * @memberOf Qualifiers\n * @namespace VideoCodec\n * @see Visit {@link Actions.Transcode|Transcode} for an example\n */\n/**\n * @summary qualifier\n * @description Auto video codec.\n * @memberOf Qualifiers.VideoCodec\n * @returns {Qualifiers.VideoCodec.VideoCodecType}\n */\nfunction auto() {\n    return new VideoCodecType('auto');\n}\n/**\n * @summary qualifier\n * @description Video codec h264.\n * @memberOf Qualifiers.VideoCodec\n * @returns {Qualifiers.VideoCodec.AdvVideoCodecType}\n */\nfunction h264() {\n    return new AdvVideoCodecType('h264');\n}\n/**\n * @summary qualifier\n * @description h265 video codec.\n * @memberOf Qualifiers.VideoCodec\n * @returns {Qualifiers.VideoCodec.VideoCodecType}\n */\nfunction h265() {\n    return new VideoCodecType('h265');\n}\n/**\n * @summary qualifier\n * @description Video codec proRes (Apple ProRes 422 HQ).\n * @memberOf Qualifiers.VideoCodec\n * @returns {Qualifiers.VideoCodec.VideoCodecType}\n */\nfunction proRes() {\n    return new VideoCodecType('prores');\n}\n/**\n * @summary qualifier\n * @description Video codec theora.\n * @memberOf Qualifiers.VideoCodec\n * @returns {Qualifiers.VideoCodec.VideoCodecType}\n */\nfunction theora() {\n    return new VideoCodecType('theora');\n}\n/**\n * @summary qualifier\n * @description Video codec vp8.\n * @memberOf Qualifiers.VideoCodec\n * @returns {Qualifiers.VideoCodec.VideoCodecType}\n */\nfunction vp8() {\n    return new VideoCodecType('vp8');\n}\n/**\n * @summary qualifier\n * @description Video codec vp9.\n * @memberOf Qualifiers.VideoCodec\n * @returns {Qualifiers.VideoCodec.VideoCodecType}\n */\nfunction vp9() {\n    return new VideoCodecType('vp9');\n}\nexport const VIDEO_CODEC_TO_TRANSFORMATION = {\n    'auto': auto(),\n    'h264': h264(),\n    'h265': h265(),\n    'prores': proRes(),\n    'theora': theora(),\n    'vp8': vp8(),\n    'vp9': vp9()\n};\nconst VideoCodec = { auto, h264, h265, proRes, theora, vp8, vp9 };\nexport { VideoCodec, auto, h264, h265, proRes, theora, vp8, vp9 };\n", "/**\n *\n * @param publicID\n */\nexport function isUrl(publicID) {\n    return publicID.match(/^https?:\\//);\n}\n", "/**\n *\n * @param publicID\n */\nexport function isFileName(publicID) {\n    return publicID.indexOf('/') < 0;\n}\n", "/**\n *\n * @param publicID\n */\nexport function publicIDContainsVersion(publicID) {\n    return publicID.match(/^v[0-9]+/);\n}\n", "import { isUrl } from \"./urlUtils/isUrl.js\";\nimport { isFileName } from \"./urlUtils/isFileName.js\";\nimport { publicIDContainsVersion } from \"./urlUtils/publicIDContainsVersion.js\";\n/**\n * Create the URL prefix for Cloudinary resources.\n * Available use cases\n * http://res.cloudinary.com/{cloudName}\n * https://res.cloudinary.com/{cloudName}\n * https://{cloudName}-res.cloudinary.com/\n * http://{domain}/${cloudName}\n * https://{domain}/${cloudName}\n * https://{domain}\n * @private\n *\n * @param {string} cloudName\n * @param {IURLConfig} urlConfig\n */\nfunction getUrlPrefix(cloudName, urlConfig) {\n    const secure = urlConfig.secure;\n    const privateCDN = urlConfig.privateCdn;\n    const cname = urlConfig.cname;\n    const secureDistribution = urlConfig.secureDistribution;\n    if (!secure && !cname) {\n        return `http://res.cloudinary.com/${cloudName}`;\n    }\n    if (secure && !secureDistribution && privateCDN) {\n        return `https://${cloudName}-res.cloudinary.com`;\n    }\n    if (secure && !secureDistribution) {\n        return `https://res.cloudinary.com/${cloudName}`;\n    }\n    if (secure && secureDistribution && privateCDN) {\n        return `https://${secureDistribution}`;\n    }\n    if (secure && secureDistribution) {\n        return `https://${secureDistribution}/${cloudName}`;\n    }\n    if (!secure && cname) {\n        return `http://${cname}/${cloudName}`;\n    }\n    else {\n        return 'ERROR';\n    }\n}\n/**\n * @private\n * @param assetType\n */\nfunction handleAssetType(assetType) {\n    //default to image\n    if (!assetType) {\n        return 'image';\n    }\n    return assetType;\n}\n/**\n * @private\n * @param deliveryType\n */\nfunction handleDeliveryType(deliveryType) {\n    //default to upload\n    if (!deliveryType) {\n        return 'upload';\n    }\n    return deliveryType;\n}\n/**\n *\n * @param {string} publicID\n * @param {number} version\n * @param {boolean} forceVersion\n */\nfunction getUrlVersion(publicID, version, forceVersion) {\n    const shouldForceVersion = forceVersion !== false;\n    if (version) {\n        return `v${version}`;\n    }\n    // In all these conditions we never force a version\n    if (publicIDContainsVersion(publicID) || isUrl(publicID) || isFileName(publicID)) {\n        return '';\n    }\n    return shouldForceVersion ? 'v1' : '';\n}\nexport { handleAssetType, getUrlVersion, handleDeliveryType, getUrlPrefix };\n", "/**\n * @private\n * @description Adds left padding to a string with the desired substring the provided number of times\n * @example stringPad(foo, 3, 'a'') // -> aaafoo\n * @param {string} value\n * @param {number} _targetLength\n * @param {string} _padString\n */\nexport function stringPad(value, _targetLength, _padString) {\n    let targetLength = _targetLength >> 0; //truncate if number or convert non-number to 0;\n    let padString = String((typeof _padString !== 'undefined' ? _padString : ' '));\n    if (value.length > targetLength) {\n        return String(value);\n    }\n    else {\n        targetLength = targetLength - value.length;\n        if (targetLength > padString.length) {\n            padString += repeatStringNumTimes(padString, targetLength / padString.length);\n        }\n        return padString.slice(0, targetLength) + String(value);\n    }\n}\n/**\n * @description Repeat a string multiple times, cross-browser-safe alternative to string.repeat()\n * @param string\n * @param _times\n */\nfunction repeatStringNumTimes(string, _times) {\n    let times = _times;\n    let repeatedString = \"\";\n    while (times > 0) {\n        repeatedString += string;\n        times--;\n    }\n    return repeatedString;\n}\n", "import { stringPad } from \"./stringPad.js\";\n/**\n * This file maps sequences of 6 bit binary digits to a character in base64.\n * 000000 -> A\n * 110011 -> Z\n * 111111 -> /\n */\nconst chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\nconst base64Map = {};\nlet num = 0;\nchars.split('').forEach((char) => {\n    let key = num.toString(2);\n    key = stringPad(key, 6, '0');\n    base64Map[key] = char;\n    num++;\n});\n/**\n * Map of [six-bit binary codes] -> [Base64 characters]\n */\nexport { base64Map };\n", "import { stringPad } from \"./stringPad.js\";\n/**\n * @private\n * @description Reverses the version positions, x.y.z turns to z.y.x\n *              Pads each segment with '0' so they have length of 2\n *              Example: 1.2.3 -> 03.02.01\n * @param {string} semVer Input can be either x.y.z or x.y\n * @return {string} in the form of zz.yy.xx (\n */\nexport function reverseVersion(semVer) {\n    if (semVer.split('.').length < 2) {\n        throw new Error('invalid semVer, must have at least two segments');\n    }\n    // Split by '.', reverse, create new array with padded values and concat it together\n    return semVer.split('.').reverse().map((segment) => {\n        // try to cast to number\n        const asNumber = +segment;\n        if (isNaN(asNumber) || asNumber < 0) {\n            throw 'Invalid version number provided';\n        }\n        return stringPad(segment, 2, '0');\n    }).join('.');\n}\n", "import { base64Map } from \"./base64Map.js\";\nimport { stringPad } from \"./stringPad.js\";\nimport { reverseVersion } from \"./reverseVersion.js\";\n/**\n * @private\n * @description Encodes a semVer-like version string\n * @param {string} semVer Input can be either x.y.z or x.y\n * @return {string} A string built from 3 characters of the base64 table that encode the semVer\n */\nexport function encodeVersion(semVer) {\n    let strResult = '';\n    // support x.y or x.y.z by using 'parts' as a variable\n    const parts = semVer.split('.').length;\n    const paddedStringLength = parts * 6; // we pad to either 12 or 18 characters\n    // reverse (but don't mirror) the version. 1.5.15 -> 15.5.1\n    // Pad to two spaces, 15.5.1 -> 15.05.01\n    const paddedReversedSemver = reverseVersion(semVer);\n    // turn 15.05.01 to a string '150501' then to a number 150501\n    const num = parseInt(paddedReversedSemver.split('.').join(''));\n    // Represent as binary, add left padding to 12 or 18 characters.\n    // 150,501 -> 100100101111100101\n    let paddedBinary = num.toString(2);\n    paddedBinary = stringPad(paddedBinary, paddedStringLength, '0');\n    // Stop in case an invalid version number was provided\n    // paddedBinary must be built from sections of 6 bits\n    if (paddedBinary.length % 6 !== 0) {\n        throw 'Version must be smaller than 43.21.26)';\n    }\n    // turn every 6 bits into a character using the base64Map\n    paddedBinary.match(/.{1,6}/g).forEach((bitString) => {\n        // console.log(bitString);\n        strResult += base64Map[bitString];\n    });\n    return strResult;\n}\n", "/**\n * @private\n * @description Gets the analyticsOptions from options- should include sdkSemver, techVersion, sdkCode, and feature\n * @param {ITrackedPropertiesThroughAnalytics} options\n * @returns {IAnalyticsOptions}\n */\nexport function getAnalyticsOptions(options) {\n    const analyticsOptions = {\n        sdkSemver: options.sdkSemver,\n        techVersion: options.techVersion,\n        sdkCode: options.sdkCode,\n        product: options.product,\n        feature: '0',\n    };\n    if (options.accessibility) {\n        analyticsOptions.feature = 'D';\n    }\n    if (options.lazyload) {\n        analyticsOptions.feature = 'C';\n    }\n    if (options.responsive) {\n        analyticsOptions.feature = 'A';\n    }\n    if (options.placeholder) {\n        analyticsOptions.feature = 'B';\n    }\n    return analyticsOptions;\n}\n", "const packageVersion = '1.11.0';\n/**\n * Export package version (injected during our build).\n * Reason for this is that If we import values from from package.json,\n * it will cause an error for users who do not have an 'import from json' plugin\n * as part of their build process / bundler.\n */\nexport { packageVersion };\n", "import { encodeVersion } from \"./encodeVersion.js\";\nimport { getAnalyticsOptions } from \"./getAnalyticsOptions.js\";\nimport { packageVersion } from \"../internal/utils/packageVersion.js\";\n/**\n * @private\n * @description Try to get the node version out of process, if browser just return 0.0.0\n */\nfunction getNodeVersion() {\n    const failedVersion = '0.0.0';\n    if (typeof window !== 'undefined') {\n        return failedVersion;\n    }\n    else {\n        // node env\n        try {\n            return process.versions.node || failedVersion;\n        }\n        catch (e) {\n            return failedVersion;\n        }\n    }\n}\n/**\n * @private\n * @description Ensure that all values ITrackedPropertiesThroughAnalytics are populated.\n * Accept a partial map of values and returns the complete interface of ITrackedPropertiesThroughAnalytics\n * @param {ITrackedPropertiesThroughAnalytics} trackedAnalytics\n * @param {ITrackedPropertiesThroughAnalytics} trackedAnalytics\n */\nfunction ensureShapeOfTrackedProperties(trackedAnalytics) {\n    // try to get the process version from node, but if we're on the client return 0.0.0\n    const defaults = {\n        techVersion: getNodeVersion(),\n        sdkCode: 'T',\n        sdkSemver: packageVersion.split('-')[0],\n        product: 'A',\n        responsive: false,\n        placeholder: false,\n        lazyload: false,\n        accessibility: false\n    };\n    if (!trackedAnalytics) {\n        return defaults;\n    }\n    else {\n        return Object.assign(Object.assign({}, defaults), trackedAnalytics);\n    }\n}\n/**\n * @private\n * @description Creates the complete SDK signature by using all the values provided by ITrackedPropertiesThroughAnalytics\n *              Creation of the signature\n *              - Set the AlgoVersion of the encoding, this is an internal letter that represents the version\n *                of our encoding algorithm, it will allow us to perform breaking changes if we'll need them.\n *              - Take the constant SDK code (Arbitrary letter chosen for each SDK, for Base that letter is 'T')\n *                this is used to tell apart which SDK is being tracked.\n *              - Take the {major.minor} versions of the node version (techVersion) (14.2, 16.2 etc.)\n *              - Take the full semver of the SDK you wish to track\n *              - Take the features used(lazy, placeholder etc.) and turn them to a letter (for example accessibility -> D)\n *              - Before appending the string, the Versions must be encoded, see the function `encodeVersion` for more details\n *              - Append all the variables to a single string\n *              - In any case of an error, return the single letter 'E'\n *\n * @return {string} sdkAnalyticsSignature\n */\nexport function getSDKAnalyticsSignature(_trackedAnalytics) {\n    const trackedAnalytics = ensureShapeOfTrackedProperties(_trackedAnalytics);\n    const analyticsOptions = getAnalyticsOptions(trackedAnalytics);\n    try {\n        const twoPartVersion = removePatchFromSemver(analyticsOptions.techVersion);\n        const encodedSDKVersion = encodeVersion(analyticsOptions.sdkSemver);\n        const encodedTechVersion = encodeVersion(twoPartVersion);\n        const featureCode = analyticsOptions.feature;\n        const SDKCode = analyticsOptions.sdkCode;\n        const product = analyticsOptions.product;\n        const algoVersion = 'B'; // The algo version is determined here, it should not be an argument\n        return `${algoVersion}${product}${SDKCode}${encodedSDKVersion}${encodedTechVersion}${featureCode}`;\n    }\n    catch (e) {\n        // Either SDK or Node versions were unparsable\n        return 'E';\n    }\n}\n/**\n * @private\n * @description Removes patch version from the semver if it exists\n *              Turns x.y.z OR x.y into x.y\n * @param {'x.y.z' | 'x.y' | string} semVerStr\n */\nfunction removePatchFromSemver(semVerStr) {\n    const parts = semVerStr.split('.');\n    return `${parts[0]}.${parts[1]}`;\n}\n", "import { getUrlPrefix, getUrlVersion, handleAssetType, handleDeliveryType } from \"../internal/url/cloudinaryURL.js\";\nimport URLConfig from \"../config/URLConfig.js\";\nimport { getSDKAnalyticsSignature } from \"../sdkAnalytics/getSDKAnalyticsSignature.js\";\n/**\n * This const contains all the valid combination of asset/delivery for URL shortening purposes\n * It's exported because it's used in a test, but it's not really shared enough to belong in a separate file\n */\nexport const SEO_TYPES = {\n    \"image/upload\": \"images\",\n    \"image/private\": \"private_images\",\n    \"image/authenticated\": \"authenticated_images\",\n    \"raw/upload\": \"files\",\n    \"video/upload\": \"videos\"\n};\n/**\n * @description Cloudinary file without a transformation\n * @summary SDK\n * @memberOf SDK\n */\nclass CloudinaryFile {\n    constructor(publicID, cloudConfig = {}, urlConfig) {\n        this.setPublicID(publicID);\n        this.setCloudConfig(cloudConfig);\n        this.setURLConfig(urlConfig);\n    }\n    /**\n     * @description Sets the URL Config for this asset\n     * @param urlConfig\n     * @return {this}\n     */\n    setURLConfig(urlConfig) {\n        this.urlConfig = new URLConfig(urlConfig);\n        return this;\n    }\n    /**\n     * @description Sets the Cloud Config for this asset\n     * @param urlConfig\n     * @return {this}\n     */\n    setCloudConfig(cloudConfig) {\n        this.cloudName = cloudConfig.cloudName;\n        this.apiKey = cloudConfig.apiKey;\n        this.apiSecret = cloudConfig.apiSecret;\n        this.authToken = cloudConfig.authToken;\n        return this;\n    }\n    /**\n     * @description Sets the public ID of the asset.\n     * @param {string} publicID The public ID of the asset.\n     * @return {this}\n     */\n    setPublicID(publicID) {\n        // PublicID must be a string!\n        this.publicID = publicID ? publicID.toString() : '';\n        return this;\n    }\n    /**\n     * @description Sets the delivery type of the asset.\n     * @param {DELIVERY_TYPE | string} newType The type of the asset.\n     * @return {this}\n     */\n    setDeliveryType(newType) {\n        this.deliveryType = newType;\n        return this;\n    }\n    /**\n     * @description Sets the URL SEO suffix of the asset.\n     * @param {string} newSuffix The SEO suffix.\n     * @return {this}\n     */\n    setSuffix(newSuffix) {\n        this.suffix = newSuffix;\n        return this;\n    }\n    /**\n     * @description Sets the signature of the asset.\n     * @param {string} signature The signature.\n     * @return {this}\n     */\n    setSignature(signature) {\n        this.signature = signature;\n        return this;\n    }\n    /**\n     * @description Sets the version of the asset.\n     * @param {string} newVersion The version of the asset.\n     * @return {this}\n     */\n    setVersion(newVersion) {\n        if (newVersion) {\n            this.version = newVersion;\n        }\n        return this;\n    }\n    /**\n     * @description Sets the asset type.\n     * @param {string} newType The type of the asset.\n     * @return {this}\n     */\n    setAssetType(newType) {\n        if (newType) {\n            this.assetType = newType;\n        }\n        return this;\n    }\n    sign() {\n        return this;\n    }\n    /**\n     * @description Serializes to URL string\n     * @param overwriteOptions\n     */\n    toURL(overwriteOptions = {}) {\n        return this.createCloudinaryURL(null, overwriteOptions.trackedAnalytics);\n    }\n    /**\n     * @description Validate various options before attempting to create a URL\n     * The function will throw in case a violation\n     * @throws Validation errors\n     */\n    validateAssetForURLCreation() {\n        if (typeof this.cloudName === 'undefined') {\n            throw 'You must supply a cloudName when initializing the asset';\n        }\n        const suffixContainsDot = this.suffix && this.suffix.indexOf('.') >= 0;\n        const suffixContainsSlash = this.suffix && this.suffix.indexOf('/') >= 0;\n        if (suffixContainsDot || suffixContainsSlash) {\n            throw '`suffix`` should not include . or /';\n        }\n    }\n    /**\n     * @description return an SEO friendly name for a combination of asset/delivery, some examples:\n     * * image/upload -> images\n     * * video/upload -> videos\n     * If no match is found, return `{asset}/{delivery}`\n     */\n    getResourceType() {\n        const assetType = handleAssetType(this.assetType);\n        const deliveryType = handleDeliveryType(this.deliveryType);\n        const hasSuffix = !!this.suffix;\n        const regularSEOType = `${assetType}/${deliveryType}`;\n        const shortSEOType = SEO_TYPES[`${assetType}/${deliveryType}`];\n        const useRootPath = this.urlConfig.useRootPath;\n        const shorten = this.urlConfig.shorten;\n        // Quick exit incase of useRootPath\n        if (useRootPath) {\n            if (regularSEOType === 'image/upload') {\n                return ''; // For image/upload we're done, just return nothing\n            }\n            else {\n                throw new Error(`useRootPath can only be used with assetType: 'image' and deliveryType: 'upload'. Provided: ${regularSEOType} instead`);\n            }\n        }\n        if (shorten && regularSEOType === 'image/upload') {\n            return 'iu';\n        }\n        if (hasSuffix) {\n            if (shortSEOType) {\n                return shortSEOType;\n            }\n            else {\n                throw new Error(`URL Suffix only supported for ${Object.keys(SEO_TYPES).join(', ')}, Provided: ${regularSEOType} instead`);\n            }\n        }\n        // If all else fails, return the regular image/upload combination (asset/delivery)\n        return regularSEOType;\n    }\n    getSignature() {\n        if (this.signature) {\n            return `s--${this.signature}--`;\n        }\n        else {\n            return '';\n        }\n    }\n    /**\n     *\n     * @description Creates a fully qualified CloudinaryURL\n     * @return {string} CloudinaryURL\n     * @throws Validation Errors\n     */\n    createCloudinaryURL(transformation, trackedAnalytics) {\n        // In accordance with the existing implementation, if no publicID exists we should return nothing.\n        if (!this.publicID) {\n            return '';\n        }\n        // Throws if some options are mis-configured\n        // See the function for more information on when it throws\n        this.validateAssetForURLCreation();\n        const prefix = getUrlPrefix(this.cloudName, this.urlConfig);\n        const transformationString = transformation ? transformation.toString() : '';\n        const version = getUrlVersion(this.publicID, this.version, this.urlConfig.forceVersion);\n        const publicID = this.publicID\n            // Serialize the publicID, but leave slashes alone.\n            // we can't use serializeCloudinaryCharacters because that does both things (, and /)\n            .replace(/,/g, '%2C');\n        // Resource type is a mixture of assetType, deliveryType and various URL Configurations\n        // Note how `suffix` changes both image/upload (resourceType) and also is appended at the end\n        const url = [prefix, this.getResourceType(), this.getSignature(), transformationString, version, publicID, this.suffix]\n            .filter((a) => a)\n            .join('/');\n        if (typeof transformation === 'string') {\n            return url;\n        }\n        else {\n            const safeURL = encodeURI(url)\n                .replace(/\\?/g, '%3F')\n                .replace(/=/g, '%3D');\n            const queryParams = new URLSearchParams(this.urlConfig.queryParams);\n            // urlConfig.analytics is true by default, has to be explicitly set to false to overwrite\n            // Don't add analytics when publicId includes a '?' to not risk changing existing query params\n            if (this.urlConfig.analytics !== false && !(publicID.includes('?'))) {\n                queryParams.set(\"_a\", getSDKAnalyticsSignature(trackedAnalytics));\n            }\n            const queryParamsString = queryParams.toString();\n            if (queryParamsString) {\n                return `${safeURL}?${queryParamsString}`;\n            }\n            else {\n                return safeURL;\n            }\n        }\n    }\n}\nexport { CloudinaryFile };\n", "import { CloudinaryFile } from \"./CloudinaryFile.js\";\nimport { DeliveryFormatAction } from \"@cloudinary/transformation-builder-sdk/actions/delivery/DeliveryFormatAction\";\n/**\n * @desc Cloudinary Transformable interface, extended by any class that needs a Transformation Interface\n * @summary SDK\n * @memberOf SDK\n */\nclass CloudinaryTransformable extends CloudinaryFile {\n    constructor(publicID, cloudConfig, urlConfig, transformation) {\n        /* istanbul ignore next */\n        super(publicID, cloudConfig, urlConfig);\n        this.transformation = transformation;\n    }\n    /**\n     * @desc A proxy to {@link SDK.Transformation| Transformation} - Calls the same method contained in this.transformation\n     * @param {Actions.Animated} animated\n     * @return {this}\n     */\n    animated(animated) {\n        this.transformation.animated(animated);\n        return this;\n    }\n    /**\n     * @desc A proxy to {@link SDK.Transformation| Transformation} - Calls the same method contained in this.transformation\n     * @param {Actions.Border} border\n     * @return {this}\n     */\n    border(border) {\n        this.transformation.border(border);\n        return this;\n    }\n    /**\n     * @desc A proxy to {@link SDK.Transformation| Transformation} - Calls the same method contained in this.transformation\n     * @param {Actions.Reshape} reshape\n     * @return {this}\n     */\n    reshape(reshape) {\n        this.transformation.reshape(reshape);\n        return this;\n    }\n    /**\n     * @desc A proxy to {@link SDK.Transformation| Transformation} - Calls the same method contained in this.transformation\n     * @param {Actions.Resize} resize\n     * @return {this}\n     */\n    resize(resize) {\n        this.transformation.resize(resize);\n        return this;\n    }\n    /**\n     * @desc An alias to Action Delivery.quality\n     * @param {string|number} quality\n     * @return {this}\n     */\n    quality(quality) {\n        this.addAction(new DeliveryFormatAction('q', quality));\n        return this;\n    }\n    /**\n     * @desc An alias to Action Delivery.format\n     * @param {string} format\n     * @return {this}\n     */\n    format(format) {\n        this.addAction(new DeliveryFormatAction('f', format));\n        return this;\n    }\n    /**\n     * @desc A proxy to {@link SDK.Transformation| Transformation} - Calls the same method contained in this.transformation\n     * @param {Actions.RoundCorners} roundCorners\n     * @return {this}\n     */\n    roundCorners(roundCorners) {\n        this.transformation.roundCorners(roundCorners);\n        return this;\n    }\n    /**\n     * @desc A proxy to {@link SDK.Transformation| Transformation} - Calls the same method contained in this.transformation\n     * @return {this}\n     */\n    overlay(overlayAction) {\n        this.transformation.overlay(overlayAction);\n        return this;\n    }\n    /**\n     * @desc A proxy to {@link SDK.Transformation| Transformation} - Calls the same method contained in this.transformation\n     * @param {Actions.Variable} variableAction\n     * @return {this}\n     */\n    addVariable(variableAction) {\n        this.transformation.addVariable(variableAction);\n        return this;\n    }\n    /**\n     * @desc A proxy to {@link SDK.Transformation| Transformation} - Calls the same method contained in this.transformation\n     * @param {Actions.Condition} conditionalAction\n     * @return {this}\n     */\n    conditional(conditionalAction) {\n        this.transformation.conditional(conditionalAction);\n        return this;\n    }\n    /**\n     * @desc A proxy to {@link SDK.Transformation| Transformation} - Calls the same method contained in this.transformation\n     * @param {Actions.Effect} effect\n     * @return {this}\n     */\n    effect(effect) {\n        this.transformation.effect(effect);\n        return this;\n    }\n    /**\n     * @desc A proxy to {@link SDK.Transformation| Transformation} - Calls the same method contained in this.transformation\n     * @param {Actions.Adjust} action\n     * @return {this}\n     */\n    adjust(action) {\n        this.transformation.adjust(action);\n        return this;\n    }\n    /**\n     * @desc A proxy to {@link SDK.Transformation| Transformation} - Calls the same method contained in this.transformation\n     * @param {Actions.Rotate} rotate\n     * @return {this}\n     */\n    rotate(rotate) {\n        this.transformation.rotate(rotate);\n        return this;\n    }\n    /**\n     * @desc A proxy to {@link SDK.Transformation| Transformation} - Calls the same method contained in this.transformation\n     * @param {Actions.NamedTransformation} namedTransformation\n     * @return {this}\n     */\n    namedTransformation(namedTransformation) {\n        this.transformation.namedTransformation(namedTransformation);\n        return this;\n    }\n    /**\n     * @desc A proxy to {@link SDK.Transformation| Transformation} - Calls the same method contained in this.transformation\n     * @param {Actions.Delivery} deliveryAction\n     * @return {this}\n     */\n    delivery(deliveryAction) {\n        this.transformation.delivery(deliveryAction);\n        return this;\n    }\n    /**\n     * @desc A proxy to {@link SDK.Transformation| Transformation} - Calls the same method contained in this.transformation\n     * @param {Qualifiers.color} color\n     * @return {this}\n     */\n    backgroundColor(color) {\n        this.transformation.backgroundColor(color);\n        return this;\n    }\n    /**\n     * @desc A proxy to {@link SDK.Transformation| Transformation} - Calls the same method contained in this.transformation\n     * @param {Actions.PSDTools} action\n     * @return {this}\n     */\n    psdTools(action) {\n        this.transformation.psdTools(action);\n        return this;\n    }\n    /**\n     * @desc A proxy to {@link SDK.Transformation| Transformation} - Calls the same method contained in this.transformation\n     * @param {Actions.Extract} action\n     * @return {this}\n     */\n    extract(action) {\n        this.transformation.extract(action);\n        return this;\n    }\n    /**\n     * @desc A proxy to {@link SDK.Transformation| Transformation} - Calls the same method contained in this.transformation\n     * @param {Qualifiers.Flag | string} flagQualifier\n     * @return {this}\n     */\n    addFlag(flagQualifier) {\n        this.transformation.addFlag(flagQualifier);\n        return this;\n    }\n    /**\n     * @desc A proxy to {@link SDK.Transformation| Transformation} - Calls the same method contained in this.transformation\n     * @param {Actions.CustomFunction} customFunction\n     * @return {this}\n     */\n    customFunction(customFunction) {\n        this.transformation.customFunction(customFunction);\n        return this;\n    }\n    /**\n     * @desc A proxy to {@link SDK.Transformation| Transformation} - Calls the same method contained in this.transformation\n     * @param {SDK.Action | string} action\n     * @return {this}\n     */\n    addAction(action) {\n        this.transformation.addAction(action);\n        return this;\n    }\n    /**\n     * @description Extend your transformation with another transformation\n     * @param { string | SDK.Transformation } tx\n     */\n    addTransformation(tx) {\n        this.transformation.addTransformation(tx);\n        return this;\n    }\n    /**\n     * @desc A proxy to {@link SDK.Transformation| Transformation} - Calls the same method contained in this.transformation\n     * @return {string}\n     */\n    toString() {\n        return this.transformation.toString();\n    }\n    /**\n     * @desc A proxy to {@link SDK.Transformation| Transformation} - Calls the same method contained in this.transformation\n     * @return {this}\n     */\n    underlay(underlayAction) {\n        this.transformation.underlay(underlayAction);\n        return this;\n    }\n    toURL(overwriteOptions = {}) {\n        return this.createCloudinaryURL(this.transformation, overwriteOptions === null || overwriteOptions === void 0 ? void 0 : overwriteOptions.trackedAnalytics);\n    }\n}\nexport { CloudinaryTransformable };\n", "import { ImageTransformation } from \"@cloudinary/transformation-builder-sdk/transformation/ImageTransformation\";\nimport { CloudinaryTransformable } from \"./CloudinaryTransformable.js\";\n/**\n * @desc Cloudinary image asset, with image-related transformations\n * @summary SDK\n * @memberOf SDK\n */\nclass CloudinaryImage extends CloudinaryTransformable {\n    constructor(publicID, cloudConfig, urlConfig) {\n        /* istanbul ignore next */\n        super(publicID, cloudConfig, urlConfig, new ImageTransformation());\n    }\n}\nexport { CloudinaryImage };\n", "import { CloudinaryTransformable } from \"./CloudinaryTransformable.js\";\nimport { VideoTransformation } from \"../transformation/VideoTransformation.js\";\n/**\n * @desc Cloudinary video asset, with video-related transformations\n * @summary SDK\n * @memberOf SDK\n */\nclass CloudinaryVideo extends CloudinaryTransformable {\n    constructor(publicID, cloudConfig, urlConfig) {\n        /* istanbul ignore next */\n        super(publicID, cloudConfig, urlConfig, new VideoTransformation());\n        this.assetType = 'video';\n    }\n    /**\n     * @desc A proxy to {@link SDK.Transformation| Transformation} - Calls the same method contained in this.transformation\n     * @param {Actions.Transcode} action\n     * @return {this}\n     */\n    transcode(action) {\n        this.transformation.transcode(action);\n        return this;\n    }\n    /**\n     * @desc A proxy to {@link SDK.Transformation| Transformation} - Calls the same method contained in this.transformation\n     * @param {Actions.VideoEdit} action\n     * @return {this}\n     */\n    videoEdit(action) {\n        this.transformation.videoEdit(action);\n        return this;\n    }\n}\nexport { CloudinaryVideo };\n", "/* eslint-disable */\n// @ts-nocheck\n// This file is a direct copy from lodash.clonedeep\n// Lodash.clonedeep has problems with the module exports, thus a copy was the shortest and cleanest solution\n/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n/** Used as references for constious `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]', arrayTag = '[object Array]', boolTag = '[object Boolean]', dateTag = '[object Date]', errorTag = '[object Error]', funcTag = '[object Function]', genTag = '[object GeneratorFunction]', mapTag = '[object Map]', numberTag = '[object Number]', objectTag = '[object Object]', promiseTag = '[object Promise]', regexpTag = '[object RegExp]', setTag = '[object Set]', stringTag = '[object String]', symbolTag = '[object Symbol]', weakMapTag = '[object WeakMap]';\nvar arrayBufferTag = '[object ArrayBuffer]', dataViewTag = '[object DataView]', float32Tag = '[object Float32Array]', float64Tag = '[object Float64Array]', int8Tag = '[object Int8Array]', int16Tag = '[object Int16Array]', int32Tag = '[object Int32Array]', uint8Tag = '[object Uint8Array]', uint8ClampedTag = '[object Uint8ClampedArray]', uint16Tag = '[object Uint16Array]', uint32Tag = '[object Uint32Array]';\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n/** Used to match `RegExp` flags from their coerced string values. */\nvar reFlags = /\\w*$/;\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n/** Used to identify `toStringTag` values supported by `_.clone`. */\nvar cloneableTags = {};\ncloneableTags[argsTag] = cloneableTags[arrayTag] =\n    cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =\n        cloneableTags[boolTag] = cloneableTags[dateTag] =\n            cloneableTags[float32Tag] = cloneableTags[float64Tag] =\n                cloneableTags[int8Tag] = cloneableTags[int16Tag] =\n                    cloneableTags[int32Tag] = cloneableTags[mapTag] =\n                        cloneableTags[numberTag] = cloneableTags[objectTag] =\n                            cloneableTags[regexpTag] = cloneableTags[setTag] =\n                                cloneableTags[stringTag] = cloneableTags[symbolTag] =\n                                    cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =\n                                        cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;\ncloneableTags[errorTag] = cloneableTags[funcTag] =\n    cloneableTags[weakMapTag] = false;\n/** Detect free constiable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n/** Detect free constiable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n/** Detect free constiable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n/** Detect free constiable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n/**\n * Adds the key-value `pair` to `map`.\n *\n * @private\n * @param {Object} map The map to modify.\n * @param {Array} pair The key-value pair to add.\n * @returns {Object} Returns `map`.\n */\nfunction addMapEntry(map, pair) {\n    // Don't return `map.set` because it's not chainable in IE 11.\n    map.set(pair[0], pair[1]);\n    return map;\n}\n/**\n * Adds `value` to `set`.\n *\n * @private\n * @param {Object} set The set to modify.\n * @param {*} value The value to add.\n * @returns {Object} Returns `set`.\n */\nfunction addSetEntry(set, value) {\n    // Don't return `set.add` because it's not chainable in IE 11.\n    set.add(value);\n    return set;\n}\n/**\n * A specialized version of `_.forEach` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns `array`.\n */\nfunction arrayEach(array, iteratee) {\n    var index = -1, length = array ? array.length : 0;\n    while (++index < length) {\n        if (iteratee(array[index], index, array) === false) {\n            break;\n        }\n    }\n    return array;\n}\n/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n    var index = -1, length = values.length, offset = array.length;\n    while (++index < length) {\n        array[offset + index] = values[index];\n    }\n    return array;\n}\n/**\n * A specialized version of `_.reduce` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {*} [accumulator] The initial value.\n * @param {boolean} [initAccum] Specify using the first element of `array` as\n *  the initial value.\n * @returns {*} Returns the accumulated value.\n */\nfunction arrayReduce(array, iteratee, accumulator, initAccum) {\n    var index = -1, length = array ? array.length : 0;\n    if (initAccum && length) {\n        accumulator = array[++index];\n    }\n    while (++index < length) {\n        accumulator = iteratee(accumulator, array[index], index, array);\n    }\n    return accumulator;\n}\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n    var index = -1, result = Array(n);\n    while (++index < n) {\n        result[index] = iteratee(index);\n    }\n    return result;\n}\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n    return object == null ? undefined : object[key];\n}\n/**\n * Checks if `value` is a host object in IE < 9.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a host object, else `false`.\n */\nfunction isHostObject(value) {\n    // Many host objects are `Object` objects that can coerce to strings\n    // despite having improperly defined `toString` methods.\n    var result = false;\n    if (value != null && typeof value.toString != 'function') {\n        try {\n            result = !!(`${value}`);\n        }\n        catch (e) {\n        }\n    }\n    return result;\n}\n/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n    var index = -1, result = Array(map.size);\n    map.forEach(function (value, key) {\n        result[++index] = [key, value];\n    });\n    return result;\n}\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n    return function (arg) {\n        return func(transform(arg));\n    };\n}\n/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n    var index = -1, result = Array(set.size);\n    set.forEach(function (value) {\n        result[++index] = value;\n    });\n    return result;\n}\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype, funcProto = Function.prototype, objectProto = Object.prototype;\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function () {\n    var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n    return uid ? (`Symbol(src)_1.${uid}`) : '';\n}());\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp(`^${funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n    .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?')}$`);\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined, Symbol = root.Symbol, Uint8Array = root.Uint8Array, getPrototype = overArg(Object.getPrototypeOf, Object), objectCreate = Object.create, propertyIsEnumerable = objectProto.propertyIsEnumerable, splice = arrayProto.splice;\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols, nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined, nativeKeys = overArg(Object.keys, Object);\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView'), Map = getNative(root, 'Map'), Promise = getNative(root, 'Promise'), Set = getNative(root, 'Set'), WeakMap = getNative(root, 'WeakMap'), nativeCreate = getNative(Object, 'create');\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView), mapCtorString = toSource(Map), promiseCtorString = toSource(Promise), setCtorString = toSource(Set), weakMapCtorString = toSource(WeakMap);\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined, symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n    var index = -1, length = entries ? entries.length : 0;\n    this.clear();\n    while (++index < length) {\n        var entry = entries[index];\n        this.set(entry[0], entry[1]);\n    }\n}\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n    this.__data__ = nativeCreate ? nativeCreate(null) : {};\n}\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n    return this.has(key) && delete this.__data__[key];\n}\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n    var data = this.__data__;\n    if (nativeCreate) {\n        var result = data[key];\n        return result === HASH_UNDEFINED ? undefined : result;\n    }\n    return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n    var data = this.__data__;\n    return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);\n}\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n    var data = this.__data__;\n    data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n    return this;\n}\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype.delete = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n    var index = -1, length = entries ? entries.length : 0;\n    this.clear();\n    while (++index < length) {\n        var entry = entries[index];\n        this.set(entry[0], entry[1]);\n    }\n}\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n    this.__data__ = [];\n}\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n    var data = this.__data__, index = assocIndexOf(data, key);\n    if (index < 0) {\n        return false;\n    }\n    var lastIndex = data.length - 1;\n    if (index == lastIndex) {\n        data.pop();\n    }\n    else {\n        splice.call(data, index, 1);\n    }\n    return true;\n}\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n    var data = this.__data__, index = assocIndexOf(data, key);\n    return index < 0 ? undefined : data[index][1];\n}\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n    return assocIndexOf(this.__data__, key) > -1;\n}\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n    var data = this.__data__, index = assocIndexOf(data, key);\n    if (index < 0) {\n        data.push([key, value]);\n    }\n    else {\n        data[index][1] = value;\n    }\n    return this;\n}\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype.delete = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n    var index = -1, length = entries ? entries.length : 0;\n    this.clear();\n    while (++index < length) {\n        var entry = entries[index];\n        this.set(entry[0], entry[1]);\n    }\n}\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n    this.__data__ = {\n        'hash': new Hash,\n        'map': new (Map || ListCache),\n        'string': new Hash\n    };\n}\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n    return getMapData(this, key).delete(key);\n}\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n    return getMapData(this, key).get(key);\n}\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n    return getMapData(this, key).has(key);\n}\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n    getMapData(this, key).set(key, value);\n    return this;\n}\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype.delete = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n    this.__data__ = new ListCache(entries);\n}\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n    this.__data__ = new ListCache;\n}\n/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n    return this.__data__.delete(key);\n}\n/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n    return this.__data__.get(key);\n}\n/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n    return this.__data__.has(key);\n}\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n    var cache = this.__data__;\n    if (cache instanceof ListCache) {\n        var pairs = cache.__data__;\n        if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n            pairs.push([key, value]);\n            return this;\n        }\n        cache = this.__data__ = new MapCache(pairs);\n    }\n    cache.set(key, value);\n    return this;\n}\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype.delete = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n    // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n    // Safari 9 makes `arguments.length` enumerable in strict mode.\n    var result = (isArray(value) || isArguments(value))\n        ? baseTimes(value.length, String)\n        : [];\n    var length = result.length, skipIndexes = !!length;\n    for (var key in value) {\n        if ((inherited || hasOwnProperty.call(value, key)) &&\n            !(skipIndexes && (key == 'length' || isIndex(key, length)))) {\n            result.push(key);\n        }\n    }\n    return result;\n}\n/**\n * Assigns `value` to `key` of `object` if the existing value is not equivalent\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction assignValue(object, key, value) {\n    var objValue = object[key];\n    if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||\n        (value === undefined && !(key in object))) {\n        object[key] = value;\n    }\n}\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n    var length = array.length;\n    while (length--) {\n        if (eq(array[length][0], key)) {\n            return length;\n        }\n    }\n    return -1;\n}\n/**\n * The base implementation of `_.assign` without support for multiple sources\n * or `customizer` functions.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @returns {Object} Returns `object`.\n */\nfunction baseAssign(object, source) {\n    return object && copyObject(source, keys(source), object);\n}\n/**\n * The base implementation of `_.clone` and `_.cloneDeep` which tracks\n * traversed objects.\n *\n * @private\n * @param {*} value The value to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @param {boolean} [isFull] Specify a clone including symbols.\n * @param {Function} [customizer] The function to customize cloning.\n * @param {string} [key] The key of `value`.\n * @param {Object} [object] The parent object of `value`.\n * @param {Object} [stack] Tracks traversed objects and their clone counterparts.\n * @returns {*} Returns the cloned value.\n */\nfunction baseClone(value, isDeep, isFull, customizer, key, object, stack) {\n    var result;\n    if (customizer) {\n        result = object ? customizer(value, key, object, stack) : customizer(value);\n    }\n    if (result !== undefined) {\n        return result;\n    }\n    if (!isObject(value)) {\n        return value;\n    }\n    var isArr = isArray(value);\n    if (isArr) {\n        result = initCloneArray(value);\n        if (!isDeep) {\n            return copyArray(value, result);\n        }\n    }\n    else {\n        var tag = getTag(value), isFunc = tag == funcTag || tag == genTag;\n        if (isBuffer(value)) {\n            return cloneBuffer(value, isDeep);\n        }\n        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {\n            if (isHostObject(value)) {\n                return object ? value : {};\n            }\n            result = initCloneObject(isFunc ? {} : value);\n            if (!isDeep) {\n                return copySymbols(value, baseAssign(result, value));\n            }\n        }\n        else {\n            if (!cloneableTags[tag]) {\n                return object ? value : {};\n            }\n            result = initCloneByTag(value, tag, baseClone, isDeep);\n        }\n    }\n    // Check for circular references and return its corresponding clone.\n    stack || (stack = new Stack);\n    var stacked = stack.get(value);\n    if (stacked) {\n        return stacked;\n    }\n    stack.set(value, result);\n    if (!isArr) {\n        var props = isFull ? getAllKeys(value) : keys(value);\n    }\n    arrayEach(props || value, function (subValue, key) {\n        if (props) {\n            key = subValue;\n            subValue = value[key];\n        }\n        // Recursively populate clone (susceptible to call stack limits).\n        assignValue(result, key, baseClone(subValue, isDeep, isFull, customizer, key, value, stack));\n    });\n    return result;\n}\n/**\n * The base implementation of `_.create` without support for assigning\n * properties to the created object.\n *\n * @private\n * @param {Object} prototype The object to inherit from.\n * @returns {Object} Returns the new object.\n */\nfunction baseCreate(proto) {\n    return isObject(proto) ? objectCreate(proto) : {};\n}\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\n    var result = keysFunc(object);\n    return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n}\n/**\n * The base implementation of `getTag`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n    return objectToString.call(value);\n}\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n    if (!isObject(value) || isMasked(value)) {\n        return false;\n    }\n    var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;\n    return pattern.test(toSource(value));\n}\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n    if (!isPrototype(object)) {\n        return nativeKeys(object);\n    }\n    var result = [];\n    for (var key in Object(object)) {\n        if (hasOwnProperty.call(object, key) && key != 'constructor') {\n            result.push(key);\n        }\n    }\n    return result;\n}\n/**\n * Creates a clone of  `buffer`.\n *\n * @private\n * @param {Buffer} buffer The buffer to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Buffer} Returns the cloned buffer.\n */\nfunction cloneBuffer(buffer, isDeep) {\n    if (isDeep) {\n        return buffer.slice();\n    }\n    var result = new buffer.constructor(buffer.length);\n    buffer.copy(result);\n    return result;\n}\n/**\n * Creates a clone of `arrayBuffer`.\n *\n * @private\n * @param {ArrayBuffer} arrayBuffer The array buffer to clone.\n * @returns {ArrayBuffer} Returns the cloned array buffer.\n */\nfunction cloneArrayBuffer(arrayBuffer) {\n    var result = new arrayBuffer.constructor(arrayBuffer.byteLength);\n    new Uint8Array(result).set(new Uint8Array(arrayBuffer));\n    return result;\n}\n/**\n * Creates a clone of `dataView`.\n *\n * @private\n * @param {Object} dataView The data view to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned data view.\n */\nfunction cloneDataView(dataView, isDeep) {\n    var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;\n    return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);\n}\n/**\n * Creates a clone of `map`.\n *\n * @private\n * @param {Object} map The map to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned map.\n */\nfunction cloneMap(map, isDeep, cloneFunc) {\n    var array = isDeep ? cloneFunc(mapToArray(map), true) : mapToArray(map);\n    return arrayReduce(array, addMapEntry, new map.constructor);\n}\n/**\n * Creates a clone of `regexp`.\n *\n * @private\n * @param {Object} regexp The regexp to clone.\n * @returns {Object} Returns the cloned regexp.\n */\nfunction cloneRegExp(regexp) {\n    var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));\n    result.lastIndex = regexp.lastIndex;\n    return result;\n}\n/**\n * Creates a clone of `set`.\n *\n * @private\n * @param {Object} set The set to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned set.\n */\nfunction cloneSet(set, isDeep, cloneFunc) {\n    var array = isDeep ? cloneFunc(setToArray(set), true) : setToArray(set);\n    return arrayReduce(array, addSetEntry, new set.constructor);\n}\n/**\n * Creates a clone of the `symbol` object.\n *\n * @private\n * @param {Object} symbol The symbol object to clone.\n * @returns {Object} Returns the cloned symbol object.\n */\nfunction cloneSymbol(symbol) {\n    return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};\n}\n/**\n * Creates a clone of `typedArray`.\n *\n * @private\n * @param {Object} typedArray The typed array to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned typed array.\n */\nfunction cloneTypedArray(typedArray, isDeep) {\n    var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;\n    return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);\n}\n/**\n * Copies the values of `source` to `array`.\n *\n * @private\n * @param {Array} source The array to copy values from.\n * @param {Array} [array=[]] The array to copy values to.\n * @returns {Array} Returns `array`.\n */\nfunction copyArray(source, array) {\n    var index = -1, length = source.length;\n    array || (array = Array(length));\n    while (++index < length) {\n        array[index] = source[index];\n    }\n    return array;\n}\n/**\n * Copies properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy properties from.\n * @param {Array} props The property identifiers to copy.\n * @param {Object} [object={}] The object to copy properties to.\n * @param {Function} [customizer] The function to customize copied values.\n * @returns {Object} Returns `object`.\n */\nfunction copyObject(source, props, object, customizer) {\n    object || (object = {});\n    var index = -1, length = props.length;\n    while (++index < length) {\n        var key = props[index];\n        var newValue = customizer\n            ? customizer(object[key], source[key], key, object, source)\n            : undefined;\n        assignValue(object, key, newValue === undefined ? source[key] : newValue);\n    }\n    return object;\n}\n/**\n * Copies own symbol properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy symbols from.\n * @param {Object} [object={}] The object to copy symbols to.\n * @returns {Object} Returns `object`.\n */\nfunction copySymbols(source, object) {\n    return copyObject(source, getSymbols(source), object);\n}\n/**\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeys(object) {\n    return baseGetAllKeys(object, keys, getSymbols);\n}\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n    var data = map.__data__;\n    return isKeyable(key)\n        ? data[typeof key == 'string' ? 'string' : 'hash']\n        : data.map;\n}\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n    var value = getValue(object, key);\n    return baseIsNative(value) ? value : undefined;\n}\n/**\n * Creates an array of the own enumerable symbol properties of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbols = nativeGetSymbols ? overArg(nativeGetSymbols, Object) : stubArray;\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n// Fallback for data views, maps, sets, and weak maps in IE 11,\n// for data views in Edge < 14, and promises in Node.js.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n    getTag = function (value) {\n        var result = objectToString.call(value), Ctor = result == objectTag ? value.constructor : undefined, ctorString = Ctor ? toSource(Ctor) : undefined;\n        if (ctorString) {\n            switch (ctorString) {\n                case dataViewCtorString:\n                    return dataViewTag;\n                case mapCtorString:\n                    return mapTag;\n                case promiseCtorString:\n                    return promiseTag;\n                case setCtorString:\n                    return setTag;\n                case weakMapCtorString:\n                    return weakMapTag;\n            }\n        }\n        return result;\n    };\n}\n/**\n * Initializes an array clone.\n *\n * @private\n * @param {Array} array The array to clone.\n * @returns {Array} Returns the initialized clone.\n */\nfunction initCloneArray(array) {\n    var length = array.length, result = array.constructor(length);\n    // Add properties assigned by `RegExp#exec`.\n    if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {\n        result.index = array.index;\n        result.input = array.input;\n    }\n    return result;\n}\n/**\n * Initializes an object clone.\n *\n * @private\n * @param {Object} object The object to clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneObject(object) {\n    return (typeof object.constructor == 'function' && !isPrototype(object))\n        ? baseCreate(getPrototype(object))\n        : {};\n}\n/**\n * Initializes an object clone based on its `toStringTag`.\n *\n * **Note:** This function only supports cloning values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to clone.\n * @param {string} tag The `toStringTag` of the object to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneByTag(object, tag, cloneFunc, isDeep) {\n    var Ctor = object.constructor;\n    switch (tag) {\n        case arrayBufferTag:\n            return cloneArrayBuffer(object);\n        case boolTag:\n        case dateTag:\n            return new Ctor(+object);\n        case dataViewTag:\n            return cloneDataView(object, isDeep);\n        case float32Tag:\n        case float64Tag:\n        case int8Tag:\n        case int16Tag:\n        case int32Tag:\n        case uint8Tag:\n        case uint8ClampedTag:\n        case uint16Tag:\n        case uint32Tag:\n            return cloneTypedArray(object, isDeep);\n        case mapTag:\n            return cloneMap(object, isDeep, cloneFunc);\n        case numberTag:\n        case stringTag:\n            return new Ctor(object);\n        case regexpTag:\n            return cloneRegExp(object);\n        case setTag:\n            return cloneSet(object, isDeep, cloneFunc);\n        case symbolTag:\n            return cloneSymbol(object);\n    }\n}\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n    length = length == null ? MAX_SAFE_INTEGER : length;\n    return !!length &&\n        (typeof value == 'number' || reIsUint.test(value)) &&\n        (value > -1 && value % 1 == 0 && value < length);\n}\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n    var type = typeof value;\n    return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n        ? (value !== '__proto__')\n        : (value === null);\n}\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n    return !!maskSrcKey && (maskSrcKey in func);\n}\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n    var Ctor = value && value.constructor, proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n    return value === proto;\n}\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to process.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n    if (func != null) {\n        try {\n            return funcToString.call(func);\n        }\n        catch (e) {\n        }\n        try {\n            return (`${func}`);\n        }\n        catch (e) {\n        }\n    }\n    return '';\n}\n/**\n * This method is like `_.clone` except that it recursively clones `value`.\n *\n * @static\n * @memberOf _\n * @since 1.0.0\n * @category Lang\n * @param {*} value The value to recursively clone.\n * @returns {*} Returns the deep cloned value.\n * @see _.clone\n * @example\n *\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\n *\n * var deep = _.cloneDeep(objects);\n * console.log(deep[0] === objects[0]);\n * // => false\n */\nfunction cloneDeep(value) {\n    return baseClone(value, true, true);\n}\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n    return value === other || (value !== value && other !== other);\n}\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nfunction isArguments(value) {\n    // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n    return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&\n        (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);\n}\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n    return value != null && isLength(value.length) && !isFunction(value);\n}\n/**\n * This method is like `_.isArrayLike` except that it also checks if `value`\n * is an object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array-like object,\n *  else `false`.\n * @example\n *\n * _.isArrayLikeObject([1, 2, 3]);\n * // => true\n *\n * _.isArrayLikeObject(document.body.children);\n * // => true\n *\n * _.isArrayLikeObject('abc');\n * // => false\n *\n * _.isArrayLikeObject(_.noop);\n * // => false\n */\nfunction isArrayLikeObject(value) {\n    return isObjectLike(value) && isArrayLike(value);\n}\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n    // The use of `Object#toString` avoids issues with the `typeof` operator\n    // in Safari 8-9 which returns 'object' for typed array and other constructors.\n    var tag = isObject(value) ? objectToString.call(value) : '';\n    return tag == funcTag || tag == genTag;\n}\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n    return typeof value == 'number' &&\n        value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n    var type = typeof value;\n    return !!value && (type == 'object' || type == 'function');\n}\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n    return !!value && typeof value == 'object';\n}\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n    return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */\nfunction stubArray() {\n    return [];\n}\n/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n    return false;\n}\nexport { cloneDeep };\n", "import { CloudinaryImage } from \"../assets/CloudinaryImage.js\";\nimport { CloudinaryVideo } from \"../assets/CloudinaryVideo.js\";\nclass Cloudinary {\n    constructor(cloudinaryConfig) {\n        if (cloudinaryConfig) {\n            this.cloudinaryConfig = cloudinaryConfig;\n        }\n    }\n    image(publicID) {\n        return new CloudinaryImage(publicID, this.cloudinaryConfig.cloud, this.cloudinaryConfig.url);\n    }\n    video(publicID) {\n        return new CloudinaryVideo(publicID, this.cloudinaryConfig.cloud, this.cloudinaryConfig.url);\n    }\n    setConfig(cloudinaryConfig) {\n        this.cloudinaryConfig = cloudinaryConfig;\n        return this;\n    }\n    getConfig() {\n        return this.cloudinaryConfig;\n    }\n    extendConfig() {\n        // Future implementation\n    }\n}\nexport { Cloudinary };\n", "export const LEGACY_CONDITIONAL_OPERATORS = {\n    \"=\": 'eq',\n    \"!=\": 'ne',\n    \"<\": 'lt',\n    \">\": 'gt',\n    \"<=\": 'lte',\n    \">=\": 'gte',\n    \"&&\": 'and',\n    \"||\": 'or',\n    \"*\": \"mul\",\n    \"/\": \"div\",\n    \"+\": \"add\",\n    \"-\": \"sub\",\n    \"^\": \"pow\"\n};\nexport const CF_SHARED_CDN = \"d3jpl91pxevbkh.cloudfront.net\";\nexport const OLD_AKAMAI_SHARED_CDN = \"cloudinary-a.akamaihd.net\";\nexport const AKAMAI_SHARED_CDN = \"res.cloudinary.com\";\nexport const SHARED_CDN = AKAMAI_SHARED_CDN;\nexport const LEGACY_PREDEFINED_VARS = {\n    \"aspect_ratio\": \"ar\",\n    \"aspectRatio\": \"ar\",\n    \"current_page\": \"cp\",\n    \"currentPage\": \"cp\",\n    \"duration\": \"du\",\n    \"face_count\": \"fc\",\n    \"faceCount\": \"fc\",\n    \"height\": \"h\",\n    \"initial_aspect_ratio\": \"iar\",\n    \"initial_height\": \"ih\",\n    \"initial_width\": \"iw\",\n    \"initialAspectRatio\": \"iar\",\n    \"initialHeight\": \"ih\",\n    \"initialWidth\": \"iw\",\n    \"initial_duration\": \"idu\",\n    \"initialDuration\": \"idu\",\n    \"page_count\": \"pc\",\n    \"page_x\": \"px\",\n    \"page_y\": \"py\",\n    \"pageCount\": \"pc\",\n    \"pageX\": \"px\",\n    \"pageY\": \"py\",\n    \"tags\": \"tags\",\n    \"width\": \"w\"\n};\nexport const NUMBER_PATTERN = \"([0-9]*)\\\\.([0-9]+)|([0-9]+)\";\nexport const OFFSET_ANY_PATTERN = `(${NUMBER_PATTERN})([%pP])?`;\nexport const RANGE_VALUE_RE = RegExp(`^${OFFSET_ANY_PATTERN}$`);\nexport const OFFSET_ANY_PATTERN_RE = RegExp(`(${OFFSET_ANY_PATTERN})\\\\.\\\\.(${OFFSET_ANY_PATTERN})`);\nexport const LAYER_KEYWORD_PARAMS = {\n    font_weight: \"normal\",\n    font_style: \"normal\",\n    text_decoration: \"none\",\n    text_align: '',\n    stroke: \"none\"\n};\n", "/**\n * Converts string to snake case\n * @param {string} str\n */\nexport const snakeCase = (str) => str.replace(/[A-Z]/g, letter => `_${letter.toLowerCase()}`);\n", "import { cloneDeep } from '../internal/utils/cloneDeep.js';\nimport { isObject } from \"./utils/isObject.js\";\n/**\n * Class for defining account configuration options.\n * Depends on 'utils'\n */\n/**\n * Assign values from sources if they are not defined in the destination.\n * Once a value is set it does not change\n * @function Util.defaults\n * @param {Object} destination - the object to assign defaults to\n * @param sources\n * @param {...Object} source - the source object(s) to assign defaults from\n * @return {Object} destination after it was modified\n */\nconst useDefaultValues = (destination, ...sources) => {\n    return sources.reduce(function (dest, source) {\n        let key, value;\n        for (key in source) {\n            // @ts-ignore\n            value = source[key];\n            // @ts-ignore\n            if (dest[key] === void 0) {\n                // @ts-ignore\n                dest[key] = value;\n            }\n        }\n        return dest;\n    }, destination);\n};\n/**\n * Class for defining account configuration options.\n * @constructor Configuration\n * @param {Object} options - The account configuration parameters to set.\n * @see <a href=\"https://cloudinary.com/documentation/solution_overview#configuration_parameters\"\n *  target=\"_new\">Available configuration options</a>\n */\nclass Configuration {\n    constructor(options) {\n        this.configuration = options == null ? {} : cloneDeep(options);\n        useDefaultValues(this.configuration, DEFAULT_CONFIGURATION_PARAMS);\n    }\n    /**\n     * Initializes the configuration. This method is a convenience method that invokes both\n     *  {@link Configuration#fromEnvironment|fromEnvironment()} (Node.js environment only)\n     *  and {@link Configuration#fromDocument|fromDocument()}.\n     *  It first tries to retrieve the configuration from the environment variable.\n     *  If not available, it tries from the document meta tags.\n     * @function Configuration#init\n     * @return {Configuration} returns `this` for chaining\n     * @see fromDocument\n     * @see fromEnvironment\n     */\n    init() {\n        this.fromEnvironment();\n        this.fromDocument();\n        return this;\n    }\n    /**\n     * Set a new configuration item\n     * @function Configuration#set\n     * @param {string} name - the name of the item to set\n     * @param {*} value - the value to be set\n     * @return {Configuration}\n     *\n     */\n    set(name, value) {\n        // @ts-ignore\n        this.configuration[name] = value;\n        return this;\n    }\n    /**\n     * Get the value of a configuration item\n     * @function Configuration#get\n     * @param {string} name - the name of the item to set\n     * @return {*} the configuration item\n     */\n    get(name) {\n        return this.configuration[name];\n    }\n    merge(config) {\n        Object.assign(this.configuration, cloneDeep(config));\n        return this;\n    }\n    /**\n     * Initialize Cloudinary from HTML meta tags.\n     * @function Configuration#fromDocument\n     * @return {Configuration}\n     * @example <meta name=\"cloudinary_cloud_name\" content=\"mycloud\">\n     *\n     */\n    fromDocument() {\n        var el, i, len, meta_elements;\n        meta_elements = typeof document !== \"undefined\" && document !== null ? document.querySelectorAll('meta[name^=\"cloudinary_\"]') : void 0;\n        if (meta_elements) {\n            for (i = 0, len = meta_elements.length; i < len; i++) {\n                el = meta_elements[i];\n                this.configuration[el.getAttribute('name').replace('cloudinary_', '')] = el.getAttribute('content');\n            }\n        }\n        return this;\n    }\n    /**\n     * Initialize Cloudinary from the `CLOUDINARY_URL` environment variable.\n     *\n     * This function will only run under Node.js environment.\n     * @function Configuration#fromEnvironment\n     * @requires Node.js\n     */\n    fromEnvironment() {\n        var cloudinary_url, query, uri, uriRegex;\n        if (typeof process !== \"undefined\" && process !== null && process.env && process.env.CLOUDINARY_URL) {\n            cloudinary_url = process.env.CLOUDINARY_URL;\n            uriRegex = /cloudinary:\\/\\/(?:(\\w+)(?:\\:([\\w-]+))?@)?([\\w\\.-]+)(?:\\/([^?]*))?(?:\\?(.+))?/;\n            uri = uriRegex.exec(cloudinary_url);\n            if (uri) {\n                if (uri[3] != null) {\n                    this.configuration['cloud_name'] = uri[3];\n                }\n                if (uri[1] != null) {\n                    this.configuration['api_key'] = uri[1];\n                }\n                if (uri[2] != null) {\n                    this.configuration['api_secret'] = uri[2];\n                }\n                if (uri[4] != null) {\n                    this.configuration['private_cdn'] = uri[4] != null;\n                }\n                if (uri[4] != null) {\n                    this.configuration['secure_distribution'] = uri[4];\n                }\n                query = uri[5];\n                if (query != null) {\n                    query.split('&').forEach(value => {\n                        let [k, v] = value.split('=');\n                        if (v == null) {\n                            // @ts-ignore\n                            v = true;\n                        }\n                        this.configuration[k] = v;\n                    });\n                }\n            }\n        }\n        return this;\n    }\n    /**\n     * Create or modify the Cloudinary client configuration\n     *\n     * Warning: `config()` returns the actual internal configuration object. modifying it will change the configuration.\n     *\n     * This is a backward compatibility method. For new code, use get(), merge() etc.\n     * @function Configuration#config\n     * @param {hash|string|boolean} new_config\n     * @param {string} new_value\n     * @returns {*} configuration, or value\n     *\n     * @see {@link fromEnvironment} for initialization using environment variables\n     * @see {@link fromDocument} for initialization using HTML meta tags\n     */\n    config(new_config, new_value) {\n        switch (false) {\n            case new_value === void 0:\n                this.set(new_config, new_value);\n                return this.configuration;\n            case typeof new_config != 'string':\n                return this.get(new_config);\n            case !isObject(new_config):\n                this.merge(new_config);\n                return this.configuration;\n            default:\n                // Backward compatibility - return the internal object\n                return this.configuration;\n        }\n    }\n    /**\n     * Returns a copy of the configuration parameters\n     * @function Configuration#toOptions\n     * @returns {Object} a key:value collection of the configuration parameters\n     */\n    toOptions() {\n        return cloneDeep(this.configuration);\n    }\n}\nconst DEFAULT_CONFIGURATION_PARAMS = {\n    responsive_class: 'cld-responsive',\n    responsive_use_breakpoints: true,\n    round_dpr: true,\n    secure: (typeof window !== \"undefined\" && window !== null ? window.location ? window.location.protocol : void 0 : void 0) === 'https:'\n};\nexport const CONFIG_PARAMS = [\n    \"api_key\",\n    \"api_secret\",\n    \"callback\",\n    \"cdn_subdomain\",\n    \"cloud_name\",\n    \"cname\",\n    \"private_cdn\",\n    \"protocol\",\n    \"resource_type\",\n    \"responsive\",\n    \"responsive_class\",\n    \"responsive_use_breakpoints\",\n    \"responsive_width\",\n    \"round_dpr\",\n    \"secure\",\n    \"secure_cdn_subdomain\",\n    \"secure_distribution\",\n    \"shorten\",\n    \"type\",\n    \"upload_preset\",\n    \"url_suffix\",\n    \"use_root_path\",\n    \"version\",\n    \"externalLibraries\",\n    \"max_timeout_ms\"\n];\nexport default Configuration;\n", "/**\n * Create a copy of the source object with all keys in camelCase\n * @function Util.withCamelCaseKeys\n * @return {Object} a new object\n * @param source\n */\nimport { isEmpty } from \"./isEmpty.js\";\nexport const withCamelCaseKeys = function (source) {\n    return convertKeys(source, camelCase);\n};\n/**\n * Convert string to camelCase\n * @function Util.camelCase\n * @param {string} source - the string to convert\n * @return {string} in camelCase format\n */\nexport const camelCase = function (source) {\n    let words = source.match(reWords);\n    words = words.map(word => word.charAt(0).toLocaleUpperCase() + word.slice(1).toLocaleLowerCase());\n    words[0] = words[0].toLocaleLowerCase();\n    return words.join('');\n};\n/**\n * Creates a new object from source, with the keys transformed using the converter.\n * @param {object} source\n * @param {function|null} converter\n * @returns {object}\n */\nexport var convertKeys = function (source, converter) {\n    var result, value;\n    result = {};\n    for (let key in source) {\n        value = source[key];\n        if (converter) {\n            key = converter(key);\n        }\n        if (!isEmpty(key)) {\n            // @ts-ignore\n            result[key] = value;\n        }\n    }\n    return result;\n};\nexport var reWords = (function () {\n    var lower, upper;\n    upper = '[A-Z]';\n    lower = '[a-z]+';\n    return RegExp(upper + '+(?=' + upper + lower + ')|' + upper + '?' + lower + '|' + upper + '+|[0-9]+', 'g');\n})();\nexport function identity(x) {\n    return x;\n}\nexport function contains(a, obj) {\n    for (let i = 0; i < a.length; i++) {\n        if (a[i] === obj) {\n            return true;\n        }\n    }\n    return false;\n}\nexport function difference(arr1, arr2) {\n    return arr1.filter(x => !arr2.includes(x));\n}\n", "import Condition from './condition.js';\nimport { CONFIG_PARAMS } from './configuration.js';\nimport { cloneDeep } from '../internal/utils/cloneDeep.js';\nimport { camelCase, contains, difference, } from \"./utils/legacyBaseUtil.js\";\nimport { snakeCase } from \"./utils/snakeCase.js\";\nimport Expression from './expression.js';\nimport Layer from './legacyLayer/layer.js';\nimport TextLayer from './legacyLayer/textlayer.js';\nimport SubtitlesLayer from './legacyLayer/subtitleslayer.js';\nimport FetchLayer from './legacyLayer/fetchlayer.js';\nimport { isObject } from \"./utils/isObject.js\";\nimport { isString } from \"../internal/utils/dataStructureUtils.js\";\nimport { isEmpty } from \"./utils/isEmpty.js\";\nimport { isFunction } from \"./utils/isFunction.js\";\nimport { identity, withCamelCaseKeys } from \"./utils/legacyBaseUtil.js\";\n/**\n * A list of keys used by the url() function.\n * @private\n */\nexport const URL_KEYS = [\n    'accessibility',\n    'api_secret',\n    'auth_token',\n    'cdn_subdomain',\n    'cloud_name',\n    'cname',\n    'format',\n    'placeholder',\n    'private_cdn',\n    'resource_type',\n    'secure',\n    'secure_cdn_subdomain',\n    'secure_distribution',\n    'shorten',\n    'sign_url',\n    'signature',\n    'ssl_detected',\n    'type',\n    'url_suffix',\n    'use_root_path',\n    'version'\n];\n/**\n * Assign key, value to target, when value is not null.<br>\n *   This function mutates the target!\n * @param {object} target the object to assign the values to\n * @param {object} sources one or more objects to get values from\n * @returns {object} the target after the assignment\n */\nfunction assignNotNull(target, ...sources) {\n    sources.forEach(source => {\n        Object.keys(source).forEach(key => {\n            // @ts-ignore\n            if (source[key] != null) {\n                // @ts-ignore\n                target[key] = source[key];\n            }\n        });\n    });\n    return target;\n}\n/**\n * Return true if all items in list are strings\n * @function Util.allString\n * @param {Array} list - an array of items\n */\nconst allStrings = function (list) {\n    return list.length && list.every(isString);\n};\n/**\n * Transformation parameters\n * Depends on 'util', 'transformation'\n */\nclass Param {\n    /**\n     * Represents a single parameter.\n     * @class Param\n     * @param {string} name - The name of the parameter in snake_case\n     * @param {string} shortName - The name of the serialized form of the parameter.\n     *                         If a value is not provided, the parameter will not be serialized.\n     * @param {function} [process=Util.identity ] - Manipulate origValue when value is called\n     * @ignore\n     */\n    constructor(name, shortName, process = identity) {\n        /**\n         * The name of the parameter in snake_case\n         * @member {string} Param#name\n         */\n        this.name = name;\n        /**\n         * The name of the serialized form of the parameter\n         * @member {string} Param#shortName\n         */\n        this.shortName = shortName;\n        /**\n         * Manipulate origValue when value is called\n         * @member {function} Param#process\n         */\n        this.process = process;\n    }\n    /**\n     * Set a (unprocessed) value for this parameter\n     * @function Param#set\n     * @param {*} origValue - the value of the parameter\n     * @return {Param} self for chaining\n     */\n    set(origValue) {\n        this.origValue = origValue;\n        return this;\n    }\n    /**\n     * Generate the serialized form of the parameter\n     * @function Param#serialize\n     * @return {string} the serialized form of the parameter\n     */\n    serialize() {\n        var val, valid;\n        val = this.value();\n        valid = Array.isArray(val) || isObject(val) || isString(val) ? !isEmpty(val) : val != null;\n        if ((this.shortName != null) && valid) {\n            return `${this.shortName}_${val}`;\n        }\n        else {\n            return '';\n        }\n    }\n    /**\n     * Return the processed value of the parameter\n     * @function Param#value\n     */\n    value() {\n        return this.process(this.origValue);\n    }\n    static norm_color(value) {\n        return value != null ? value.replace(/^#/, 'rgb:') : void 0;\n    }\n    static build_array(arg) {\n        if (arg == null) {\n            return [];\n        }\n        else if (Array.isArray(arg)) {\n            return arg;\n        }\n        else {\n            return [arg];\n        }\n    }\n    /**\n     * Covert value to video codec string.\n     *\n     * If the parameter is an object,\n     * @param {(string|Object)} param - the video codec as either a String or a Hash\n     * @return {string} the video codec string in the format codec:profile:level\n     * @example\n     * vc_[ :profile : [level]]\n     * or\n     { codec: 'h264', profile: 'basic', level: '3.1' }\n     * @ignore\n     */\n    static process_video_params(param) {\n        var video;\n        switch (param.constructor) {\n            case Object:\n                video = \"\";\n                if ('codec' in param) {\n                    video = param.codec;\n                    if ('profile' in param) {\n                        video += \":\" + param.profile;\n                        if ('level' in param) {\n                            video += \":\" + param.level;\n                        }\n                    }\n                }\n                return video;\n            case String:\n                return param;\n            default:\n                return null;\n        }\n    }\n}\nclass ArrayParam extends Param {\n    /**\n     * A parameter that represents an array.\n     * @param {string} name - The name of the parameter in snake_case.\n     * @param {string} shortName - The name of the serialized form of the parameter\n     *                         If a value is not provided, the parameter will not be serialized.\n     * @param {string} [sep='.'] - The separator to use when joining the array elements together\n     * @param {function} [process=Util.identity ] - Manipulate origValue when value is called\n     * @class ArrayParam\n     * @extends Param\n     * @ignore\n     */\n    constructor(name, shortName, sep = '.', process = undefined) {\n        super(name, shortName, process);\n        this.sep = sep;\n    }\n    serialize() {\n        if (this.shortName != null) {\n            let arrayValue = this.value();\n            if (isEmpty(arrayValue)) {\n                return '';\n            }\n            else if (isString(arrayValue)) {\n                return `${this.shortName}_${arrayValue}`;\n            }\n            else {\n                let flat = arrayValue.map((t) => isFunction(t.serialize) ? t.serialize() : t).join(this.sep);\n                return `${this.shortName}_${flat}`;\n            }\n        }\n        else {\n            return '';\n        }\n    }\n    value() {\n        if (Array.isArray(this.origValue)) {\n            return this.origValue.map(v => this.process(v));\n        }\n        else {\n            return this.process(this.origValue);\n        }\n    }\n    set(origValue) {\n        if ((origValue == null) || Array.isArray(origValue)) {\n            return super.set(origValue);\n        }\n        else {\n            return super.set([origValue]);\n        }\n    }\n}\nclass TransformationParam extends Param {\n    /**\n     * A parameter that represents a transformation\n     * @param {string} name - The name of the parameter in snake_case\n     * @param {string} [shortName='t'] - The name of the serialized form of the parameter\n     * @param {string} [sep='.'] - The separator to use when joining the array elements together\n     * @param {function} [process=Util.identity ] - Manipulate origValue when value is called\n     * @class TransformationParam\n     * @extends Param\n     * @ignore\n     */\n    constructor(name, shortName = \"t\", sep = '.', process = undefined) {\n        super(name, shortName, process);\n        this.sep = sep;\n    }\n    /**\n     * Generate string representations of the transformation.\n     * @returns {*} Returns either the transformation as a string, or an array of string representations.\n     */\n    serialize() {\n        let result = '';\n        const val = this.value();\n        if (isEmpty(val)) {\n            return result;\n        }\n        // val is an array of strings so join them\n        if (allStrings(val)) {\n            const joined = val.join(this.sep); // creates t1.t2.t3 in case multiple named transformations were configured\n            if (!isEmpty(joined)) {\n                // in case options.transformation was not set with an empty string (val != ['']);\n                result = `${this.shortName}_${joined}`;\n            }\n        }\n        else { // Convert val to an array of strings\n            result = val.map((t) => {\n                if (isString(t) && !isEmpty(t)) {\n                    return `${this.shortName}_${t}`;\n                }\n                if (isFunction(t.serialize)) {\n                    return t.serialize();\n                }\n                if (isObject(t) && !isEmpty(t)) {\n                    return new Transformation(t).serialize();\n                }\n                return undefined;\n            }).filter((t) => t);\n        }\n        return result;\n    }\n    set(origValue1) {\n        this.origValue = origValue1;\n        if (Array.isArray(this.origValue)) {\n            return super.set(this.origValue);\n        }\n        else {\n            return super.set([this.origValue]);\n        }\n    }\n}\nconst number_pattern = \"([0-9]*)\\\\.([0-9]+)|([0-9]+)\";\nconst offset_any_pattern = \"(\" + number_pattern + \")([%pP])?\";\nclass RangeParam extends Param {\n    /**\n     * A parameter that represents a range\n     * @param {string} name - The name of the parameter in snake_case\n     * @param {string} shortName - The name of the serialized form of the parameter\n     *                         If a value is not provided, the parameter will not be serialized.\n     * @param {function} [process=norm_range_value ] - Manipulate origValue when value is called\n     * @class RangeParam\n     * @extends Param\n     * @ignore\n     */\n    constructor(name, shortName, process = RangeParam.norm_range_value) {\n        super(name, shortName, process);\n    }\n    static norm_range_value(value) {\n        let offset = String(value).match(new RegExp('^' + offset_any_pattern + '$'));\n        if (offset) {\n            let modifier = offset[5] != null ? 'p' : '';\n            value = (offset[1] || offset[4]) + modifier;\n        }\n        return value;\n    }\n}\nclass RawParam extends Param {\n    constructor(name, shortName, process = identity) {\n        super(name, shortName, process);\n    }\n    serialize() {\n        return this.value();\n    }\n}\nclass LayerParam extends Param {\n    // Parse layer options\n    // @return [string] layer transformation string\n    // @private\n    value() {\n        if (this.origValue == null) {\n            return '';\n        }\n        let result;\n        if (this.origValue instanceof Layer) {\n            result = this.origValue;\n        }\n        else if (isObject(this.origValue)) {\n            let layerOptions = withCamelCaseKeys(this.origValue);\n            // @ts-ignore\n            if (layerOptions.resourceType === \"text\" || (layerOptions.text != null)) {\n                result = new TextLayer(layerOptions);\n            }\n            else { // @ts-ignore\n                if (layerOptions.resourceType === \"subtitles\") {\n                    result = new SubtitlesLayer(layerOptions);\n                }\n                else { // @ts-ignore\n                    if (layerOptions.resourceType === \"fetch\" || (layerOptions.url != null)) {\n                        result = new FetchLayer(layerOptions);\n                    }\n                    else {\n                        result = new Layer(layerOptions);\n                    }\n                }\n            }\n        }\n        else if (isString(this.origValue)) {\n            if (/^fetch:.+/.test(this.origValue)) {\n                result = new FetchLayer(this.origValue.substr(6));\n            }\n            else {\n                result = this.origValue;\n            }\n        }\n        else {\n            result = '';\n        }\n        return result.toString();\n    }\n    static textStyle(layer) {\n        return (new TextLayer(layer)).textStyleIdentifier();\n    }\n}\n/**\n * TransformationBase\n * Depends on 'configuration', 'parameters','util'\n * @internal\n */\nclass TransformationBase {\n    /**\n     * The base class for transformations.\n     * Members of this class are documented as belonging to the {@link Transformation} class for convenience.\n     * @class TransformationBase\n     */\n    constructor(options) {\n        /** @private */\n        /** @private */\n        let parent;\n        let trans;\n        parent = void 0;\n        trans = {};\n        /**\n         * Return an options object that can be used to create an identical Transformation\n         * @function Transformation#toOptions\n         * @return {Object} Returns a plain object representing this transformation\n         */\n        this.toOptions = (withChain) => {\n            let opt = {};\n            if (withChain == null) {\n                withChain = true;\n            }\n            // @ts-ignore\n            Object.keys(trans).forEach(key => opt[key] = trans[key].origValue);\n            assignNotNull(opt, this.otherOptions);\n            if (withChain && !isEmpty(this.chained)) {\n                let list = this.chained.map((tr) => tr.toOptions());\n                list.push(opt);\n                opt = {};\n                assignNotNull(opt, this.otherOptions);\n                // @ts-ignore\n                opt.transformation = list;\n            }\n            return opt;\n        };\n        /**\n         * Set a parent for this object for chaining purposes.\n         *\n         * @function Transformation#setParent\n         * @param {Object} object - the parent to be assigned to\n         * @returns {Transformation} Returns this instance for chaining purposes.\n         */\n        this.setParent = (object) => {\n            parent = object;\n            if (object != null) {\n                // @ts-ignore\n                this.fromOptions(typeof object.toOptions === \"function\" ? object.toOptions() : void 0);\n            }\n            return this;\n        };\n        /**\n         * Returns the parent of this object in the chain\n         * @function Transformation#getParent\n         * @protected\n         * @return {Object} Returns the parent of this object if there is any\n         */\n        this.getParent = () => {\n            return parent;\n        };\n        // Helper methods to create parameter methods\n        // These methods are defined here because they access `trans` which is\n        // a private member of `TransformationBase`\n        /** @protected */\n        this.param = (value, name, abbr, defaultValue, process) => {\n            if (process == null) {\n                if (isFunction(defaultValue)) {\n                    process = defaultValue;\n                }\n                else {\n                    process = identity;\n                }\n            }\n            // @ts-ignore\n            trans[name] = new Param(name, abbr, process).set(value);\n            return this;\n        };\n        /** @protected */\n        this.rawParam = function (value, name, abbr, defaultValue, process) {\n            process = lastArgCallback(arguments);\n            // @ts-ignore\n            trans[name] = new RawParam(name, abbr, process).set(value);\n            return this;\n        };\n        /** @protected */\n        this.rangeParam = function (value, name, abbr, defaultValue, process) {\n            process = lastArgCallback(arguments);\n            // @ts-ignore\n            trans[name] = new RangeParam(name, abbr, process).set(value);\n            return this;\n        };\n        /** @protected */\n        this.arrayParam = function (value, name, abbr, sep = \":\", defaultValue = [], process = undefined) {\n            process = lastArgCallback(arguments);\n            // @ts-ignore\n            trans[name] = new ArrayParam(name, abbr, sep, process).set(value);\n            return this;\n        };\n        /** @protected */\n        this.transformationParam = function (value, name, abbr, sep = \".\", defaultValue = undefined, process = undefined) {\n            process = lastArgCallback(arguments);\n            // @ts-ignore\n            trans[name] = new TransformationParam(name, abbr, sep, process).set(value);\n            return this;\n        };\n        this.layerParam = function (value, name, abbr) {\n            // @ts-ignore\n            trans[name] = new LayerParam(name, abbr).set(value);\n            return this;\n        };\n        // End Helper methods\n        /**\n         * Get the value associated with the given name.\n         * Get the value associated with the given name.\n         * @function Transformation#getValue\n         * @param {string} name - the name of the parameter\n         * @return {*} the processed value associated with the given name\n         * @description Use {@link get}.origValue for the value originally provided for the parameter\n         */\n        this.getValue = function (name) {\n            // @ts-ignore\n            let value = trans[name] && trans[name].value();\n            return value != null ? value : this.otherOptions[name];\n        };\n        /**\n         * Get the parameter object for the given parameter name\n         * @function Transformation#get\n         * @param {string} name the name of the transformation parameter\n         * @returns {Param} the param object for the given name, or undefined\n         */\n        this.get = function (name) {\n            // @ts-ignore\n            return trans[name];\n        };\n        /**\n         * Remove a transformation option from the transformation.\n         * @function Transformation#remove\n         * @param {string} name - the name of the option to remove\n         * @return {*} Returns the option that was removed or null if no option by that name was found. The type of the\n         *              returned value depends on the value.\n         */\n        this.remove = function (name) {\n            var temp;\n            switch (false) {\n                // @ts-ignore\n                case trans[name] == null:\n                    // @ts-ignore\n                    temp = trans[name];\n                    // @ts-ignore\n                    delete trans[name];\n                    return temp.origValue;\n                case this.otherOptions[name] == null:\n                    temp = this.otherOptions[name];\n                    delete this.otherOptions[name];\n                    return temp;\n                default:\n                    return null;\n            }\n        };\n        /**\n         * Return an array of all the keys (option names) in the transformation.\n         * @return {Array<string>} the keys in snakeCase format\n         */\n        this.keys = function () {\n            var key;\n            return ((function () {\n                var results;\n                results = [];\n                for (key in trans) {\n                    if (key != null) {\n                        results.push(key.match(VAR_NAME_RE) ? key : snakeCase(key));\n                    }\n                }\n                return results;\n            })()).sort();\n        };\n        /**\n         * Returns a plain object representation of the transformation. Values are processed.\n         * @function Transformation#toPlainObject\n         * @return {Object} the transformation options as plain object\n         */\n        this.toPlainObject = function () {\n            var hash, key, list;\n            hash = {};\n            for (key in trans) {\n                // @ts-ignore\n                hash[key] = trans[key].value();\n                // @ts-ignore\n                if (isObject(hash[key])) {\n                    // @ts-ignore\n                    hash[key] = cloneDeep(hash[key]);\n                }\n            }\n            if (!isEmpty(this.chained)) {\n                list = this.chained.map((tr) => tr.toPlainObject());\n                list.push(hash);\n                hash = {\n                    transformation: list\n                };\n            }\n            return hash;\n        };\n        /**\n         * Complete the current transformation and chain to a new one.\n         * In the URL, transformations are chained together by slashes.\n         * @function Transformation#chain\n         * @return {Transformation} Returns this transformation for chaining\n         * @example\n         * var tr = cloudinary.Transformation.new();\n         * tr.width(10).crop('fit').chain().angle(15).serialize()\n         * // produces \"c_fit,w_10/a_15\"\n         */\n        this.chain = function () {\n            var names, tr;\n            names = Object.getOwnPropertyNames(trans);\n            if (names.length !== 0) {\n                tr = new this.constructor(this.toOptions(false));\n                this.resetTransformations();\n                this.chained.push(tr);\n            }\n            return this;\n        };\n        this.resetTransformations = function () {\n            trans = {};\n            return this;\n        };\n        this.otherOptions = {};\n        this.chained = [];\n        this.fromOptions(options);\n    }\n    /**\n     * Merge the provided options with own's options\n     * @param {Object} [options={}] key-value list of options\n     * @returns {Transformation} Returns this instance for chaining\n     */\n    fromOptions(options = {}) {\n        if (options instanceof TransformationBase) {\n            this.fromTransformation(options);\n        }\n        else {\n            if (isString(options) || Array.isArray(options)) {\n                options = {\n                    transformation: options\n                };\n            }\n            options = cloneDeep(options);\n            // Handling of \"if\" statements precedes other options as it creates a chained transformation\n            // @ts-ignore\n            if (options[\"if\"]) {\n                // @ts-ignore\n                this.set(\"if\", options[\"if\"]);\n                // @ts-ignore\n                delete options[\"if\"];\n            }\n            for (let key in options) {\n                // @ts-ignore\n                let opt = options[key];\n                if (opt != null) {\n                    if (key.match(VAR_NAME_RE)) {\n                        if (key !== '$attr') {\n                            this.set('variable', key, opt);\n                        }\n                    }\n                    else {\n                        this.set(key, opt);\n                    }\n                }\n            }\n        }\n        return this;\n    }\n    fromTransformation(other) {\n        if (other instanceof TransformationBase) {\n            other.keys().forEach(key => this.set(key, other.get(key).origValue));\n        }\n        return this;\n    }\n    /**\n     * Set a parameter.\n     * The parameter name `key` is converted to\n     * @param {string} key - the name of the parameter\n     * @param {*} values - the value of the parameter\n     * @returns {Transformation} Returns this instance for chaining\n     */\n    set(key, ...values) {\n        let camelKey;\n        camelKey = camelCase(key);\n        if (contains(methods, camelKey)) {\n            // @ts-ignore\n            this[camelKey].apply(this, values);\n        }\n        else {\n            this.otherOptions[key] = values[0];\n        }\n        return this;\n    }\n    hasLayer() {\n        return this.getValue(\"overlay\") || this.getValue(\"underlay\");\n    }\n    /**\n     * Generate a string representation of the transformation.\n     * @function Transformation#serialize\n     * @return {string} Returns the transformation as a string\n     */\n    serialize() {\n        var ifParam, j, len, paramList, ref, ref1, ref2, ref3, ref4, resultArray, t, transformationList, transformationString, transformations, value, variables, vars;\n        resultArray = this.chained.map((tr) => tr.serialize());\n        paramList = this.keys();\n        transformations = (ref = this.get(\"transformation\")) != null ? ref.serialize() : void 0;\n        ifParam = (ref1 = this.get(\"if\")) != null ? ref1.serialize() : void 0;\n        variables = processVar((ref2 = this.get(\"variables\")) != null ? ref2.value() : void 0);\n        paramList = difference(paramList, [\"transformation\", \"if\", \"variables\"]);\n        vars = [];\n        transformationList = [];\n        for (j = 0, len = paramList.length; j < len; j++) {\n            t = paramList[j];\n            if (t.match(VAR_NAME_RE)) {\n                vars.push(t + \"_\" + Expression.normalize((ref3 = this.get(t)) != null ? ref3.value() : void 0));\n            }\n            else {\n                transformationList.push((ref4 = this.get(t)) != null ? ref4.serialize() : void 0);\n            }\n        }\n        switch (false) {\n            case !isString(transformations):\n                transformationList.push(transformations);\n                break;\n            case !Array.isArray(transformations):\n                resultArray = resultArray.concat(transformations);\n        }\n        transformationList = (function () {\n            var k, len1, results;\n            results = [];\n            for (k = 0, len1 = transformationList.length; k < len1; k++) {\n                value = transformationList[k];\n                if (Array.isArray(value) && !isEmpty(value) || !Array.isArray(value) && value) {\n                    results.push(value);\n                }\n            }\n            return results;\n        })();\n        transformationList = vars.sort().concat(variables).concat(transformationList.sort());\n        if (ifParam === \"if_end\") {\n            transformationList.push(ifParam);\n        }\n        else if (!isEmpty(ifParam)) {\n            transformationList.unshift(ifParam);\n        }\n        transformationString = (transformationList).filter(x => !!x).join(param_separator);\n        if (!isEmpty(transformationString)) {\n            resultArray.push(transformationString);\n        }\n        return (resultArray).filter((x) => !!x).join(trans_separator);\n    }\n    /**\n     * Provide a list of all the valid transformation option names\n     * @function Transformation#listNames\n     * @private\n     * @return {Array<string>} a array of all the valid option names\n     */\n    static listNames() {\n        return methods;\n    }\n    /**\n     * Returns the attributes for an HTML tag.\n     * @function Cloudinary.toHtmlAttributes\n     * @return PlainObject\n     */\n    toHtmlAttributes() {\n        let attrName, height, options, ref2, ref3, value, width;\n        options = {};\n        let snakeCaseKey;\n        Object.keys(this.otherOptions).forEach(key => {\n            value = this.otherOptions[key];\n            snakeCaseKey = snakeCase(key);\n            if (!contains(PARAM_NAMES, snakeCaseKey) && !contains(URL_KEYS, snakeCaseKey)) {\n                attrName = /^html_/.test(key) ? key.slice(5) : key;\n                options[attrName] = value;\n            }\n        });\n        // convert all \"html_key\" to \"key\" with the same value\n        this.keys().forEach(key => {\n            if (/^html_/.test(key)) {\n                options[camelCase(key.slice(5))] = this.getValue(key);\n            }\n        });\n        if (!(this.hasLayer() || this.getValue(\"angle\") || contains([\"fit\", \"limit\", \"lfill\"], this.getValue(\"crop\")))) {\n            width = (ref2 = this.get(\"width\")) != null ? ref2.origValue : void 0;\n            height = (ref3 = this.get(\"height\")) != null ? ref3.origValue : void 0;\n            if (parseFloat(width) >= 1.0) {\n                if (options.width == null) {\n                    options.width = width;\n                }\n            }\n            if (parseFloat(height) >= 1.0) {\n                if (options.height == null) {\n                    options.height = height;\n                }\n            }\n        }\n        return options;\n    }\n    static isValidParamName(name) {\n        return methods.indexOf(camelCase(name)) >= 0;\n    }\n    /**\n     * Delegate to the parent (up the call chain) to produce HTML\n     * @function Transformation#toHtml\n     * @return {string} HTML representation of the parent if possible.\n     * @example\n     * tag = cloudinary.ImageTag.new(\"sample\", {cloud_name: \"demo\"})\n     * // ImageTag {name: \"img\", publicId: \"sample\"}\n     * tag.toHtml()\n     * // <img src=\"http://res.cloudinary.com/demo/image/upload/sample\">\n     * tag.transformation().crop(\"fit\").width(300).toHtml()\n     * // <img src=\"http://res.cloudinary.com/demo/image/upload/c_fit,w_300/sample\">\n     */\n    toHtml() {\n        var ref;\n        return (ref = this.getParent()) != null ? typeof ref.toHtml === \"function\" ? ref.toHtml() : void 0 : void 0;\n    }\n    toString() {\n        return this.serialize();\n    }\n    clone() {\n        return new TransformationBase(this.toOptions(true));\n    }\n}\nconst VAR_NAME_RE = /^\\$[a-zA-Z0-9]+$/;\nconst trans_separator = '/';\nconst param_separator = ',';\nfunction lastArgCallback(args) {\n    var callback;\n    callback = args != null ? args[args.length - 1] : void 0;\n    if (isFunction(callback)) {\n        return callback;\n    }\n    else {\n        return void 0;\n    }\n}\nfunction processVar(varArray) {\n    var j, len, name, results, v;\n    if (Array.isArray(varArray)) {\n        results = [];\n        for (j = 0, len = varArray.length; j < len; j++) {\n            [name, v] = varArray[j];\n            results.push(`${name}_${Expression.normalize(v)}`);\n        }\n        return results;\n    }\n    else {\n        return varArray;\n    }\n}\n// @ts-ignore\nfunction processCustomFunction({ function_type, source }) {\n    if (function_type === 'remote') {\n        return [function_type, btoa(source)].join(\":\");\n    }\n    else if (function_type === 'wasm') {\n        return [function_type, source].join(\":\");\n    }\n}\n/**\n * Transformation Class methods.\n * This is a list of the parameters defined in Transformation.\n * Values are camelCased.\n * @const Transformation.methods\n * @private\n * @ignore\n * @type {Array<string>}\n */\n/**\n * Parameters that are filtered out before passing the options to an HTML tag.\n *\n * The list of parameters is a combination of `Transformation::methods` and `Configuration::CONFIG_PARAMS`\n * @const {Array<string>} Transformation.PARAM_NAMES\n * @private\n * @ignore\n * @see toHtmlAttributes\n */\nclass Transformation extends TransformationBase {\n    /**\n     * Represents a single transformation.\n     * @class Transformation\n     * @example\n     * t = new cloudinary.Transformation();\n     * t.angle(20).crop(\"scale\").width(\"auto\");\n     *\n     * // or\n     *\n     * t = new cloudinary.Transformation( {angle: 20, crop: \"scale\", width: \"auto\"});\n     * @see <a href=\"https://cloudinary.com/documentation/image_transformation_reference\"\n     *  target=\"_blank\">Available image transformations</a>\n     * @see <a href=\"https://cloudinary.com/documentation/video_transformation_reference\"\n     *  target=\"_blank\">Available video transformations</a>\n     */\n    constructor(options) {\n        super(options);\n    }\n    /**\n     * Convenience constructor\n     * @param {Object} options\n     * @return {Transformation}\n     * @example cl = cloudinary.Transformation.new( {angle: 20, crop: \"scale\", width: \"auto\"})\n     */\n    static new(options) {\n        return new Transformation(options);\n    }\n    /*\n      Transformation Parameters\n    */\n    angle(value) {\n        this.arrayParam(value, \"angle\", \"a\", \".\", Expression.normalize);\n        return this;\n    }\n    audioCodec(value) {\n        this.param(value, \"audio_codec\", \"ac\");\n        return this;\n    }\n    audioFrequency(value) {\n        this.param(value, \"audio_frequency\", \"af\");\n        return this;\n    }\n    aspectRatio(value) {\n        this.param(value, \"aspect_ratio\", \"ar\", Expression.normalize);\n        return this;\n    }\n    background(value) {\n        this.param(value, \"background\", \"b\", Param.norm_color);\n        return this;\n    }\n    bitRate(value) {\n        this.param(value, \"bit_rate\", \"br\");\n        return this;\n    }\n    border(value) {\n        return this.param(value, \"border\", \"bo\", (border) => {\n            if (isObject(border)) {\n                border = Object.assign({}, {\n                    color: \"black\",\n                    width: 2\n                }, border);\n                return `${border.width}px_solid_${Param.norm_color(border.color)}`;\n            }\n            else {\n                return border;\n            }\n        });\n    }\n    color(value) {\n        this.param(value, \"color\", \"co\", Param.norm_color);\n        return this;\n    }\n    colorSpace(value) {\n        this.param(value, \"color_space\", \"cs\");\n        return this;\n    }\n    crop(value) {\n        this.param(value, \"crop\", \"c\");\n        return this;\n    }\n    customFunction(value) {\n        return this.param(value, \"custom_function\", \"fn\", () => {\n            return processCustomFunction(value);\n        });\n    }\n    customPreFunction(value) {\n        if (this.get('custom_function')) {\n            return;\n        }\n        return this.rawParam(value, \"custom_function\", \"\", () => {\n            value = processCustomFunction(value);\n            return value ? `fn_pre:${value}` : value;\n        });\n    }\n    defaultImage(value) {\n        this.param(value, \"default_image\", \"d\");\n        return this;\n    }\n    delay(value) {\n        this.param(value, \"delay\", \"dl\");\n        return this;\n    }\n    density(value) {\n        this.param(value, \"density\", \"dn\");\n        return this;\n    }\n    duration(value) {\n        this.rangeParam(value, \"duration\", \"du\");\n        return this;\n    }\n    dpr(value) {\n        return this.param(value, \"dpr\", \"dpr\", (dpr) => {\n            dpr = dpr.toString();\n            if (dpr != null ? dpr.match(/^\\d+$/) : void 0) {\n                return dpr + \".0\";\n            }\n            else {\n                return Expression.normalize(dpr);\n            }\n        });\n    }\n    effect(value) {\n        this.arrayParam(value, \"effect\", \"e\", \":\", Expression.normalize);\n        return this;\n    }\n    else() {\n        return this.if('else');\n    }\n    endIf() {\n        return this.if('end');\n    }\n    endOffset(value) {\n        this.rangeParam(value, \"end_offset\", \"eo\");\n        return this;\n    }\n    fallbackContent(value) {\n        this.param(value, \"fallback_content\");\n        return this;\n    }\n    fetchFormat(value) {\n        this.param(value, \"fetch_format\", \"f\");\n        return this;\n    }\n    format(value) {\n        this.param(value, \"format\");\n        return this;\n    }\n    flags(value) {\n        this.arrayParam(value, \"flags\", \"fl\", \".\");\n        return this;\n    }\n    gravity(value) {\n        this.param(value, \"gravity\", \"g\");\n        return this;\n    }\n    fps(value) {\n        return this.param(value, \"fps\", \"fps\", (fps) => {\n            if (isString(fps)) {\n                return fps;\n            }\n            else if (Array.isArray(fps)) {\n                return fps.join(\"-\");\n            }\n            else {\n                return fps;\n            }\n        });\n    }\n    height(value) {\n        return this.param(value, \"height\", \"h\", () => {\n            if (this.getValue(\"crop\") || this.getValue(\"overlay\") || this.getValue(\"underlay\")) {\n                return Expression.normalize(value);\n            }\n            else {\n                return null;\n            }\n        });\n    }\n    htmlHeight(value) {\n        this.param(value, \"html_height\");\n        return this;\n    }\n    htmlWidth(value) {\n        this.param(value, \"html_width\");\n        return this;\n    }\n    if(value = \"\") {\n        var i, ifVal, j, ref, trIf, trRest;\n        switch (value) {\n            case \"else\":\n                this.chain();\n                return this.param(value, \"if\", \"if\");\n            case \"end\":\n                this.chain();\n                for (i = j = ref = this.chained.length - 1; j >= 0; i = j += -1) {\n                    ifVal = this.chained[i].getValue(\"if\");\n                    if (ifVal === \"end\") {\n                        break;\n                    }\n                    else if (ifVal != null) {\n                        trIf = Transformation.new().if(ifVal);\n                        this.chained[i].remove(\"if\");\n                        trRest = this.chained[i];\n                        this.chained[i] = Transformation.new().transformation([trIf, trRest]);\n                        if (ifVal !== \"else\") {\n                            break;\n                        }\n                    }\n                }\n                return this.param(value, \"if\", \"if\");\n            case \"\":\n                return Condition.new().setParent(this);\n            default:\n                return this.param(value, \"if\", \"if\", (value) => {\n                    return Condition.new(value).toString();\n                });\n        }\n    }\n    keyframeInterval(value) {\n        this.param(value, \"keyframe_interval\", \"ki\");\n        return this;\n    }\n    ocr(value) {\n        this.param(value, \"ocr\", \"ocr\");\n        return this;\n    }\n    offset(value) {\n        var end_o, start_o;\n        [start_o, end_o] = (isFunction(value != null ? value.split : void 0)) ? value.split('..') : Array.isArray(value) ? value : [null, null];\n        if (start_o != null) {\n            this.startOffset(start_o);\n        }\n        if (end_o != null) {\n            return this.endOffset(end_o);\n        }\n    }\n    opacity(value) {\n        this.param(value, \"opacity\", \"o\", Expression.normalize);\n        return this;\n    }\n    overlay(value) {\n        this.layerParam(value, \"overlay\", \"l\");\n        return this;\n    }\n    page(value) {\n        this.param(value, \"page\", \"pg\");\n        return this;\n    }\n    poster(value) {\n        this.param(value, \"poster\");\n        return this;\n    }\n    prefix(value) {\n        this.param(value, \"prefix\", \"p\");\n        return this;\n    }\n    quality(value) {\n        this.param(value, \"quality\", \"q\", Expression.normalize);\n        return this;\n    }\n    radius(value) {\n        this.arrayParam(value, \"radius\", \"r\", \":\", Expression.normalize);\n        return this;\n    }\n    rawTransformation(value) {\n        this.rawParam(value, \"raw_transformation\");\n        return this;\n    }\n    size(value) {\n        let height, width;\n        if (isFunction(value != null ? value.split : void 0)) {\n            [width, height] = value.split('x');\n            this.width(width);\n            return this.height(height);\n        }\n    }\n    sourceTypes(value) {\n        this.param(value, \"source_types\");\n        return this;\n    }\n    sourceTransformation(value) {\n        return this.param(value, \"source_transformation\");\n    }\n    startOffset(value) {\n        this.rangeParam(value, \"start_offset\", \"so\");\n        return this;\n    }\n    streamingProfile(value) {\n        this.param(value, \"streaming_profile\", \"sp\");\n        return this;\n    }\n    transformation(value) {\n        this.transformationParam(value, \"transformation\", \"t\");\n        return this;\n    }\n    underlay(value) {\n        this.layerParam(value, \"underlay\", \"u\");\n        return this;\n    }\n    variable(name, value) {\n        this.param(value, name, name);\n        return this;\n    }\n    variables(values) {\n        this.arrayParam(values, \"variables\");\n        return this;\n    }\n    videoCodec(value) {\n        this.param(value, \"video_codec\", \"vc\", Param.process_video_params);\n        return this;\n    }\n    videoSampling(value) {\n        this.param(value, \"video_sampling\", \"vs\");\n        return this;\n    }\n    width(value) {\n        this.param(value, \"width\", \"w\", () => {\n            if (this.getValue(\"crop\") || this.getValue(\"overlay\") || this.getValue(\"underlay\")) {\n                return Expression.normalize(value);\n            }\n            else {\n                return null;\n            }\n        });\n        return this;\n    }\n    x(value) {\n        this.param(value, \"x\", \"x\", Expression.normalize);\n        return this;\n    }\n    y(value) {\n        this.param(value, \"y\", \"y\", Expression.normalize);\n        return this;\n    }\n    zoom(value) {\n        this.param(value, \"zoom\", \"z\", Expression.normalize);\n        return this;\n    }\n}\n/**\n * Transformation Class methods.\n * This is a list of the parameters defined in Transformation.\n * Values are camelCased.\n */\nconst methods = [\n    \"angle\",\n    \"audioCodec\",\n    \"audioFrequency\",\n    \"aspectRatio\",\n    \"background\",\n    \"bitRate\",\n    \"border\",\n    \"color\",\n    \"colorSpace\",\n    \"crop\",\n    \"customFunction\",\n    \"customPreFunction\",\n    \"defaultImage\",\n    \"delay\",\n    \"density\",\n    \"duration\",\n    \"dpr\",\n    \"effect\",\n    \"else\",\n    \"endIf\",\n    \"endOffset\",\n    \"fallbackContent\",\n    \"fetchFormat\",\n    \"format\",\n    \"flags\",\n    \"gravity\",\n    \"fps\",\n    \"height\",\n    \"htmlHeight\",\n    \"htmlWidth\",\n    \"if\",\n    \"keyframeInterval\",\n    \"ocr\",\n    \"offset\",\n    \"opacity\",\n    \"overlay\",\n    \"page\",\n    \"poster\",\n    \"prefix\",\n    \"quality\",\n    \"radius\",\n    \"rawTransformation\",\n    \"size\",\n    \"sourceTypes\",\n    \"sourceTransformation\",\n    \"startOffset\",\n    \"streamingProfile\",\n    \"transformation\",\n    \"underlay\",\n    \"variable\",\n    \"variables\",\n    \"videoCodec\",\n    \"videoSampling\",\n    \"width\",\n    \"x\",\n    \"y\",\n    \"zoom\"\n];\n/**\n * Parameters that are filtered out before passing the options to an HTML tag.\n *\n * The list of parameters is a combination of `Transformation::methods` and `Configuration::CONFIG_PARAMS`\n */\nconst PARAM_NAMES = methods.map(snakeCase).concat(CONFIG_PARAMS);\nexport default Transformation;\n", "var __defProp = Object.defineProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\n\n// src/lib/cloudinary.ts\nimport { Cloudinary } from \"@cloudinary/url-gen\";\nimport { parseUrl, objectHasKey as objectHasKey4 } from \"@cloudinary-util/util\";\n\n// src/plugins/cropping.ts\nvar cropping_exports = {};\n__export(cropping_exports, {\n  assetTypes: () => assetTypes,\n  normalizeNumberParameter: () => normalizeNumberParameter,\n  plugin: () => plugin,\n  props: () => props\n});\nvar cropsGravityAuto = [\"crop\", \"fill\", \"lfill\", \"fill_pad\", \"thumb\"];\nvar cropsWithZoom = [\"crop\", \"thumb\"];\nvar props = [\n  \"crop\",\n  \"gravity\",\n  \"zoom\"\n];\nvar assetTypes = [\"image\", \"images\", \"video\", \"videos\"];\nfunction normalizeNumberParameter(param) {\n  if (typeof param !== \"string\")\n    return param;\n  return parseInt(param);\n}\nfunction plugin(props15) {\n  const { cldAsset, options } = props15;\n  const {\n    width: defaultWidth,\n    height: defaultHeight,\n    widthResize: defaultWidthResize,\n    crop = \"limit\"\n  } = options;\n  const overrides = {\n    width: void 0\n  };\n  let height = normalizeNumberParameter(defaultHeight);\n  let width = normalizeNumberParameter(defaultWidth);\n  let widthResize = normalizeNumberParameter(defaultWidthResize);\n  let transformationString = \"\";\n  if (width) {\n    transformationString = `c_${crop},w_${width}`;\n  }\n  if (!options.gravity && cropsGravityAuto.includes(crop)) {\n    options.gravity = \"auto\";\n  }\n  if (![\"limit\"].includes(crop)) {\n    transformationString = `${transformationString},h_${height}`;\n  }\n  if (options.gravity) {\n    if (options.gravity === \"auto\" && !cropsGravityAuto.includes(crop)) {\n      console.warn(`Auto gravity can only be used with crop modes: ${cropsGravityAuto.join(\", \")}. Not applying gravity.`);\n    } else {\n      transformationString = `${transformationString},g_${options.gravity}`;\n    }\n  }\n  if (options.zoom) {\n    if (options.zoom === \"auto\" && !cropsWithZoom.includes(crop)) {\n      console.warn(`Zoom can only be used with crop modes: ${cropsWithZoom.join(\", \")}. Not applying zoom.`);\n    } else {\n      transformationString = `${transformationString},z_${options.zoom}`;\n    }\n  }\n  cldAsset.effect(transformationString);\n  if (width && widthResize && widthResize < width) {\n    overrides.width = widthResize;\n  }\n  return {\n    options: overrides\n  };\n}\n\n// src/plugins/effects.ts\nvar effects_exports = {};\n__export(effects_exports, {\n  assetTypes: () => assetTypes2,\n  plugin: () => plugin2,\n  props: () => props2\n});\n\n// src/constants/qualifiers.ts\nimport { testColorIsHex, convertColorHexToRgb } from \"@cloudinary-util/util\";\nvar convertersColors = [\n  {\n    test: testColorIsHex,\n    convert: convertColorHexToRgb\n  }\n];\nvar primary = {\n  aspectRatio: {\n    qualifier: \"ar\"\n  },\n  crop: {\n    qualifier: \"c\"\n  },\n  gravity: {\n    qualifier: \"g\"\n  },\n  height: {\n    qualifier: \"h\"\n  },\n  width: {\n    qualifier: \"w\"\n  }\n};\nvar position = {\n  angle: {\n    qualifier: \"a\"\n  },\n  gravity: {\n    qualifier: \"g\"\n  },\n  x: {\n    qualifier: \"x\"\n  },\n  y: {\n    qualifier: \"y\"\n  }\n};\nvar text = {\n  alignment: {\n    qualifier: false,\n    order: 6\n  },\n  antialias: {\n    qualifier: \"antialias\"\n  },\n  border: {\n    qualifier: \"bo\",\n    location: \"primary\"\n  },\n  color: {\n    qualifier: \"co\",\n    location: \"primary\",\n    converters: convertersColors\n  },\n  fontFamily: {\n    qualifier: false,\n    order: 1\n  },\n  fontSize: {\n    qualifier: false,\n    order: 2\n  },\n  fontStyle: {\n    qualifier: false,\n    order: 4\n  },\n  fontWeight: {\n    qualifier: false,\n    order: 3\n  },\n  hinting: {\n    qualifier: \"hinting\"\n  },\n  letterSpacing: {\n    qualifier: \"letter_spacing\"\n  },\n  lineSpacing: {\n    qualifier: \"line_spacing\"\n  },\n  stroke: {\n    qualifier: \"self\",\n    order: 7\n  },\n  textDecoration: {\n    qualifier: false,\n    order: 5\n  }\n};\nvar effects = {\n  art: {\n    prefix: \"e\",\n    qualifier: \"art\"\n  },\n  autoBrightness: {\n    prefix: \"e\",\n    qualifier: \"auto_brightness\"\n  },\n  autoColor: {\n    prefix: \"e\",\n    qualifier: \"auto_color\"\n  },\n  autoContrast: {\n    prefix: \"e\",\n    qualifier: \"auto_contrast\"\n  },\n  assistColorblind: {\n    prefix: \"e\",\n    qualifier: \"assist_colorblind\"\n  },\n  background: {\n    qualifier: \"b\"\n  },\n  blackwhite: {\n    prefix: \"e\",\n    qualifier: \"blackwhite\"\n  },\n  blur: {\n    prefix: \"e\",\n    qualifier: \"blur\"\n  },\n  blurFaces: {\n    prefix: \"e\",\n    qualifier: \"blur_faces\"\n  },\n  blurRegion: {\n    prefix: \"e\",\n    qualifier: \"blur_region\"\n  },\n  border: {\n    qualifier: \"bo\"\n  },\n  brightness: {\n    prefix: \"e\",\n    qualifier: \"brightness\"\n  },\n  brightnessHSB: {\n    prefix: \"e\",\n    qualifier: \"brightness_hsb\"\n  },\n  cartoonify: {\n    prefix: \"e\",\n    qualifier: \"cartoonify\"\n  },\n  color: {\n    qualifier: \"co\",\n    converters: convertersColors\n  },\n  colorize: {\n    prefix: \"e\",\n    qualifier: \"colorize\"\n  },\n  contrast: {\n    prefix: \"e\",\n    qualifier: \"contrast\"\n  },\n  distort: {\n    prefix: \"e\",\n    qualifier: \"distort\"\n  },\n  fillLight: {\n    prefix: \"e\",\n    qualifier: \"fill_light\"\n  },\n  gamma: {\n    prefix: \"e\",\n    qualifier: \"gamma\"\n  },\n  gradientFade: {\n    prefix: \"e\",\n    qualifier: \"gradient_fade\"\n  },\n  grayscale: {\n    prefix: \"e\",\n    qualifier: \"grayscale\"\n  },\n  improve: {\n    prefix: \"e\",\n    qualifier: \"improve\"\n  },\n  multiply: {\n    prefix: \"e\",\n    qualifier: \"multiply\"\n  },\n  negate: {\n    prefix: \"e\",\n    qualifier: \"negate\"\n  },\n  oilPaint: {\n    prefix: \"e\",\n    qualifier: \"oil_paint\"\n  },\n  opacity: {\n    qualifier: \"o\"\n  },\n  outline: {\n    prefix: \"e\",\n    qualifier: \"outline\"\n  },\n  overlay: {\n    prefix: \"e\",\n    qualifier: \"overlay\"\n  },\n  pixelate: {\n    prefix: \"e\",\n    qualifier: \"pixelate\"\n  },\n  pixelateFaces: {\n    prefix: \"e\",\n    qualifier: \"pixelate_faces\"\n  },\n  pixelateRegion: {\n    prefix: \"e\",\n    qualifier: \"pixelate_region\"\n  },\n  radius: {\n    qualifier: \"r\"\n  },\n  redeye: {\n    prefix: \"e\",\n    qualifier: \"redeye\"\n  },\n  replaceColor: {\n    prefix: \"e\",\n    qualifier: \"replace_color\"\n  },\n  saturation: {\n    prefix: \"e\",\n    qualifier: \"saturation\"\n  },\n  screen: {\n    prefix: \"e\",\n    qualifier: \"screen\"\n  },\n  sepia: {\n    prefix: \"e\",\n    qualifier: \"sepia\"\n  },\n  shadow: {\n    prefix: \"e\",\n    qualifier: \"shadow\"\n  },\n  sharpen: {\n    prefix: \"e\",\n    qualifier: \"sharpen\"\n  },\n  shear: {\n    prefix: \"e\",\n    qualifier: \"shear\"\n  },\n  simulateColorblind: {\n    prefix: \"e\",\n    qualifier: \"simulate_colorblind\"\n  },\n  tint: {\n    prefix: \"e\",\n    qualifier: \"tint\"\n  },\n  trim: {\n    prefix: \"e\",\n    qualifier: \"trim\"\n  },\n  unsharpMask: {\n    prefix: \"e\",\n    qualifier: \"unsharp_mask\"\n  },\n  vectorize: {\n    prefix: \"e\",\n    qualifier: \"vectorize\"\n  },\n  vibrance: {\n    prefix: \"e\",\n    qualifier: \"vibrance\"\n  },\n  vignette: {\n    prefix: \"e\",\n    qualifier: \"vignette\"\n  }\n};\nvar flags = {\n  animated: {\n    prefix: \"fl\",\n    qualifier: \"animated\"\n  },\n  anyFormat: {\n    prefix: \"fl\",\n    qualifier: \"any_format\"\n  },\n  apng: {\n    prefix: \"fl\",\n    qualifier: \"apng\"\n  },\n  attachment: {\n    prefix: \"fl\",\n    qualifier: \"attachment\"\n  },\n  awebp: {\n    prefix: \"fl\",\n    qualifier: \"awebp\"\n  },\n  clip: {\n    prefix: \"fl\",\n    qualifier: \"clip\"\n  },\n  clipEvenodd: {\n    prefix: \"fl\",\n    qualifier: \"clip_evenodd\"\n  },\n  cutter: {\n    prefix: \"fl\",\n    qualifier: \"cutter\"\n  },\n  draco: {\n    prefix: \"fl\",\n    qualifier: \"draco\"\n  },\n  forceIcc: {\n    prefix: \"fl\",\n    qualifier: \"force_icc\"\n  },\n  forceStrip: {\n    prefix: \"fl\",\n    qualifier: \"force_strip\"\n  },\n  getinfo: {\n    prefix: \"fl\",\n    qualifier: \"getinfo\"\n  },\n  group4: {\n    prefix: \"fl\",\n    qualifier: \"group4\"\n  },\n  hlsv3: {\n    prefix: \"fl\",\n    qualifier: \"hlsv3\"\n  },\n  ignoreAspectRatio: {\n    prefix: \"fl\",\n    qualifier: \"ignore_aspect_ratio\"\n  },\n  ignoreMaskChannels: {\n    prefix: \"fl\",\n    qualifier: \"ignore_mask_channels\"\n  },\n  immutableCache: {\n    prefix: \"fl\",\n    qualifier: \"immutable_cache\"\n  },\n  keepAttribution: {\n    prefix: \"fl\",\n    qualifier: \"keep_attribution\"\n  },\n  keepDar: {\n    prefix: \"fl\",\n    qualifier: \"keep_dar\"\n  },\n  keepIptc: {\n    prefix: \"fl\",\n    qualifier: \"keep_iptc\"\n  },\n  layerApply: {\n    prefix: \"fl\",\n    qualifier: \"layer_apply\"\n  },\n  lossy: {\n    prefix: \"fl\",\n    qualifier: \"lossy\"\n  },\n  mono: {\n    prefix: \"fl\",\n    qualifier: \"mono\"\n  },\n  noOverflow: {\n    prefix: \"fl\",\n    qualifier: \"no_overflow\"\n  },\n  noStream: {\n    prefix: \"fl\",\n    qualifier: \"no_stream\"\n  },\n  png8: {\n    prefix: \"fl\",\n    qualifier: \"png8\"\n  },\n  png24: {\n    prefix: \"fl\",\n    qualifier: \"png24\"\n  },\n  png32: {\n    prefix: \"fl\",\n    qualifier: \"png32\"\n  },\n  preserveTransparency: {\n    prefix: \"fl\",\n    qualifier: \"preserve_transparency\"\n  },\n  progressive: {\n    prefix: \"fl\",\n    qualifier: \"progressive\"\n  },\n  rasterize: {\n    prefix: \"fl\",\n    qualifier: \"rasterize\"\n  },\n  regionRelative: {\n    prefix: \"fl\",\n    qualifier: \"region_relative\"\n  },\n  relative: {\n    prefix: \"fl\",\n    qualifier: \"relative\",\n    location: \"primary\"\n  },\n  replaceImage: {\n    prefix: \"fl\",\n    qualifier: \"replace_image\"\n  },\n  sanitize: {\n    prefix: \"fl\",\n    qualifier: \"sanitize\"\n  },\n  splice: {\n    prefix: \"fl\",\n    qualifier: \"splice\"\n  },\n  streamingAttachment: {\n    prefix: \"fl\",\n    qualifier: \"streaming_attachment\"\n  },\n  stripProfile: {\n    prefix: \"fl\",\n    qualifier: \"strip_profile\"\n  },\n  textDisallowOverflow: {\n    prefix: \"fl\",\n    qualifier: \"text_disallow_overflow\"\n  },\n  textNoTrim: {\n    prefix: \"fl\",\n    qualifier: \"text_no_trim\"\n  },\n  tif8Lzw: {\n    prefix: \"fl\",\n    qualifier: \"tif8_lzw\"\n  },\n  tiled: {\n    prefix: \"fl\",\n    qualifier: \"tiled\"\n  },\n  truncateTs: {\n    prefix: \"fl\",\n    qualifier: \"truncate_ts\"\n  },\n  waveform: {\n    prefix: \"fl\",\n    qualifier: \"waveform\"\n  }\n};\nvar video = {\n  streamingProfile: {\n    qualifier: \"sp\",\n    location: \"primary\"\n  }\n};\n\n// src/lib/transformations.ts\nfunction constructTransformation({ prefix, qualifier, value, converters }) {\n  let transformation = \"\";\n  if (prefix) {\n    transformation = `${prefix}_`;\n  }\n  let transformationValue = value;\n  converters == null ? void 0 : converters.forEach(({ test, convert }) => {\n    if (!test(transformationValue))\n      return;\n    transformationValue = convert(transformationValue);\n  });\n  if (transformationValue === true || transformationValue === \"true\") {\n    return `${transformation}${qualifier}`;\n  }\n  if (typeof transformationValue === \"string\" || typeof transformationValue === \"number\") {\n    if (prefix) {\n      return `${transformation}${qualifier}:${transformationValue}`;\n    } else {\n      return `${qualifier}_${transformationValue}`;\n    }\n  }\n}\n\n// src/plugins/effects.ts\nvar props2 = [...Object.keys(effects), \"effects\"];\nvar assetTypes2 = [\"image\", \"images\", \"video\", \"videos\"];\nfunction plugin2(props15) {\n  const { cldAsset, options } = props15;\n  const transformationStrings = constructTransformationString({\n    effects,\n    options\n  });\n  transformationStrings.filter((t) => !!t).forEach((transformation) => cldAsset.effect(transformation));\n  ;\n  if (Array.isArray(options == null ? void 0 : options.effects)) {\n    options == null ? void 0 : options.effects.forEach((effectsSet) => {\n      const transformationString = constructTransformationString({\n        effects,\n        options: effectsSet\n      }).filter((t) => !!t).join(\",\");\n      cldAsset.effect(transformationString);\n    });\n  }\n  function constructTransformationString({ effects: effects2, options: options2 }) {\n    return Object.keys(effects2).map((key) => {\n      const { prefix, qualifier, converters } = effects2[key];\n      return constructTransformation({\n        qualifier,\n        prefix,\n        value: options2 == null ? void 0 : options2[key],\n        converters\n      });\n    });\n  }\n  return {};\n}\n\n// src/plugins/flags.ts\nvar flags_exports = {};\n__export(flags_exports, {\n  assetTypes: () => assetTypes3,\n  plugin: () => plugin3,\n  props: () => props3\n});\nvar props3 = [\"flags\"];\nvar assetTypes3 = [\"image\", \"images\", \"video\", \"videos\"];\nvar supportedFlags = Object.entries(flags).map(([_, { qualifier }]) => qualifier);\nfunction plugin3(props15) {\n  const { cldAsset, options } = props15;\n  const { flags: flags2 = [] } = options;\n  if (Array.isArray(flags2) && flags2.length > 0) {\n    flags2.forEach((flag) => {\n      if (!supportedFlags.includes(flag))\n        return;\n      cldAsset.addFlag(flag);\n    });\n  } else if (typeof flags2 === \"object\") {\n    Object.entries(flags2).forEach(([qualifier, value]) => {\n      if (!supportedFlags.includes(qualifier))\n        return;\n      cldAsset.addTransformation(`fl_${qualifier}:${value}`);\n    });\n  }\n  return {};\n}\n\n// src/plugins/fill-background.ts\nvar fill_background_exports = {};\n__export(fill_background_exports, {\n  assetTypes: () => assetTypes4,\n  plugin: () => plugin4,\n  props: () => props4\n});\nvar props4 = [\"fillBackground\"];\nvar assetTypes4 = [\"image\", \"images\"];\nvar defaultCrop = \"pad\";\nfunction plugin4(props15) {\n  const { cldAsset, options } = props15;\n  const { fillBackground } = options;\n  if (fillBackground === true) {\n    const properties = [\n      \"b_gen_fill\",\n      `ar_${options.width}:${options.height}`,\n      `w_${options.width}`,\n      `c_${defaultCrop}`\n    ];\n    cldAsset.addTransformation(properties.join(\",\"));\n  } else if (typeof fillBackground === \"object\") {\n    const { crop = defaultCrop, gravity, prompt } = fillBackground;\n    const properties = [\n      `ar_${options.width}:${options.height}`,\n      `w_${options.width}`,\n      `c_${crop}`\n    ];\n    if (typeof prompt === \"string\") {\n      properties.unshift(`b_gen_fill:${prompt}`);\n    } else {\n      properties.unshift(`b_gen_fill`);\n    }\n    if (typeof gravity === \"string\") {\n      properties.push(`g_${gravity}`);\n    }\n    cldAsset.addTransformation(properties.join(\",\"));\n  }\n  return {};\n}\n\n// src/plugins/sanitize.ts\nvar sanitize_exports = {};\n__export(sanitize_exports, {\n  assetTypes: () => assetTypes5,\n  plugin: () => plugin5,\n  props: () => props5\n});\nvar props5 = [\"sanitize\"];\nvar assetTypes5 = [\"image\", \"images\"];\nfunction plugin5(props15) {\n  const { cldAsset, options } = props15;\n  const { sanitize = true } = options;\n  const shouldApplySanitizer = sanitize && (options.format === \"svg\" || cldAsset.publicID.endsWith(\".svg\"));\n  if (shouldApplySanitizer) {\n    cldAsset.effect(\"fl_sanitize\");\n  }\n  return {};\n}\n\n// src/plugins/overlays.ts\nvar overlays_exports = {};\n__export(overlays_exports, {\n  DEFAULT_TEXT_OPTIONS: () => DEFAULT_TEXT_OPTIONS,\n  assetTypes: () => assetTypes6,\n  plugin: () => plugin6,\n  props: () => props6\n});\nimport { encodeBase64, objectHasKey, sortByKey } from \"@cloudinary-util/util\";\nvar props6 = [\"text\", \"overlays\"];\nvar assetTypes6 = [\"image\", \"images\", \"video\", \"videos\"];\nvar DEFAULT_TEXT_OPTIONS = {\n  color: \"black\",\n  fontFamily: \"Arial\",\n  fontSize: 200,\n  fontWeight: \"bold\"\n};\nfunction plugin6(props15) {\n  const { cldAsset, options } = props15;\n  const { text: text2, overlays = [] } = options;\n  const type = \"overlay\";\n  const typeQualifier = \"l\";\n  if (Array.isArray(overlays)) {\n    overlays.forEach(applyOverlay);\n  }\n  if (typeof text2 === \"string\") {\n    applyOverlay({\n      text: {\n        ...DEFAULT_TEXT_OPTIONS,\n        text: text2\n      }\n    });\n  } else if (typeof text2 === \"object\") {\n    applyOverlay({\n      text: {\n        ...DEFAULT_TEXT_OPTIONS,\n        ...text2\n      }\n    });\n  }\n  function applyOverlay({ publicId, url, position: position2, text: text3, effects: layerEffects = [], appliedEffects = [], ...options2 }) {\n    var _a;\n    const hasPublicId = typeof publicId === \"string\";\n    const hasUrl = typeof url === \"string\";\n    const hasText = typeof text3 === \"object\" || typeof text3 === \"string\";\n    const hasPosition = typeof position2 === \"object\";\n    if (!hasPublicId && !hasUrl && !hasText) {\n      console.warn(`An ${type} is missing Public ID, URL, or Text`);\n      return;\n    }\n    let layerTransformation;\n    if (hasText) {\n      layerTransformation = `${typeQualifier}_text`;\n    } else if (hasPublicId) {\n      layerTransformation = `${typeQualifier}_${publicId.replace(/\\//g, \":\")}`;\n    } else if (hasUrl) {\n      layerTransformation = `${typeQualifier}_fetch:${encodeBase64(url)}`;\n    }\n    const primary2 = [];\n    const applied = [];\n    Object.keys(options2).forEach((key) => {\n      if (!objectHasKey(primary, key))\n        return;\n      const { qualifier, converters } = primary[key];\n      const transformation = constructTransformation({\n        qualifier,\n        value: options2[key],\n        converters\n      });\n      if (transformation) {\n        primary2.push(transformation);\n      }\n    });\n    layerEffects.forEach((effect) => {\n      Object.keys(effect).forEach((key) => {\n        const { qualifier, prefix, converters } = primary[key] || effects[key] || {};\n        const transformation = constructTransformation({\n          qualifier,\n          prefix,\n          value: effect[key],\n          converters\n        });\n        if (transformation) {\n          primary2.push(transformation);\n        }\n      });\n    });\n    appliedEffects.forEach((effect) => {\n      Object.keys(effect).forEach((key) => {\n        const { qualifier, prefix, converters } = primary[key] || effects[key] || {};\n        const transformation = constructTransformation({\n          qualifier,\n          prefix,\n          value: effect[key],\n          converters\n        });\n        if (transformation) {\n          applied.push(transformation);\n        }\n      });\n    });\n    if (hasText) {\n      if (typeof text3 === \"string\") {\n        text3 = {\n          ...DEFAULT_TEXT_OPTIONS,\n          text: text3\n        };\n      }\n      const textTransformations = [];\n      if (typeof text3 === \"object\") {\n        const textOptions = Object.keys(text3).filter((key) => objectHasKey(text, key)).map((key) => {\n          const value = text3 && objectHasKey(text3, key) && text3[key];\n          return {\n            ...text[key],\n            key,\n            value,\n            order: text[key].order || 99\n          };\n        });\n        const sortedTextOptions = sortByKey(textOptions, \"order\");\n        for (const textOption of sortedTextOptions) {\n          const { key, value, qualifier, location, converters } = textOption;\n          let textValue = value;\n          converters == null ? void 0 : converters.forEach(({ test, convert }) => {\n            if (!test(value))\n              return;\n            textValue = convert(value);\n          });\n          if (location === \"primary\") {\n            primary2.push(`${qualifier}_${textValue}`);\n          } else if (qualifier === \"self\") {\n            textTransformations.push(key);\n          } else if (qualifier) {\n            textTransformations.push(`${qualifier}_${textValue}`);\n          } else {\n            textTransformations.push(textValue);\n          }\n        }\n      }\n      const specialCharacters = {\n        \".\": \"%2E\",\n        \",\": \"%2C\",\n        \"/\": \"%2F\"\n      };\n      let layerText = (text3 == null ? void 0 : text3.text) || \"\";\n      if (typeof layerText === \"string\") {\n        (_a = Object.keys(specialCharacters)) == null ? void 0 : _a.forEach((character) => {\n          layerText = layerText == null ? void 0 : layerText.replace(character, specialCharacters[character]);\n        });\n      }\n      layerTransformation = `${layerTransformation}:${textTransformations.join(\"_\")}:${layerText}`;\n    }\n    if (hasPosition) {\n      Object.keys(position2).forEach((key) => {\n        if (!objectHasKey(position, key))\n          return;\n        const { qualifier, converters } = position[key];\n        const transformation = constructTransformation({\n          qualifier,\n          value: position2[key],\n          converters\n        });\n        if (transformation) {\n          applied.push(transformation);\n        }\n      });\n    }\n    if (primary2.length > 0) {\n      layerTransformation = `${layerTransformation},${primary2.join(\",\")}`;\n    }\n    layerTransformation = `${layerTransformation}/fl_layer_apply,fl_no_overflow`;\n    if (applied.length > 0) {\n      layerTransformation = `${layerTransformation},${applied.join(\",\")}`;\n    }\n    cldAsset.addTransformation(layerTransformation);\n  }\n  return {};\n}\n\n// src/plugins/named-transformations.ts\nvar named_transformations_exports = {};\n__export(named_transformations_exports, {\n  assetTypes: () => assetTypes7,\n  plugin: () => plugin7,\n  props: () => props7\n});\nvar props7 = [\"transformations\"];\nvar assetTypes7 = [\"image\", \"images\", \"video\", \"videos\"];\nfunction plugin7(props15) {\n  const { cldAsset, options } = props15;\n  let { transformations = [] } = options;\n  if (!Array.isArray(transformations)) {\n    transformations = [transformations];\n  }\n  transformations.forEach((transformation) => {\n    cldAsset.addTransformation(`t_${transformation}`);\n  });\n  return {};\n}\n\n// src/plugins/raw-transformations.ts\nvar raw_transformations_exports = {};\n__export(raw_transformations_exports, {\n  assetTypes: () => assetTypes8,\n  plugin: () => plugin8,\n  props: () => props8\n});\nvar props8 = [\"rawTransformations\"];\nvar assetTypes8 = [\"image\", \"images\", \"video\", \"videos\"];\nfunction plugin8(props15) {\n  const { cldAsset, options } = props15;\n  const { rawTransformations = [] } = options;\n  rawTransformations.forEach((transformation) => {\n    cldAsset.addTransformation(transformation);\n  });\n  return {};\n}\n\n// src/plugins/remove-background.ts\nvar remove_background_exports = {};\n__export(remove_background_exports, {\n  assetTypes: () => assetTypes9,\n  plugin: () => plugin9,\n  props: () => props9\n});\nvar props9 = [\"removeBackground\"];\nvar assetTypes9 = [\"image\", \"images\"];\nfunction plugin9(props15) {\n  const { cldAsset, options } = props15;\n  const { removeBackground = false } = options;\n  if (removeBackground) {\n    cldAsset.effect(\"e_background_removal\");\n  }\n  return {};\n}\n\n// src/plugins/seo.ts\nvar seo_exports = {};\n__export(seo_exports, {\n  assetTypes: () => assetTypes10,\n  plugin: () => plugin10,\n  props: () => props10\n});\nvar props10 = [\"seoSuffix\"];\nvar assetTypes10 = [\"image\", \"images\", \"video\", \"videos\"];\nfunction plugin10(props15) {\n  const { cldAsset, options } = props15;\n  const { seoSuffix } = options;\n  if (typeof seoSuffix === \"string\") {\n    if (options.deliveryType === \"fetch\") {\n      console.warn(\"SEO suffix is not supported with a delivery type of fetch\");\n    } else {\n      cldAsset.setSuffix(seoSuffix);\n    }\n  }\n  return {};\n}\n\n// src/plugins/underlays.ts\nvar underlays_exports = {};\n__export(underlays_exports, {\n  assetTypes: () => assetTypes11,\n  plugin: () => plugin11,\n  props: () => props11\n});\nimport { objectHasKey as objectHasKey2 } from \"@cloudinary-util/util\";\nvar props11 = [\"underlay\", \"underlays\"];\nvar assetTypes11 = [\"image\", \"images\", \"video\", \"videos\"];\nfunction plugin11(props15) {\n  const { cldAsset, options } = props15;\n  const { underlay, underlays = [] } = options;\n  const typeQualifier = \"u\";\n  if (Array.isArray(underlays)) {\n    underlays.forEach(applyUnderlay);\n  }\n  if (typeof underlay === \"string\") {\n    const underlayOptions = {\n      publicId: underlay,\n      crop: \"fill\",\n      width: \"1.0\",\n      height: \"1.0\",\n      flags: [\"relative\"]\n    };\n    applyUnderlay(underlayOptions);\n  }\n  function applyUnderlay({ publicId, type, position: position2, effects: layerEffects = [], flags: flags2 = [], ...options2 }) {\n    const hasPublicId = typeof publicId === \"string\";\n    const hasPosition = typeof position2 === \"object\";\n    if (!hasPublicId) {\n      console.warn(`An ${type} is missing a Public ID`);\n      return;\n    }\n    let layerTransformation = `${typeQualifier}_${publicId.replace(/\\//g, \":\")}`;\n    const primary2 = [];\n    const applied = [];\n    Object.keys(options2).forEach((key) => {\n      if (!objectHasKey2(primary, key))\n        return;\n      const { qualifier } = primary[key];\n      primary2.push(`${qualifier}_${options2[key]}`);\n    });\n    layerEffects.forEach((effect) => {\n      Object.keys(effect).forEach((key) => {\n        if (!objectHasKey2(primary, key))\n          return;\n        const { qualifier } = primary[key];\n        primary2.push(`${qualifier}_${effect[key]}`);\n      });\n    });\n    if (hasPosition) {\n      Object.keys(position2).forEach((key) => {\n        if (!objectHasKey2(position, key))\n          return;\n        const { qualifier } = position[key];\n        applied.push(`${qualifier}_${position2[key]}`);\n      });\n    }\n    flags2.forEach((key) => {\n      if (!objectHasKey2(flags, key))\n        return;\n      const { qualifier, prefix } = flags[key];\n      primary2.push(`${prefix}_${qualifier}`);\n    });\n    layerTransformation = `${layerTransformation},${primary2.join(\",\")}`;\n    layerTransformation = `${layerTransformation}/fl_layer_apply,fl_no_overflow`;\n    if (applied.length > 0) {\n      layerTransformation = `${layerTransformation},${applied.join(\",\")}`;\n    }\n    cldAsset.addTransformation(layerTransformation);\n  }\n  return {};\n}\n\n// src/plugins/version.ts\nvar version_exports = {};\n__export(version_exports, {\n  assetTypes: () => assetTypes12,\n  plugin: () => plugin12,\n  props: () => props12\n});\nvar props12 = [\"version\"];\nvar assetTypes12 = [\"image\", \"images\", \"video\", \"videos\"];\nfunction plugin12(props15) {\n  const { cldAsset, options } = props15;\n  const { version } = options;\n  if (typeof version === \"string\" || typeof version === \"number\") {\n    cldAsset.setVersion(`${version}`.replace(\"v\", \"\"));\n  }\n  return {};\n}\n\n// src/plugins/video.ts\nvar video_exports = {};\n__export(video_exports, {\n  assetTypes: () => assetTypes13,\n  plugin: () => plugin13,\n  props: () => props13\n});\nimport { objectHasKey as objectHasKey3 } from \"@cloudinary-util/util\";\nvar props13 = [...Object.keys(video)];\nvar assetTypes13 = [\"video\", \"videos\"];\nfunction plugin13(props15) {\n  const { cldAsset, options } = props15;\n  Object.keys(options).forEach((key) => {\n    if (!objectHasKey3(video, key))\n      return;\n    const { prefix, qualifier, converters } = video[key];\n    const transformation = constructTransformation({\n      prefix,\n      qualifier,\n      value: options[key],\n      converters\n    });\n    cldAsset.addTransformation(transformation);\n  });\n  return {};\n}\n\n// src/plugins/zoompan.ts\nvar zoompan_exports = {};\n__export(zoompan_exports, {\n  assetTypes: () => assetTypes14,\n  plugin: () => plugin14,\n  props: () => props14\n});\nvar props14 = [\"zoompan\"];\nvar assetTypes14 = [\"image\", \"images\"];\nfunction plugin14(props15) {\n  const { cldAsset, options } = props15;\n  const { zoompan = false } = options;\n  const overrides = {\n    format: void 0\n  };\n  if (zoompan === true) {\n    cldAsset.effect(\"e_zoompan\");\n  } else if (typeof zoompan === \"string\") {\n    if (zoompan === \"loop\") {\n      cldAsset.effect(\"e_zoompan\");\n      cldAsset.effect(\"e_loop\");\n    } else {\n      cldAsset.effect(`e_zoompan:${zoompan}`);\n    }\n  } else if (typeof zoompan === \"object\") {\n    let zoompanEffect = \"e_zoompan\";\n    if (typeof zoompan.options === \"string\") {\n      zoompanEffect = `${zoompanEffect}${zoompan.options}`;\n    }\n    cldAsset.effect(zoompanEffect);\n    let loopEffect;\n    if (zoompan.loop === true) {\n      loopEffect = \"e_loop\";\n    } else if (typeof zoompan.loop === \"string\") {\n      loopEffect = `e_loop${zoompan.loop}`;\n    }\n    if (loopEffect) {\n      cldAsset.effect(loopEffect);\n    }\n  }\n  if (zoompan !== false) {\n    overrides.format = \"gif\";\n  }\n  return {\n    options: overrides\n  };\n}\n\n// src/lib/cloudinary.ts\nvar transformationPlugins = [\n  remove_background_exports,\n  raw_transformations_exports,\n  cropping_exports,\n  effects_exports,\n  fill_background_exports,\n  flags_exports,\n  overlays_exports,\n  sanitize_exports,\n  named_transformations_exports,\n  seo_exports,\n  underlays_exports,\n  version_exports,\n  video_exports,\n  zoompan_exports\n];\nfunction constructCloudinaryUrl({ options, config, analytics }) {\n  const cld = new Cloudinary(config);\n  if (typeof (options == null ? void 0 : options.src) !== \"string\") {\n    throw Error(`Failed to construct Cloudinary URL: Missing source (src) in options`);\n  }\n  if (!(options == null ? void 0 : options.assetType)) {\n    options.assetType = \"image\";\n  }\n  const propsCheck = [];\n  transformationPlugins.forEach(({ props: props15 = [] }) => {\n    props15.forEach((prop) => {\n      if (propsCheck.includes(prop)) {\n        throw new Error(`Option ${prop} already exists!`);\n      }\n      propsCheck.push(prop);\n    });\n  });\n  const parsedOptions = {\n    seoSuffix: void 0,\n    version: void 0\n  };\n  let publicId;\n  if (typeof options.src === \"string\" && /^https?:\\/\\//.test(options.src)) {\n    try {\n      const parts = parseUrl(options.src);\n      publicId = parts == null ? void 0 : parts.publicId;\n      parsedOptions.seoSuffix = parts == null ? void 0 : parts.seoSuffix;\n      parsedOptions.version = parts == null ? void 0 : parts.version;\n    } catch (e) {\n    }\n  }\n  if (!publicId) {\n    publicId = options.src;\n  }\n  Object.keys(parsedOptions).forEach((key) => {\n    if (objectHasKey4(options, key))\n      return;\n    options[key] = parsedOptions[key];\n  });\n  let cldAsset = void 0;\n  if ([\"image\", \"images\"].includes(options.assetType)) {\n    cldAsset = cld.image(publicId);\n  } else if ([\"video\", \"videos\"].includes(options.assetType)) {\n    cldAsset = cld.video(publicId);\n  }\n  if (typeof cldAsset === \"undefined\") {\n    throw new Error(\"Invalid asset type.\");\n  }\n  transformationPlugins.forEach(({ plugin: plugin15, assetTypes: assetTypes15, props: props15 }) => {\n    const supportedAssetType = typeof (options == null ? void 0 : options.assetType) !== \"undefined\" && assetTypes15.includes(options == null ? void 0 : options.assetType);\n    if (!supportedAssetType) {\n      const optionsKeys = Object.keys(options);\n      const attemptedUse = props15.map((prop) => optionsKeys.includes(prop)).filter((isUsed) => !!isUsed).length > 0;\n      if (attemptedUse) {\n        console.warn(`One of the following props [${props15.join(\", \")}] was used with an unsupported asset type [${options == null ? void 0 : options.assetType}]`);\n      }\n      return;\n    }\n    const results = plugin15({\n      cldAsset,\n      options\n    });\n    const { options: pluginOptions } = results || { options: void 0 };\n    if ((pluginOptions == null ? void 0 : pluginOptions.format) && options) {\n      options.format = pluginOptions.format;\n    }\n    if ((pluginOptions == null ? void 0 : pluginOptions.width) && options) {\n      options.resize = {\n        width: pluginOptions == null ? void 0 : pluginOptions.width\n      };\n    }\n  });\n  if (options == null ? void 0 : options.resize) {\n    const { width, crop = \"scale\" } = options.resize;\n    cldAsset.effect(`c_${crop},w_${width}`);\n  }\n  cldAsset.setDeliveryType((options == null ? void 0 : options.deliveryType) || \"upload\");\n  if ((options == null ? void 0 : options.format) !== \"default\") {\n    cldAsset.format((options == null ? void 0 : options.format) || \"auto\");\n  }\n  if ((options == null ? void 0 : options.quality) !== \"default\") {\n    cldAsset.quality((options == null ? void 0 : options.quality) || \"auto\");\n  }\n  return cldAsset.toURL({\n    trackedAnalytics: analytics\n  });\n}\nexport {\n  constructCloudinaryUrl,\n  effects,\n  position,\n  primary,\n  text,\n  transformationPlugins\n};\n"],
  "mappings": "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",
  "names": ["flags", "color", "color", "mode", "mode", "mode", "lossy", "progressive", "preserveTransparency", "quality", "format", "color", "Map", "Promise", "isObject", "Map", "Promise", "isObject", "isObject", "focusOn", "auto", "num", "animated", "border", "quality", "format", "color", "LARGE_ARRAY_SIZE", "HASH_UNDEFINED", "argsTag", "arrayTag", "boolTag", "dateTag", "errorTag", "funcTag", "genTag", "mapTag", "numberTag", "objectTag", "promiseTag", "regexpTag", "setTag", "stringTag", "symbolTag", "weakMapTag", "arrayBufferTag", "dataViewTag", "float32Tag", "float64Tag", "int8Tag", "int16Tag", "int32Tag", "uint8Tag", "uint8ClampedTag", "uint16Tag", "uint32Tag", "reRegExpChar", "reIsHostCtor", "cloneableTags", "argsTag", "arrayTag", "arrayBufferTag", "dataViewTag", "boolTag", "dateTag", "float32Tag", "float64Tag", "int8Tag", "int16Tag", "int32Tag", "mapTag", "numberTag", "objectTag", "regexpTag", "setTag", "stringTag", "symbolTag", "uint8Tag", "uint8ClampedTag", "uint16Tag", "uint32Tag", "errorTag", "funcTag", "weakMapTag", "freeGlobal", "freeSelf", "root", "freeExports", "freeModule", "moduleExports", "getValue", "isHostObject", "overArg", "arrayProto", "funcProto", "objectProto", "coreJsData", "root", "maskSrcKey", "funcToString", "hasOwnProperty", "objectToString", "reIsNative", "reRegExpChar", "Buffer", "moduleExports", "Symbol", "Uint8Array", "getPrototype", "overArg", "propertyIsEnumerable", "objectProto", "splice", "arrayProto", "nativeGetSymbols", "nativeIsBuffer", "Buffer", "nativeKeys", "overArg", "DataView", "getNative", "root", "Map", "Promise", "Set", "WeakMap", "nativeCreate", "dataViewCtorString", "toSource", "mapCtorString", "promiseCtorString", "setCtorString", "weakMapCtorString", "symbolProto", "Symbol", "symbolValueOf", "Hash", "hashClear", "hashDelete", "hashGet", "HASH_UNDEFINED", "hasOwnProperty", "hashHas", "hashSet", "ListCache", "listCacheClear", "listCacheDelete", "assocIndexOf", "listCacheGet", "listCacheHas", "listCacheSet", "MapCache", "mapCacheClear", "mapCacheDelete", "getMapData", "mapCacheGet", "mapCacheHas", "mapCacheSet", "Stack", "stackClear", "stackDelete", "stackGet", "stackHas", "stackSet", "LARGE_ARRAY_SIZE", "assocIndexOf", "eq", "baseGetTag", "objectToString", "baseIsNative", "isObject", "isMasked", "isFunction", "isHostObject", "reIsNative", "reIsHostCtor", "toSource", "getMapData", "isKeyable", "getNative", "getValue", "baseIsNative", "getSymbols", "nativeGetSymbols", "overArg", "stubArray", "getTag", "baseGetTag", "DataView", "dataViewTag", "Map", "mapTag", "Promise", "promiseTag", "Set", "setTag", "WeakMap", "weakMapTag", "objectToString", "objectTag", "toSource", "dataViewCtorString", "mapCtorString", "promiseCtorString", "setCtorString", "weakMapCtorString", "isKeyable", "isMasked", "maskSrcKey", "toSource", "funcToString", "eq", "isArray", "isFunction", "isObject", "objectToString", "funcTag", "genTag", "isObject", "stubArray", "NUMBER_PATTERN", "OFFSET_ANY_PATTERN", "RANGE_VALUE_RE", "OFFSET_ANY_PATTERN_RE", "snakeCase", "DEFAULT_CONFIGURATION_PARAMS", "CONFIG_PARAMS", "reWords", "number_pattern", "offset_any_pattern", "methods", "PARAM_NAMES", "snakeCase", "CONFIG_PARAMS", "name", "crop", "text", "video", "text2", "removeBackground"]
}
