import { UrlTransformer, ImageCdn } from 'unpic';

type Layout = "fixed" | "constrained" | "fullWidth";
type Prettify<T> = {
    [K in keyof T]: T[K];
} & {};
interface ImageSourceOptions {
    src: string;
    width?: number;
    height?: number;
    aspectRatio?: number;
    layout?: Layout;
    breakpoints?: number[];
    transformer?: UrlTransformer;
    cdn?: ImageCdn;
}
/**
 * HTML image attributes, common to image components in multiple frameworks.
 * For React (and potentially other frameworks added in the future), convert to camelCase.
 */
interface CoreImageAttributes<TStyle = Record<string, string>> {
    src?: string | number | null;
    width?: string | number | null;
    height?: string | number | null;
    alt?: string | number | null;
    loading?: "eager" | "lazy" | null;
    decoding?: "sync" | "async" | "auto" | null;
    style?: TStyle;
    srcset?: string | number | null;
    role?: "presentation" | "img" | "none" | "figure" | (string & {}) | null;
    sizes?: string | number | null;
    fetchpriority?: "high" | "low" | "auto" | null;
}
type BaseImageProps<TImageAttributes extends CoreImageAttributes<TStyle>, TStyle> = Exclude<TImageAttributes, "srcset" | "style"> & ImageSourceOptions & {
    priority?: boolean;
    fetchpriority?: "high" | "low";
    background?: string;
    objectFit?: "contain" | "cover" | "fill" | "none" | "scale-down" | "inherit" | "initial";
};
type BaseImageWithAspectRatioProps<TImageAttributes extends CoreImageAttributes<TStyle>, TStyle> = BaseImageProps<TImageAttributes, TStyle> & {
    aspectRatio: number;
};
type ImageWithAspectRatioAndWidthProps<TImageAttributes extends CoreImageAttributes<TStyle>, TStyle> = BaseImageWithAspectRatioProps<TImageAttributes, TStyle> & {
    width: number;
};
type ImageWithAspectRatioAndHeightProps<TImageAttributes extends CoreImageAttributes<TStyle>, TStyle> = BaseImageWithAspectRatioProps<TImageAttributes, TStyle> & {
    height: number;
};
type ImageWithWidthAndHeightProps<TImageAttributes extends CoreImageAttributes<TStyle>, TStyle> = BaseImageProps<TImageAttributes, TStyle> & {
    width: number;
    height: number;
};
type ImageWithSizeProps<TImageAttributes extends CoreImageAttributes<TStyle>, TStyle> = ImageWithAspectRatioAndWidthProps<TImageAttributes, TStyle> | ImageWithAspectRatioAndHeightProps<TImageAttributes, TStyle> | ImageWithWidthAndHeightProps<TImageAttributes, TStyle>;
type FixedImageProps<TImageAttributes extends CoreImageAttributes<TStyle>, TStyle> = Prettify<ImageWithSizeProps<TImageAttributes, TStyle> & {
    layout: "fixed";
}>;
type ConstrainedImageProps<TImageAttributes extends CoreImageAttributes<TStyle>, TStyle> = ImageWithSizeProps<TImageAttributes, TStyle> & {
    layout?: "constrained";
};
type FullWidthImageProps<TImageAttributes extends CoreImageAttributes<TStyle>, TStyle> = BaseImageProps<TImageAttributes, TStyle> & {
    layout: "fullWidth";
    width?: never;
};
type UnpicImageProps<TImageAttributes extends CoreImageAttributes<TStyle>, TStyle = TImageAttributes["style"]> = FixedImageProps<TImageAttributes, TStyle> | ConstrainedImageProps<TImageAttributes, TStyle> | FullWidthImageProps<TImageAttributes, TStyle>;
/**
 * Gets the `sizes` attribute for an image, based on the layout and width
 */
declare const getSizes: (width?: number, layout?: Layout) => string | undefined;
/**
 * Gets the styles for an image
 */
declare const getStyle: <TImageAttributes extends CoreImageAttributes<TStyle>, TStyle = Record<string, string>>({ width, height, aspectRatio, layout, objectFit, background, }: Pick<UnpicImageProps<TImageAttributes, TStyle>, "width" | "height" | "aspectRatio" | "layout" | "objectFit" | "background">) => TImageAttributes["style"];
/**
 * Gets the breakpoints for an image, based on the layout and width
 */
declare const getBreakpoints: ({ width, layout, }: {
    width?: number | undefined;
    layout: Layout;
}) => number[];
/**
 * Generate an image srcset
 */
declare const getSrcSet: ({ src, width, layout, height, aspectRatio, breakpoints, cdn, transformer, }: Omit<ImageSourceOptions, "src"> & {
    src: URL | string;
}) => string | undefined;
/**
 * Generates the props for an img element
 */
declare function transformProps<TImageAttributes extends CoreImageAttributes<TStyle>, TStyle = Record<string, string>>({ src, width, height, priority, layout, aspectRatio, cdn, transformer, objectFit, background, breakpoints, ...props }: UnpicImageProps<TImageAttributes, TStyle>): TImageAttributes;

export { BaseImageProps, ConstrainedImageProps, CoreImageAttributes, FixedImageProps, FullWidthImageProps, ImageSourceOptions, Layout, UnpicImageProps, getBreakpoints, getSizes, getSrcSet, getStyle, transformProps };
